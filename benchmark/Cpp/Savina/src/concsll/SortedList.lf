/**
 * Concurrency benchmark from the Savina benchmark suite.
 * Intended to measure intra-actor parallelism if 
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * @author Hannes Klein
 */

/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numWorkers=20
# 
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numWorkers' in globals():
    numWorkers = int(numWorkers)
  else:
    globals()['numWorkers'] = 20
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numWorkers = {numWorkers}')
]]] */
// Generated file with the following parameters:
// numWorkers = 20
// [[[end]]]

target Cpp {
    build-type : RelWithDebInfo,
    cmake-include: "../IncludeHeaders.cmake"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

public preamble {=
    enum MsgType {
      EndWorkMsg,
      ResultMsg,
      SizeMsg,
      ContainsMsg,
      WriteMsg
    };
    
    struct Message {
    
      MsgType type;
      int value;
    };
=}

reactor Master(numWorkers:int(20)) {
    
    state numWorkersTerminated:int(0);
    
    input inStart:void;
    output outFinished:void;
    
    /* [[[cog
      cog.outl(f'output[{numWorkers}] outWorkers:void;')
      cog.outl(f'input[{numWorkers}] inWorkers:void;')
    ]]] */
    output[20] outWorkers:void;
    input[20] inWorkers:void;
    // [[[end]]]
    output outSortedList:void;
    
    logical action startExecution:void;
    logical action finish:void;
    
    reaction(startExecution) -> outWorkers {=
        for(int i = 0; i < outWorkers.size(); ++i) {
            outWorkers[i].set();
        }
    =}
    
    reaction(finish) -> outFinished {=
        outFinished.set();
        outSortedList.set();
    =}
    
    reaction(inWorkers) -> finish {=
        
        for(int i = 0; i < inWorkers.size(); ++i) {
            if(inWorkers[i].is_present()) {
                numWorkersTerminated += 1;
                
                if(numWorkersTerminated == numWorkers) {
                    finish.schedule();
                }
            }
        }
    =}
    
    reaction(inStart) -> startExecution {=
        
        // init local state
        numWorkersTerminated = 0;
        
        // start execution
        startExecution.schedule();
    =}
}


reactor Worker(instance:int(0), numMessagesPerWorker:int(8000), writePercentage:int(10), sizePercentage:int(1)) {
    
    public preamble {=
        #include "PseudoRandom.hh"
    =}
    
    state messageCount:int(0);
    state random:{=PseudoRandom=};
    
    output outMaster:void;
    input inMaster:void;
    output outSortedList:{=Message=};
    input inSortedList:void;
    
    reaction(startup) {=
        // one time initialization
        messageCount = 0;
        random = PseudoRandom(instance + numMessagesPerWorker + writePercentage + sizePercentage);
    =}
    
    reaction(inMaster, inSortedList) -> outMaster, outSortedList {=
        
        messageCount += 1;
        if(messageCount <= numMessagesPerWorker) {
            int anInt = random.nextInt(100);
            
            if(anInt < sizePercentage) {
                outSortedList.set(Message{SizeMsg, -1});
            } else if(anInt < (sizePercentage + writePercentage)) {
                outSortedList.set(Message{WriteMsg, random.nextInt()});
            } else {
                outSortedList.set(Message{ContainsMsg, random.nextInt()});
            }
        } else {
            // reset local state
            messageCount = 0;
            random = PseudoRandom(instance + numMessagesPerWorker + writePercentage + sizePercentage);
            
            outMaster.set();
        }
    =}
}


reactor SortedListImpl {
    
    public preamble {=
        #include "reactor-cpp/logging.hh"
        #include <bitset>
    =}
    
    state dataList:{=SortedLinkedList<int>=};
    /* [[[cog
      cog.outl(f'state workersToSend:{{=std::bitset<{numWorkers}>=}};')
    ]]] */
    state workersToSend:{=std::bitset<20>=};
    // [[[end]]]
    
    input inMaster:void;
    /* [[[cog
      cog.outl(f'output[{numWorkers}] outWorkers:void;')
      cog.outl(f'input[{numWorkers}] inWorkers:{{=Message=}};')
    ]]] */
    output[20] outWorkers:void;
    input[20] inWorkers:{=Message=};
    // [[[end]]]
    
    logical action sendAnswers:void;
    
    reaction(inMaster) {=
        // check result
        reactor::log::Info() << "List Size = " << dataList.size();
        
        // reset local state
        dataList = SortedLinkedList<int>();
        workersToSend.reset();
    =}
    
    reaction(sendAnswers) -> outWorkers {=
        for(int i = 0; i < outWorkers.size(); ++i) {
            if(workersToSend[i]) {
                outWorkers[i].set();
                workersToSend[i] = false;
            }
        }
    =}
    
    reaction(inWorkers) -> sendAnswers {=
        
        sendAnswers.schedule();
        
        for(int i = 0; i < inWorkers.size(); ++i) {
            if(inWorkers[i].is_present()) {
                
                if(inWorkers[i].get()->type == WriteMsg) {
                    
                    int value = inWorkers[i].get()->value;
                    dataList.add(value);
                    workersToSend[i] = true;
                    
                } else if(inWorkers[i].get()->type == ContainsMsg) {
                    
                    int value = inWorkers[i].get()->value;
                    int result = dataList.contains(value) ? 1 : 0;
                    workersToSend[i] = true;
                    
                } else if(inWorkers[i].get()->type == SizeMsg) {
                    
                    int value = dataList.size();
                    workersToSend[i] = true;
                    
                }
            }
        }
    =}
    
    public preamble {=
        /**
         * Based on: http://www.cs.ucsb.edu/~franklin/20/assigns/prog2files/MySortedLinkedList.java
         */
        template <typename T>
        class SortedLinkedList {
        private:
          /**
           * stores a single item in the linked list
           */
          template <typename U>
          class Node {
          public:
            U item;
            Node<U>* next;
        
            Node(U& i) {
              item = i;
              next = nullptr;
            }
          };
        
          // a reference to the first node in the list
          Node<T>* head;
          // a reference to the node to return when next() is called
          Node<T>* iterator;
        public:
          /**
           * constructor creates a linked list with no items in it
           */
          SortedLinkedList() {
            head = nullptr;
            iterator = nullptr;
          }
        
          ~SortedLinkedList() {
            std::vector<Node<T>*> elementsToDelete;
        
            Node<T>* n = head;
            while (n != nullptr) {
              elementsToDelete.push_back(n);
              n = n->next;
            }
        
            for(auto el: elementsToDelete) {
              delete el;
            }
          }
        
          /**
           * isEmpty inputs: none return value: returns true if there are no items in linked list
           */
           bool isEmpty() {
             return (head == nullptr);
           }
        
           /**
            * add inputs: Comparable item return value: none adds an item into the list in sorted order
            */
           void add(T& item) {
             // make the new node to insert into list
             Node<T>* newNode = new Node(item);
             // first see if the list is empty
             if (head == nullptr) {
               // std::cout << "add " << item << " to front";
               head = newNode;
             } else if (item < head->item) {
               // there is something in the list
               // now check to see if it belongs in front
               // System.out.println("add "+item +"before"+head.item);
               newNode->next = head;
               head = newNode;
             } else {
               // otherwise, step down the list.  n will stop
               // at the node after the new node, and trailer will
               // stop at the node before the new node
               Node<T>* after = head->next;
               Node<T>* before = head;
               while (after != nullptr) {
                 if (item < after->item) {
                   break;
                 }
                 before = after;
                 after = after->next;
               }
               // insert between before & after
               newNode->next = before->next;
               before->next = newNode;
               // std::cout << "add " << item << "after" << before->item;
             }
           }
        
           /* contains
            * inputs: Comparable item
            * return value: true if equal item is in list, false otherwise
            */
           bool contains(T& item) {
             Node<T>* n = head;
             // for each node in the linked list
             while(n != nullptr) {
               // if it is equal, return true
               // note that I used compareTo here, not equals
               // because I am only guaranteed that the
               // compareTo method is implemented, not equals
               if(item == n->item) {
                 return true;
               }
               n = n->next;
             }
             // if it is not found in list, return false
             return false;
           }
        
           template <typename U>
           friend std::ostream& operator<<(std::ostream&, SortedLinkedList&);
        
           /**
            * next inputs: none return value: one element from the linked list This method returns each element in the linked
            * list in order. It is to be used in a loop to access every item in the list.
            */
           T* next() {
             if (iterator != nullptr) {
               Node<T>* n = iterator;
               iterator = iterator->next;
               return n->item;
             } else {
               return nullptr;
             }
           }
        
           /**
            * reset inputs: none return value: none resets the iterator so that the next call to next() will return the first
            * element in the list
            */
           void reset() {
             iterator = head;
           }
        
           /**
            * size inputs: none return value: the number of elements in linked list
            */
           int size() {
             int r = 0;
             Node<T>* n = head;
             // for each node in the linked list
             while (n != nullptr) {
               r++;
               n = n->next;
             }
             return r;
           }
        };
        
        /**
         * toString inputs: none return value: string representation of the linked list items Format must match assignment
         */
        template <typename T>
        std::ostream& operator<<(std::ostream& strm, SortedLinkedList<T>& a) {
          auto n = a.head;
          while(n != nullptr) {
            strm << n->item;
            n = n->next;
          }
          return strm;
        }
    =}
}


main reactor (numIterations:int(12), numMessagesPerWorker:int(8000), writePercentage:int(10), sizePercentage:int(1)) {
    
    /* [[[cog
      cog.outl(f'master = new Master(numWorkers={numWorkers});')
    ]]] */
    master = new Master(numWorkers=20);
    // [[[end]]]
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> master.inStart;
    master.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("SortedListBenchmark");
        /* [[[cog
          cog.outl(f'printArgs("numIterations", numIterations, "numMessagesPerWorker", numMessagesPerWorker, "writePercentage", writePercentage, "sizePercentage", sizePercentage, "numWorkers", {numWorkers});')
        ]]] */
        printArgs("numIterations", numIterations, "numMessagesPerWorker", numMessagesPerWorker, "writePercentage", writePercentage, "sizePercentage", sizePercentage, "numWorkers", 20);
        /// [[[end]]]
        printSystemInfo();
        runner.inStart.set();
    =}
    
    /* [[[cog
      cog.outl(f'workers = new[{numWorkers}] Worker(numMessagesPerWorker=numMessagesPerWorker, writePercentage=writePercentage, sizePercentage=sizePercentage);')
    ]]] */
    workers = new[20] Worker(numMessagesPerWorker=numMessagesPerWorker, writePercentage=writePercentage, sizePercentage=sizePercentage);
    // [[[end]]]
    sortedList = new SortedListImpl();
    
    master.outSortedList -> sortedList.inMaster;
    master.outWorkers -> workers.inMaster;
    sortedList.outWorkers -> workers.inSortedList;
    workers.outMaster -> master.inWorkers;
    workers.outSortedList -> sortedList.inWorkers;
    
}
