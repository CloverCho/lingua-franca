/**
 * Concurrency benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * This implementation uses a thread to simulate a smoker
 * smoking to catch the original Savina implementation closely.
 * 
 * @author Hannes Klein
 */

target Cpp {
    build-type : RelWithDebInfo,
    cmake-include: "CigaretteSmoker.cmake"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor ArbiterReactor(numRounds:size_t(1000), numSmokers:size_t(200)) {
    
    public preamble {=
        #include "PseudoRandom.hh"
        #include "reactor-cpp/logging.hh"
    =}
    
    state roundsSoFar: size_t(0);
    state random: PseudoRandom;
    
    input inStart:void;
    output outFinished:void;

    output[numSmokers] outSmokers:size_t;
    input[numSmokers] inSmokers:void;
    output[numSmokers] outSmokersStart:void;
    output[numSmokers] outSmokersStop:void;
    
    logical action chooseSmoker:void;
    logical action stop:void;
    
    reaction(inStart) -> chooseSmoker, outSmokersStart {=
        
        // reset local state
        roundsSoFar = 0;
        random = PseudoRandom(numRounds * numSmokers);
        
        // start excution
        chooseSmoker.schedule();
        for(auto& port : outSmokersStart) {
            port.set();
        }
    =}
    
    reaction(chooseSmoker) -> outSmokers {=
        
        // assume resources grabbed instantaneously
        int newSmokerIndex = abs(random.nextInt()) % numSmokers;
        int busyWaitPeriod = random.nextInt(1000) + 10;
        outSmokers[newSmokerIndex].set(busyWaitPeriod);
    =}
    
    reaction(stop) -> outFinished, outSmokersStop {=
        outFinished.set();
        for(auto& port : outSmokersStop) {
            port.set();
        }
    =}
    
    reaction(inSmokers) -> chooseSmoker, stop {=
        // resources are off the table, can place new ones on the table
        roundsSoFar += 1;
        reactor::log::Debug() << "roundsSoFar=" << roundsSoFar;
        if (roundsSoFar >= numRounds) {
            stop.schedule();
        } else {
            // choose a random smoker to start smoking
            chooseSmoker.schedule();
        }
    =}
}

reactor SmokerReactor(instance:int(0)) {
    
    // state related to thread
    state smokingThread: std::thread;
    state unlockThread: bool;
    state stopThread: bool;
    state limit: size_t;
    state mtx: std::mutex;
    state cv: std::condition_variable;
    
    input inArbiter: size_t;
    output outArbiter: void;
    
    // start and stop execution
    input inStop:void;
    input inStart:void;
    
    reaction(inStart) {=
        // reset state
        unlockThread = false;
        stopThread = false;
        limit = -1;
        smokingThread = std::thread(smoke, &unlockThread, &stopThread, &limit, &mtx, &cv);
    =}
    
    reaction(inStop) {=
        // stop the thread
        std::unique_lock<std::mutex> lck(mtx); // make sure thread waits on cv
        stopThread = true;
        unlockThread = true;
        cv.notify_all();
        lck.unlock();
        smokingThread.join();
    =}
    
    reaction(inArbiter) -> outArbiter {=
        
        std::unique_lock<std::mutex> lck(mtx); // wait for smoking to finish if necessary
        limit = *(inArbiter.get());
        unlockThread = true;
        cv.notify_all();
        lck.unlock();
        
        outArbiter.set();
    =}
    
    private preamble {=
        
        static int busyWait(const int limit) {
            int test = 0;
            
            for(int k = 0; k < limit; k++) {
                // Math.random() as workload in the original savina benchmark suite
                // what is equivalent in Cpp complexity-wise? maybe rand()
                rand();
                test++;
            }
            return test;
        }
        
        // Function for the thread to smoke
        static void smoke(bool * unlockThread, bool * stopThread, size_t * limit, std::mutex * mtx, std::condition_variable * cv) {
            
            std::unique_lock<std::mutex> lck(*mtx);
            
            while(true) {
                // wait for cv, protected against unintentional wake-ups with bool
                while(!(*unlockThread)) cv->wait(lck);
                if(*stopThread) {
                    return; // end thread cooperatively
                }
                
                // busy waiting using shared variable limit
                busyWait(*limit);
                
                *unlockThread = false;
            }
        }
    =}
}

main reactor (numIterations:size_t(12), numRounds:size_t(1000), numSmokers:size_t(200)) {
    
    arbiter = new ArbiterReactor(numRounds=numRounds, numSmokers=numSmokers);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> arbiter.inStart;
    arbiter.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        // based on the Savina implementation:
        srand(time(NULL));
        
        printBenchmarkInfo("CigaretteSmokerReactorLFCppBenchmark");
        printArgs("numIterations", numIterations, "numRounds", numRounds, "numSmokers", numSmokers);
        printSystemInfo();
        runner.inStart.set();
    =}
    
    smokers = new[numSmokers] SmokerReactor();
    
    smokers.outArbiter -> arbiter.inSmokers;
    arbiter.outSmokers -> smokers.inArbiter;
    arbiter.outSmokersStart -> smokers.inStart;
    arbiter.outSmokersStop -> smokers.inStop;
}