/**
 * Concurrency benchmark from the Savina benchmark suite. Intended
 * to measure reader-writer concurrency support.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * To break the causality loop the dictionary reactor contains a logical
 * action.
 * 
 * @author Hannes Klein
 */

target Cpp {
    build-type : RelWithDebInfo
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

public preamble {=
    enum MsgType {
      DoWorkMsg,
      EndWorkMsg,
      ResultMsg,
      ReadMsg,
      WriteMsg
    };
    
    struct Message {
    
      MsgType type;
      int key;
      int value;
    
      Message() {}
    
      Message(MsgType _type, int _key, int _value):
        type(_type), key(_key), value(_value) {}
    
      Message(MsgType _type):
        type(_type) {}
    
      Message(MsgType _type, int _key):
        type(_type), key(_key) {}
    };
=}

reactor Master(numWorkers: size_t{20}) {
    
    public preamble {=
        #include "reactor-cpp/logging.hh"
    =}
    
    state numWorkersTerminated: size_t{0};
    
    input inStart: void;
    output outFinished: void;
    
    output[numWorkers] outWorkers: Message;
    input[numWorkers] inWorkers: Message;
    output outDictionary:void;
    
    reaction(inStart) -> outWorkers {=
        // reset local state
        numWorkersTerminated = 0;
        
        // start execution
        auto msg = reactor::make_immutable_value<Message>(Message{DoWorkMsg});
        for (size_t i{0}; i < outWorkers.size(); i++) {
            outWorkers[i].set(msg);
        }
    =}
    
    reaction(inWorkers) -> outFinished {=
        for(size_t i{0}; i < inWorkers.size(); i++) {
            numWorkersTerminated += 1;
        }
        if(numWorkersTerminated == numWorkers) {
            reactor::log::Debug() << numWorkersTerminated << " workers terminated.";
            outFinished.set();
        }
    =}
}

reactor DictionaryImpl(numWorkers: size_t{20}, initialState: std::map<int,int>({==})) {
    
    public preamble {=
        #include "reactor-cpp/logging.hh"
    =}
    
    state dataMap: std::map<int,int>{initialState};
    state answersToSend: {=std::vector<reactor::ImmutableValuePtr<Message>>=};
    
    logical action sendAnswers: void;

    output[numWorkers] outWorkers: Message;
    input[numWorkers] inWorkers: Message; 
    input inMaster: void;
    
    reaction(startup) {=
        // first time init
        answersToSend =  std::vector<reactor::ImmutableValuePtr<Message>>(numWorkers);
    =}
    
    reaction(inMaster) {=
        // reset local state
        dataMap = initialState;
        answersToSend = std::vector<reactor::ImmutableValuePtr<Message>>(numWorkers);
    =}
    
    reaction(sendAnswers) -> outWorkers {=
        for(size_t i{0}; i < outWorkers.size(); i++) {
            if(answersToSend[i] != nullptr) {
                outWorkers[i].set(answersToSend[i]);
                answersToSend[i] = nullptr;
            }
        }
    =}
    
    reaction(inWorkers) -> sendAnswers {=
        //TODO The order of messages to read is relevant, it effectively
        // assigns priorities to the workers.
        for(size_t i{0}; i < inWorkers.size(); i++) {
            if(inWorkers[i].is_present()) {
                reactor::ImmutableValuePtr<Message> msg = inWorkers[i].get();
                
                if(msg->type == WriteMsg) {  
                    dataMap.emplace(msg->key, msg->value);
                    // Savina sends ResultMsg always independently if adding (key,value)
                    // to the map was successful.
                    answersToSend[i] = reactor::make_immutable_value<Message>(ResultMsg, -1, msg->value);
                } else if(msg->type == ReadMsg) {
                    int value = dataMap[msg->key];
                    // Savina does not handle what happens if the key is not present.
                    answersToSend[i] = reactor::make_immutable_value<Message>(ResultMsg, -1, value);
                }
            }
        }
        
        sendAnswers.schedule();
    =}
}

reactor Worker(bank_index: size_t{0}, numMessagesPerWorker: size_t{10000}, writePercentage: int{10}) {
    
    public preamble {=
        #include <random>
    =}
    
    state messageCount: size_t{0};
    state random: std::minstd_rand;
    
    input inMaster: Message;
    output outMaster: Message;
    
    input inDict: Message;
    output outDict: Message;
    
    reaction(inMaster) -> outDict {=
        if(inMaster.get()->type == DoWorkMsg) {
            //reset local state
            random.seed(bank_index + numMessagesPerWorker + writePercentage);
            messageCount = 0;
            
            messageCount += 1; // as in original Savina implementation
            int anInt = static_cast<int>(random()) % 100;
            if(anInt < writePercentage) {
                outDict.set(Message{WriteMsg, static_cast<int>(random()), static_cast<int>(random())});
            } else {
                outDict.set(Message{ReadMsg, static_cast<int>(random())});
            }
        }
    =}
    
    reaction(inDict) -> outDict, outMaster {=
        messageCount += 1;
        
        if(messageCount <= numMessagesPerWorker) {
            int anInt = static_cast<int>(random()) % 100;
            if(anInt < writePercentage) {
                outDict.set(Message{WriteMsg, static_cast<int>(random()), static_cast<int>(random())});
            } else {
                outDict.set(Message{ReadMsg, static_cast<int>(random())});
            }
        } else {
            outMaster.set(Message{EndWorkMsg, -1, -1});
        }
    =}
}

main reactor (numIterations: size_t{12}, numMessagesPerWorker: size_t{10000}, writePercentage: int{10}, numWorkers: size_t{20}) {
    
    master = new Master(numWorkers=numWorkers);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> master.inStart;
    master.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("DictionaryReactorLFCppBenchmark");
        printArgs("numIterations", numIterations, "numMessagesPerWorker", numMessagesPerWorker,
                  "writePercentage", writePercentage, "numWorkers", numWorkers);
        printSystemInfo();
        runner.inStart.set();
    =}
    
    dict = new DictionaryImpl(numWorkers=numWorkers);
    workers = new[numWorkers] Worker(numMessagesPerWorker=numMessagesPerWorker, writePercentage=writePercentage);
    
    dict.outWorkers -> workers.inDict;
    workers.outDict -> dict.inWorkers;
    workers.outMaster -> master.inWorkers;
    master.outWorkers -> workers.inMaster;
    master.outDictionary -> dict.inMaster;   
}