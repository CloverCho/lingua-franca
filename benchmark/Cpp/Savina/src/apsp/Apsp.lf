/**
 * Parallelism benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * This version manually connects the reactors.
 * 
 * @author Hannes Klein
 * @author Christian Menard
 */

/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D blockSize=50
# -D numNodes=300
# 
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'blockSize' in globals():
    blockSize = int(blockSize)
  else:
    globals()['blockSize'] = 50
  
  if 'numNodes' in globals():
    numNodes = int(numNodes)
  else:
    globals()['numNodes'] = 300
  
  if numNodes % blockSize != 0:
    cog.error(f'numNodes={numNodes} must be a multiple of blockSize={blockSize}')
  
  # define the following variables for convenience
  globals()['numBlocksInSingleDim'] = int(numNodes / blockSize);
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// blockSize = {blockSize}')
  cog.outl(f'// numNodes = {numNodes}')
]]] */
// Generated file with the following parameters:
// blockSize = 50
// numNodes = 300
// [[[end]]]

target Cpp {
    build-type : RelWithDebInfo,
    cmake-include: "../IncludeHeaders.cmake"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


public preamble {=
    using MatrixOfLong = std::vector<std::vector<long>>;
    
    struct ApspResultMessage {
      int k;
      int myBlockId;
      reactor::ImmutableValuePtr<MatrixOfLong> initData;
    
      ApspResultMessage() {}
    
      ApspResultMessage(int _k, int _myBlockId, reactor::ImmutableValuePtr<MatrixOfLong> _initData):
        k(_k), myBlockId(_myBlockId), initData(_initData) {}
    };
=}

reactor ApspFloydWarshallBlock(
    bank_index: size_t{0},
    row_index: size_t{0},
    graphSize:size_t{300},
    blockSize:size_t{50},
    dimension:size_t{6})
{
    state neighborDataPerIteration: {=std::map<int, reactor::ImmutableValuePtr<MatrixOfLong>>=};
    state numNeighbors: {=const size_t=}{{=2 * (dimension - 1)=}};
    state rowOffset: {=const size_t=}{{=row_index * blockSize=}}; // row offset of the block of this reactor
    state colOffset: {=const size_t=}{{=bank_index * blockSize=}}; // column offset of the block of this reactor
    state currentIterData: {=reactor::ImmutableValuePtr<MatrixOfLong>=}{{=nullptr=}};
    state k: size_t{0}; // iteration counter
    state reportedFinish: bool {false};

	input matrix: MatrixOfLong;

    input[dimension] fromRow: ApspResultMessage;
    input[dimension] fromCol: ApspResultMessage;

    output toNeighbors: ApspResultMessage;    
    output finished: void;
    
    logical action notifyNeighbors;
    
    reaction(matrix) -> notifyNeighbors {=
        currentIterData = reactor::ImmutableValuePtr<MatrixOfLong>(
            getBlock(matrix.get(), row_index * dimension + bank_index, graphSize, blockSize)
        );
        
        // reset local state
        neighborDataPerIteration.clear();
        k = 0;
        reportedFinish = false;
        
        // start execution
        notifyNeighbors.schedule();
    =}
    
    reaction(notifyNeighbors) -> toNeighbors {=
        //notify all neighbors
        reactor::ImmutableValuePtr<ApspResultMessage> resultMessage =
          reactor::make_immutable_value<ApspResultMessage>(k, row_index * dimension + bank_index, currentIterData);
        toNeighbors.set(resultMessage);
    =}
    
    reaction(fromRow, fromCol) -> notifyNeighbors, finished {=
        
        // do nothing if complete
        if(k == graphSize) {
            if(doPrint && !printed && bank_index == 0 && row_index == 0) {
                // debugging and result checking
                // print(*currentIterData);
                printed = 1;
            }
            return;
        }
        
        // collect all input messages
        bool haveAllData = false;
        for(auto& port : fromRow) {
            if(port.is_present()) {
                haveAllData |= storeIterationData(port.get(), neighborDataPerIteration, dimension);
            }
        }
        for(auto& port : fromCol) {
            if(port.is_present()) {
                haveAllData |= storeIterationData(port.get(), neighborDataPerIteration, dimension);
            }
        }
        
        if(!haveAllData) return;
        
        // perform computation
        reactor::MutableValuePtr<MatrixOfLong> nextIterData =
          reactor::make_mutable_value<MatrixOfLong>(blockSize, std::vector<long>(blockSize, 0));
        
        for(size_t i = 0; i < blockSize; i++) {
            for(size_t j = 0; j < blockSize; j++) {
                int gi = rowOffset + i;
                int gj = colOffset + j;
                
                long newIterData =
                    elementAt(gi, k, currentIterData,
                        blockSize, dimension, row_index * dimension + bank_index, neighborDataPerIteration) +
                    elementAt(k, gj, currentIterData,
                        blockSize, dimension, row_index * dimension + bank_index, neighborDataPerIteration);
                (*nextIterData)[i][j] = std::min((*currentIterData)[i][j], newIterData);
            }
        }
        
        // FIXME This should work without the explicit conversion t
        currentIterData = reactor::ImmutableValuePtr<MatrixOfLong>(std::move(nextIterData));
        neighborDataPerIteration.clear();
        notifyNeighbors.schedule();
        
        k++;
        
        if(k == graphSize) {
            finished.set();
        }
    =}
    
    // FIXME: This should be methods!
    private preamble {=
        
        // invisible local state for debugging
        static int printed = 0;
        static int doPrint = 1;
        
        //helper functions
        
        reactor::MutableValuePtr<MatrixOfLong> getBlock(
            const reactor::ImmutableValuePtr<MatrixOfLong>& srcData, int myBlockId, int N, int B) {
            
            reactor::MutableValuePtr<MatrixOfLong> localData =
                reactor::make_mutable_value<MatrixOfLong>(std::vector(B, std::vector<long>(B, 0)));
            
            int numBlocksPerDim = N/B;
            int globalStartRow = (myBlockId / numBlocksPerDim) * B;
            int globalStartCol = (myBlockId % numBlocksPerDim) * B;
            
            for(int i = 0; i < B; i++) {
                for(int j = 0; j < B; j++) {
                    (*localData)[i][j] = (*srcData)[i + globalStartRow][j + globalStartCol];
                }
            }
            return localData;
        }
        
        bool storeIterationData(const reactor::ImmutableValuePtr<ApspResultMessage>& inData,
          std::map<int, reactor::ImmutableValuePtr<MatrixOfLong>>& neighborDataPerIteration,
          size_t numNeighbors) {
          neighborDataPerIteration.insert(
                std::pair<int, reactor::ImmutableValuePtr<MatrixOfLong>>(inData->myBlockId, inData->initData));
            return neighborDataPerIteration.size() == numNeighbors;
        }
        
        long elementAt(int row, int col, const reactor::ImmutableValuePtr<MatrixOfLong>& prevIterData,
            int blockSize, int dimension, int myBlockId,
            std::map<int, reactor::ImmutableValuePtr<MatrixOfLong>>& neighborDataPerIteration) {
            
            int destBlockId = ((row / blockSize) * dimension) + (col / blockSize);
            int localRow = row % blockSize;
            int localCol = col % blockSize;
            
            if(destBlockId == myBlockId) {
                return (*prevIterData)[localRow][localCol];
            } else {
                reactor::ImmutableValuePtr<MatrixOfLong>& blockData = neighborDataPerIteration.at(destBlockId);
                return (*blockData)[localRow][localCol];
            }
        }
        
        void print(const MatrixOfLong& array) {
            for(auto vec: array) {
                for(auto lon: vec) {
                    std::cout << lon << " ";
                }
                std::cout << std::endl;
            }
        }
    =}
}


reactor ApspRow(
    blockSize: size_t{50},
    numNodes: size_t{300},
    dimension: size_t{6}) {
        
    input matrix: MatrixOfLong;
    output[dimension] finished: void;

    input[dimension] fromCol: ApspResultMessage;
    output toCol: ApspResultMessage;
        
    blocks = new[dimension] ApspFloydWarshallBlock(blockSize=blockSize, graphSize=numNodes, dimension=dimension);
    
    // connect all blocks within the row
    (blocks.toNeighbors)+ -> blocks.fromRow;
    
    // block output to all column neighbours
    blocks.toNeighbors -> toCol;
    // block input from all column neighbours
    (fromCol)+ -> blocks.fromCol;
    
    // broadcast the incoming matrix to all blocks
    (matrix)+ -> blocks.matrix;
    // collect and forward finished signals from all blocks
    blocks.finished -> finished;
}

reactor ApspMatrix(
    blockSize: size_t{50},
    numNodes: size_t{300},
    dimension: size_t{6})
{
	input matrix: MatrixOfLong;
	// FIXME!
	output[36] finished: void;
	
	rows = new[dimension] ApspRow(blockSize=blockSize, numNodes=numNodes, dimension=dimension);
	
	// broadcast the incoming matrix to all rows
    (matrix)+ -> rows.matrix;
    // collect and forward finished signals from all blocks
    //rows.finished -> finished;
    
    (rows.toCol)+ -> rows.fromCol;
}

main reactor (
    numIterations: size_t{12},
    maxEdgeWeight: size_t{100},
    blockSize: size_t{50},
    numNodes: size_t{300}) {
	
	state graphData: {=reactor::ImmutableValuePtr<MatrixOfLong>=};
    state numBlocksFinished: int{0};
	
	runner = new BenchmarkRunner(numIterations=numIterations, useInit=true, useCleanupIteration=true);
	//matrix = new ApspMatrix(blockSize=blockSize, numNodes=numNodes, dimension=6);
	// FIXME!
	matrix = new ApspMatrix(blockSize=blockSize, numNodes=numNodes, dimension={=numNodes / blockSize=});
    
    reaction(runner.outInitializeStart) -> runner.inInitializeFinish {=
        // initialization of graph is not measured
        graphData = reactor::ImmutableValuePtr<MatrixOfLong>(generateGraph(numNodes, maxEdgeWeight));
        runner.inInitializeFinish.set();
    =}
    
    reaction(runner.outCleanupIterationStart) -> runner.inCleanupIterationFinish {=
        //TODO check if result is correct
        
        // initialization of the graph for the next iteration
        graphData = reactor::ImmutableValuePtr<MatrixOfLong>(generateGraph(numNodes, maxEdgeWeight));
        runner.inCleanupIterationFinish.set();
    =}

	// FIXME This should not produce an unused variable warning
    reaction(runner.outIterationStart) -> matrix.matrix {=
        // reset local state
        numBlocksFinished = 0;

        // start execution
        matrix.matrix.set(graphData);
	=}

	// FIXME
	matrix.finished -> runner.inIterationFinish;
    
    private preamble {=  
        #include "PseudoRandom.hh"
        
        reactor::MutableValuePtr<MatrixOfLong> generateGraph(int N, int W) {
            PseudoRandom random(N);
            reactor::MutableValuePtr<MatrixOfLong> localData =
                reactor::make_mutable_value<MatrixOfLong>(std::vector(N, std::vector<long>(N, 0)));
            //MatrixOfLong localData(N, std::vector<long>(N, 0));
            
            for(int i = 0; i < N; i++) {
                for(int j = i+1; j < N; j++) {
                    int r = random.nextInt(W)+1;
                    (*localData)[i][j] = r;
                    (*localData)[j][i] = r;
                }
            }
            
            return localData;
        }
    =}
}