/**
 * Parallelism benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * @author Hannes Klein
 */

/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numWorkers=100
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numWorkers' in globals():
    numWorkers = int(numWorkers)
  else:
    globals()['numWorkers'] = 100
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numWorkers = {numWorkers}')
]]] */
// Generated file with the following parameters:
// numWorkers = 100
// [[[end]]]

target Cpp {
    build-type : RelWithDebInfo
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


public preamble {=
    struct WorkMessage {
    
      double l;
      double r;
      double h;
    };
=}

reactor Master(numWorkers:int(100), L:double(1.0), R:double(5.0), N:int(10000000)) {
    
    public preamble {=
        #include "reactor-cpp/logging.hh"
    =}
    
    state numTermsReceived:int(0);
    state resultArea:double(0.0);
    
    input inStart:void;
    output outFinished:void;
    
    /* [[[cog
      cog.outl(f'output[{numWorkers}] outWorkers:{{=WorkMessage=}};')
      cog.outl(f'input[{numWorkers}] inWorkers:{{=double=}};')
    ]]] */
    output[100] outWorkers:{=WorkMessage=};
    input[100] inWorkers:{=double=};
    // [[[end]]]
    
    logical action sendWorkMessages:void;
    
    reaction(inStart) -> sendWorkMessages {=
        
        // reset local state
        numTermsReceived = 0;
        resultArea = 0.0;
        
        // start execution
        sendWorkMessages.schedule();
    =}
    
    reaction(sendWorkMessages) -> outWorkers {=
        
        double workerRange = (R - L) / numWorkers;
        double precision = (R - L) / N;
        for(int i = 0; i < outWorkers.size(); ++i) {
            double wl = (workerRange * i) + L;
            double wr = wl + workerRange;
            
            outWorkers[i].set(WorkMessage{wl,wr,precision});
        }
    =}
    
    reaction(inWorkers) -> outFinished {=
        
        for(int i = 0; i < inWorkers.size(); ++i) {
            if(inWorkers[i].is_present()) {
                numTermsReceived += 1;
                resultArea += *inWorkers[i].get();
            }
        }
        
        if(numTermsReceived == numWorkers) {
            reactor::log::Info() << "Area: " << resultArea;
            outFinished.set();
        }
    =}
}


reactor Worker(instance:int(0)) {
    
    private preamble {=
        #include <cmath>
    =}
    
    input inMaster:{=WorkMessage=};
    output outMaster:{=double=};
    
    reaction(inMaster) -> outMaster {=
        
        double r = inMaster.get()->r;
        double l = inMaster.get()->l;
        double h = inMaster.get()->h;
        int n = static_cast<int>( ((r - l) / h) );
        double accumArea = 0.0;
        
        int i = 0;
        while(i < n) {
            double lx = (i * h) + l;
            double rx = lx + h;
            
            double ly = fx(lx);
            double ry = fx(rx);
            
            double area = 0.5 * (ly + ry) * h;
            accumArea += area;
            
            i += 1;
        }
        
        outMaster.set(accumArea);
    =}
    
    private preamble {=
        
        // the function to integrate
        double fx(double x) {
            
            double a = sin(pow(x, 3.0) - 1);
            double b = x + 1;
            double c = a / b;
            double d = sqrt(1.0 + exp(sqrt(2 * x)));
            double r = c * d;
            return r;
        }
    =}
}


main reactor (numIterations:int(12), numPieces:int(10000000), leftEndPoint:double(1.0), rightEndPoint:double(5.0)) {
    
    /* [[[cog
      cog.outl(f'master = new Master(numWorkers={numWorkers}, L=leftEndPoint, R=rightEndPoint, N=numPieces);')
    ]]] */
    master = new Master(numWorkers=100, L=leftEndPoint, R=rightEndPoint, N=numPieces);
    // [[[end]]]
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> master.inStart;
    master.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("TrapezoidalBenchmark");
        /* [[[cog
          cog.outl(f'printArgs("numIterations", numIterations, "numPieces", numPieces, "leftEndPoint", leftEndPoint, "rightEndPoint", rightEndPoint, "numWorkers", {numWorkers});')
        ]]] */
        printArgs("numIterations", numIterations, "numPieces", numPieces, "leftEndPoint", leftEndPoint, "rightEndPoint", rightEndPoint, "numWorkers", 100);
        /// [[[end]]]
        printSystemInfo();
        runner.inStart.set();
    =}
    
    /* [[[cog
      cog.outl(f'workers = new[{numWorkers}] Worker();')
    ]]] */
    workers = new[100] Worker();
    // [[[end]]]
    
    workers.outMaster -> master.inWorkers;
    master.outWorkers -> workers.inMaster;
}
