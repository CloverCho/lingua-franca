target Cpp;

import Philosopher from "Philosopher.lf";
import Master from "../Master.lf";


reactor Arbitrator(count:unsigned(10000), verbose:bool(false)) {
    
    public preamble {=
        constexpr unsigned num_philosophers = 20;
        using ForkArray = std::array<bool, num_philosophers>;
    =}
    
    private preamble {=
        /*
         * Try to acquire both forks for a philosopher. Returns true if
         * successful and false otherwise. 
         */
        bool acquire_forks(ForkArray& forks, unsigned instance) {
            unsigned left = instance;
            unsigned right = (instance + 1) % num_philosophers;
            if (forks[left] || forks[right]) {
                // someone else has access to the forks
                return false;
                // forks are free
            } else {
                forks[left] = true;
                forks[right] = true;
                return true;
            }
        }
        
        /*
         * Release the forks acquired by a philosopher. This does not perform
         * any checks!
         */
         void free_forks(ForkArray& forks, unsigned instance) {
            forks[instance] = false; // left
            forks[(instance + 1) % num_philosophers] = false; // right
         }
    =}
    
    input start:void;
    output finished:void;
    
    output[20] philosopher_start:void; 
    input[20] philosopher_finished:void;
    
    input[20] hungry:void;
    input[20] done:void;
    output[20] eat:void;
    output[20] denied:void;
    
    state forks:ForkArray(false);
    state finished_philosophers:unsigned(0);
    state arbitration_id:unsigned(0);
    state retries:unsigned(0);
        
    reaction(start) -> philosopher_start {=
        if (verbose)
            std::cout << "Starting the arbitrator\n";
        finished_philosophers = 0;
        retries = 0;

        for(auto& p : philosopher_start) {
            p.set();
        }
    =}
    
    reaction(hungry) -> eat, denied {= 
        // Iterate over all philosophers, each time starting from a different one.
        // This arbitration ensures that no philosopher has to starve.
        for(unsigned i = arbitration_id; i < arbitration_id + num_philosophers; i++) {
            unsigned j = i % num_philosophers;
            if (hungry[j].is_present()) {
                if (acquire_forks(forks, j)) {
                    eat[j].set();
                } else {
                    denied[j].set();
                    retries++;
                }    
            }
        }
        
        arbitration_id++;
        if (arbitration_id == num_philosophers) {
            arbitration_id = 0;
        }
    =}
    
    reaction(done) {=
        for(unsigned i = 0; i < done.size(); i++) {
            if (done[i].is_present()) {
                free_forks(forks, i);
            }
        }
    =}
    
    reaction (philosopher_finished) -> finished {=
        for(auto& f : philosopher_finished) {
            if (f.is_present())
                finished_philosophers++;
        }
        
        if (verbose)
            std::cout << "finished philosophers: " << finished_philosophers << "\n";

        if(finished_philosophers == num_philosophers) {
            std::cout << "Num retries: " << retries << '\n';
            finished.set();
        }        
    =}
}

main reactor PhilosophersSequentialInterleaved(iterations:unsigned(12), count:unsigned(10000), verbose:bool(false)) {
    master = new Master(iterations=iterations);
    
    arbitrator = new Arbitrator(count=count, verbose=verbose);
    philosophers = new[20] Philosopher(count=count, verbose=verbose);

    master.start -> arbitrator.start;
    arbitrator.finished -> master.finished;
    
    arbitrator.philosopher_start -> philosophers.start;
    philosophers.finished -> arbitrator.philosopher_finished;
    
    philosophers.hungry -> arbitrator.hungry;
    philosophers.done -> arbitrator.done;
    arbitrator.eat -> philosophers.eat;
    arbitrator.denied -> philosophers.denied;
}