/**
 * Concurrency benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * This implementation stays close to the Savina implementation
 * with Akka. There is no notion of time and there is no delay
 * or work done when a philosopher is thinking or eating.
 * 
 * @author Hannes Klein
 */

/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numPhilosophers=20
# 
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numPhilosophers' in globals():
    numPhilosophers = int(numPhilosophers)
  else:
    globals()['numPhilosophers'] = 20
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numPhilosophers = {numPhilosophers}')
]]] */
// Generated file with the following parameters:
// numPhilosophers = 20
// [[[end]]]

target Cpp {
    build-type : RelWithDebInfo
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


public preamble {=
    enum MsgType {
      StartMsg,
      HungryMsg,
      DoneMsg,
      ExitMsg,
      DeniedMsg,
      EatMsg
    };
    
    struct Message {
    
      MsgType type;
    };
=}

reactor ArbitratorReactor(numPhilosophers:int(20), numForks:int(20)) {
    
    public preamble {=
        #include <bitset>
    =}
    
    state messagesToSend:{=std::vector<std::pair<int,Message>>=};
    /* [[[cog
      cog.outl(f'state forks:{{=std::bitset<{numPhilosophers}>=}};')
    ]]] */
    state forks:{=std::bitset<20>=};
    // [[[end]]]
    state numExitedPhilosophers:int(0);
    
    input inStart:void;
    output outFinished:void;
    
    /* [[[cog
      cog.outl(f'output[{numPhilosophers}] outPhilosophers:{{=Message=}};')
      cog.outl(f'input[{numPhilosophers}] inPhilosophers:{{=Message=}};')
    ]]] */
    output[20] outPhilosophers:{=Message=};
    input[20] inPhilosophers:{=Message=};
    // [[[end]]]
    output outCounter:void;
    
    logical action sendMessages:void;
    
    reaction(startup) {=
        messagesToSend.reserve(numPhilosophers);
    =}
    
    reaction(inStart) -> outPhilosophers, outCounter {=
        
        // reset state
        messagesToSend.clear();
        numExitedPhilosophers = 0;
        forks.reset();
        
        // reset other reactors and start execution
        for(auto& p: outPhilosophers) {
            p.set(Message{StartMsg});
        }
        outCounter.set();
    =}
    
    reaction(sendMessages) -> outPhilosophers {=
        for(int i = 0; i < messagesToSend.size(); i++) {
            outPhilosophers[messagesToSend[i].first].set(messagesToSend[i].second);
        }
        messagesToSend.clear();
    =}
    
    reaction(inPhilosophers) -> outFinished, sendMessages {=
        
        // the order of checking the inputs gives the philosophers a priority
        for(int i = 0; i < inPhilosophers.size(); i++) {
            if(inPhilosophers[i].is_present()) {
                if(inPhilosophers[i].get()->type == HungryMsg) {
                    
                    bool leftFork = forks[i];
                    bool rightFork = forks[(i + 1) % numForks];
                    
                    if(leftFork || rightFork) {
                        // someone else has access to the fork
                        //outPhilosophers[i].set(Message{DeniedMsg});
                        messagesToSend.push_back(std::pair{i, Message{DeniedMsg}});
                    } else {
                        forks[i] = true;
                        forks[(i + 1) % numForks] = true;
                        //outPhilosophers[i].set(Message{EatMsg});
                        messagesToSend.push_back(std::pair{i, Message{EatMsg}});
                    }
                    
                } else if(inPhilosophers[i].get()->type == DoneMsg) {
                    
                    forks[i] = false;
                    forks[(i + 1) % numForks] = false;
                    
                } else if(inPhilosophers[i].get()->type == ExitMsg) {
                    
                    numExitedPhilosophers += 1;
                    if(numForks == numExitedPhilosophers) {
                        outFinished.set();
                    }
                }
            }
        }
        
        // schedule sending messages here for efficiency
        sendMessages.schedule();
    =}
}

reactor PhilosopherReactor(instance:int(0), rounds:int(10000)) {
    
    state localCounter:long(0); // count failed tries
    state roundsSoFar:int(0); // count successful tries
    
    input inArbitrator:{=Message=};
    output outArbitrator:{=Message=};
    output outCounterDenied:long;
    
    logical action requestToEat:void;
    logical action finish:void;
    
    reaction(requestToEat) -> outArbitrator {=
        outArbitrator.set(Message{HungryMsg});
    =}
    
    reaction(finish) -> outArbitrator {=
        outArbitrator.set(Message{ExitMsg});
        outCounterDenied.set(localCounter);
    =}
    
    reaction(inArbitrator) -> outArbitrator, requestToEat, finish {=
        
        if(inArbitrator.get()->type == DeniedMsg) {
            localCounter += 1;
            outArbitrator.set(Message{HungryMsg});
            
        } else if(inArbitrator.get()->type == EatMsg) {
            roundsSoFar += 1;
            outArbitrator.set(Message{DoneMsg});
            
            if(roundsSoFar < rounds) {
                requestToEat.schedule();
            } else {
                finish.schedule();
            }
        } else if(inArbitrator.get()->type == StartMsg) {
            //reset state
            localCounter = 0;
            roundsSoFar = 0;
            
            //start eating
            requestToEat.schedule();
        }
    =}
}

reactor CounterReactor(numLocalCounters:int(20)) {
    
    private preamble {=
        #include "reactor-cpp/logging.hh"
    =}
    
    state counter:long(0);
    state receivedLocalCounts:int(0);
    
    /* [[[cog
      cog.outl(f'input[{numPhilosophers}] inLocalCounters:long;')
    ]]] */
    input[20] inLocalCounters:long;
    // [[[end]]]
    input inController:void;
    
    reaction(inController) {=
        //reset local state
        counter = 0L;
        receivedLocalCounts = 0;
    =}
    
    reaction(inLocalCounters) {=
        for(int i = 0; i < inLocalCounters.size(); i++) {
            if(inLocalCounters[i].is_present()) {
                counter += *(inLocalCounters[i].get());
                receivedLocalCounts += 1;
            }
        }
        
        if(receivedLocalCounts >= numLocalCounters) {
            reactor::log::Info() << "Counted: " << counter;
        }
    =}
}

main reactor (numIterations:int(12), numEatingRounds:int(10000)) {
    
    /* [[[cog
      cog.outl(f'arbitrator = new ArbitratorReactor(numPhilosophers={numPhilosophers}, numForks={numPhilosophers});')
    ]]] */
    arbitrator = new ArbitratorReactor(numPhilosophers=20, numForks=20);
    // [[[end]]]
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> arbitrator.inStart;
    arbitrator.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("PhilosopherReactorLFCppBenchmark");
        /* [[[cog
          cog.outl(f'printArgs("numIterations", numIterations, "numEatingRounds", numEatingRounds, "numPhilosophers", {numPhilosophers});')
        ]]] */
        printArgs("numIterations", numIterations, "numEatingRounds", numEatingRounds, "numPhilosophers", 20);
        /// [[[end]]]
        printSystemInfo();
        runner.inStart.set();
    =}
    
    /* [[[cog
      cog.outl(f'philosophers = new[{numPhilosophers}] PhilosopherReactor(rounds=numEatingRounds);')
    ]]] */
    philosophers = new[20] PhilosopherReactor(rounds=numEatingRounds);
    // [[[end]]]
    counter = new CounterReactor(numLocalCounters=20);
    
    arbitrator.outPhilosophers -> philosophers.inArbitrator;
    philosophers.outArbitrator -> arbitrator.inPhilosophers;
    arbitrator.outCounter -> counter.inController;
    philosophers.outCounterDenied -> counter.inLocalCounters;
    
}
