/**
 * Concurrency benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * @author Hannes Klein
 */
 
 /**
 * Micro-benchmark from the Savina benchmark suite, intended
 * to measure message passing overhead and switching between
 * actors.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * To open the causality loop in the ring of reactors one
 * reactor uses a logical action for message passing.
 * 
 * @author Hannes Klein
 */

/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numProducers=40
# -D numConsumers=40
# 
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numProducers' in globals():
    numProducers = int(numProducers)
  else:
    globals()['numProducers'] = 40
  if 'numConsumers' in globals():
    numConsumers = int(numConsumers)
  else:
    globals()['numConsumers'] = 40
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numProducers = {numProducers}')
  cog.outl(f'// numConsumers = {numConsumers}')
]]] */
// Generated file with the following parameters:
// numProducers = 40
// numConsumers = 40
// [[[end]]]

target Cpp {
    build-type : RelWithDebInfo,
    cmake-include: "../include/IncludeHeaders.cmake"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


public preamble {=
    enum MsgType {
      DataItemMsg,
      ProduceDataMsg,
      ProducerExitMsg,
      ConsumerAvailableMsg,
      ConsumerExitMsg
    };
    
    struct Message {
      MsgType type;
      double data;
    };
=}

reactor ManagerReactor(bufferSize:int(50), numProducers:int(40), numConsumers:int(40)) {
    
    state adjustedBufferSize:int({=bufferSize-numProducers=});
    state availableProducers:{=std::vector<int>=};
    state availableConsumers:{=std::vector<int>=};
    state pendingData:{=std::vector<reactor::ImmutableValuePtr<Message>>=};
    state numTerminatedProducers:int(0);
    
    input inStart:void;
    output outFinished:void;
    
    logical action consume:void;
    logical action produce:void;
    
    /* [[[cog
      cog.outl(f'input[{numProducers}] inProducers:{{=Message=}};')
      cog.outl(f'output[{numProducers}] outProducers:{{=Message=}};')
      cog.outl(f'input[{numConsumers}] inConsumers:{{=Message=}};')
      cog.outl(f'output[{numConsumers}] outConsumers:{{=Message=}};') 
    ]]] */
    input[40] inProducers:{=Message=};
    output[40] outProducers:{=Message=};
    input[40] inConsumers:{=Message=};
    output[40] outConsumers:{=Message=};
    // [[[end]]]
    
    reaction(startup) {=
        
        // init local state
        availableProducers.reserve(numProducers);
        availableConsumers.reserve(numConsumers);
        pendingData.reserve(bufferSize);
        
    =}
    
    reaction(produce) -> outProducers {=
        
        while(pendingData.size() < adjustedBufferSize) {
            
            if(availableProducers.empty()) {
                return;
            }
            
            outProducers[availableProducers[0]].set(Message{ProduceDataMsg, 0.0});
            availableProducers.erase(begin(availableProducers));
        }
    =}
    
    reaction(consume) -> outConsumers, outProducers {=
        
        if(numTerminatedProducers == numProducers &&
            availableConsumers.size() == numConsumers) {
            return;
        }
        
        for(int i = 0; i < availableConsumers.size(); i++) {
            
            if(pendingData.empty()) {
                break;
            }
            
            outConsumers[availableConsumers[0]].set(pendingData[0]);
            availableConsumers.erase(begin(availableConsumers));
            pendingData.erase(begin(pendingData));
            if(!availableProducers.empty()) {
                outProducers[availableProducers[0]].set(Message{ProduceDataMsg, 0.0});
                availableProducers.erase(begin(availableProducers));
            }
        }
    =}
    
    reaction(inStart) -> produce {=
        
        // reset local state
        availableProducers.clear();
        availableConsumers.clear();
        pendingData.clear();
        numTerminatedProducers = 0;
        
        // start execution
        for(int i = 0; i < outProducers.size(); i++) {
            availableProducers.push_back(i);
        }
        for(int i = 0; i < outConsumers.size(); i++) {
            availableConsumers.push_back(i);
        }
        produce.schedule();
    =}
    
    reaction(inConsumers) -> consume {=
        
        for(int i = 0; i < inConsumers.size(); i++) {
            if(inConsumers[i].is_present()) {
                if(inConsumers[i].get()->type == ConsumerAvailableMsg) {
                    availableConsumers.push_back(i);
                }
            }
        }
        consume.schedule();
    =}
    
    reaction(inProducers) -> produce, consume, outFinished {=
        
        for(int i = 0; i < inProducers.size(); i++) {
            if(inProducers[i].is_present()) {
                if(inProducers[i].get()->type == DataItemMsg) {
                    
                    pendingData.push_back(inProducers[i].get());
                    availableProducers.push_back(i);
                    consume.schedule();
                    produce.schedule();
                    
                } else if(inProducers[i].get()->type == ProducerExitMsg) {
                    
                    numTerminatedProducers += 1;
                    
                    if(numTerminatedProducers == numProducers &&
                        availableConsumers.size() == numConsumers) {
                        outFinished.set();
                        return;
                    }
                }
            }
        }
    =}
}

reactor ProducerReactor(numItemsToProduce:int(1000), prodCost:int(25)) {
    
    public preamble {=
        #include "include/PseudoRandom.hh"
    =}
    
    private preamble {=
        #include <cmath>
    =}
    
    state prodItem:double(0.0);
    state itemsProduced:int(0);
    
    input inManager:{=Message=};
    output outManager:{=Message=};
    
    reaction(inManager) -> outManager {=
        
        if(inManager.get()->type == ProduceDataMsg) {
            if(itemsProduced == numItemsToProduce) {
                outManager.set(Message{ProducerExitMsg, 0.0});
                
                // reset local state
                prodItem = 0.0;
                itemsProduced = 0;
                return;
            }
            prodItem = processItem(prodItem, prodCost);
            outManager.set(Message{DataItemMsg, prodItem});
            itemsProduced += 1;
        }
    =}
    
    private preamble {=
        
        static double processItem(const double curTerm, const int cost) {
            
            double res = curTerm;
            
            PseudoRandom random(cost);
            if(cost > 0) {
                for(int i = 0; i < cost; i++) {
                    for(int j = 0; j < 100; j++) {
                        res += log(abs(random.nextDouble()) + 0.01);
                    }
                }
            } else {
                res += log(abs(random.nextDouble()) + 0.01);
            }
            
            return res;
        }
    =}
}

reactor ConsumerReactor(consCost:int(25)) {
    
    private preamble {=
        #include <cmath>
        #include "include/PseudoRandom.hh"
    =}
    
    state consItem:double(0.0);
    
    input inManager:{=Message=};
    output outManager:{=Message=};
    
    reaction(inManager) -> outManager {=
        
        if(inManager.get()->type == DataItemMsg) {
            double dataToConsume =  inManager.get()->data;
            consItem = processItem(consItem + dataToConsume, consCost);
            outManager.set(Message{ConsumerAvailableMsg, 0.0});
        } else if(inManager.get()->type == ConsumerExitMsg) {
            // reset local state
            consItem = 0.0;
        }
    =}
    
    private preamble {=
        
        static double processItem(const double curTerm, const int cost) {
            
            double res = curTerm;
            
            PseudoRandom random(cost);
            if(cost > 0) {
                for(int i = 0; i < cost; i++) {
                    for(int j = 0; j < 100; j++) {
                        res += log(abs(random.nextDouble()) + 0.01);
                    }
                }
            } else {
                res += log(abs(random.nextDouble()) + 0.01);
            }
            
            return res;
        }
    =}
}

main reactor ProdConsBenchmark(numIterations:int(12), bufferSize:int(50), prodCost:int(25), consCost:int(25), numItemsPerProducer:int(1000)) {
    
    /* [[[cog
      cog.outl(f'manager = new ManagerReactor(bufferSize=bufferSize, numProducers={numProducers}, numConsumers={numConsumers});')
    ]]] */
    manager = new ManagerReactor(bufferSize=bufferSize, numProducers=40, numConsumers=40);
    // [[[end]]]
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> manager.inStart;
    manager.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("ProdConsBenchmark");
        /* [[[cog
          cog.outl(f'printArgs("numIterations", numIterations, "bufferSize", bufferSize, "prodCost", prodCost, "consCost", consCost, "numItemsPerProducer", numItemsPerProducer, "numProducers", {numProducers}, "numConsumers", {numConsumers});')
        ]]] */
        printArgs("numIterations", numIterations, "bufferSize", bufferSize, "prodCost", prodCost, "consCost", consCost, "numItemsPerProducer", numItemsPerProducer, "numProducers", 40, "numConsumers", 40);
        /// [[[end]]]
        printSystemInfo();
        runner.inStart.set();
    =}
    
    /* [[[cog
      cog.outl(f'producers = new[{numProducers}] ProducerReactor(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);')
      cog.outl(f'consumers = new[{numConsumers}] ConsumerReactor(consCost=consCost);')
    ]]] */
    producers = new[40] ProducerReactor(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);
    consumers = new[40] ConsumerReactor(consCost=consCost);
    // [[[end]]]
    
    manager.outProducers -> producers.inManager;
    producers.outManager -> manager.inProducers;
    
    manager.outConsumers -> consumers.inManager;
    consumers.outManager -> manager.inConsumers;
    
}
