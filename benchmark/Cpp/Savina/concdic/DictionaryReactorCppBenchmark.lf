/**
 * Concurrency benchmark from the Savina benchmark suite. Intended
 * to measure reader-writer concurrency support.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * To break the causality loop the dictionary reactor contains a logical
 * action.
 * 
 * Informal results for 100,000 messages per worker (write percentage 10)
 * on my PC with fast forward enabled:
 * Unthreaded: 2500 ms
 * Threaded: 5400 ms
 * 
 * For comparison some informal results for 100,000 messages per worker
 * (write percentage 10, 20 workers)
 * on the same PC with the Savina Akka implementation:
 * Threaded: 1300 ms
 * 
 * @author Hannes Klein
 */

target Cpp {
    cmake-include: "DictionaryReactorCpp.cmake"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor Master(numWorkers:int(20)) {
    
    public preamble {=
        #include "DictionaryCommon.hh"
        #include "reactor-cpp/logging.hh"
    =}
    
    state numWorkersTerminated:int(0);
    
    input inStart:void;
    output outFinished:void;
    
    //TODO parametrize with numWorkers
    output[20] outWorkers:{=Message=};
    input[20] inWorkers:{=Message=};
    output outDictionary:void;
    
    reaction(inStart) -> outWorkers {=
        
        // reset local state
        numWorkersTerminated = 0;
        
        // start execution
        auto msg = reactor::make_immutable_value<Message>(Message{DoWorkMsg});
        for(int i = 0; i < outWorkers.size(); i++) {
            outWorkers[i].set(msg);
        }
    =}
    
    reaction(inWorkers) -> outFinished {=
        
        for(int i = 0; i < inWorkers.size(); i++) {
            numWorkersTerminated += 1;
        }
        if(numWorkersTerminated == numWorkers) {
            reactor::log::Debug() << numWorkersTerminated << " workers terminated.";
            outFinished.set();
        }
    =}
}

reactor Dictionary(numWorkers:int(20), initialState:{=std::map<int,int>=}({=std::map<int,int>()=})) {
    
    public preamble {=
        #include "DictionaryCommon.hh"
        #include "reactor-cpp/logging.hh"
        #include <bitset>
    =}
    
    state dataMap:{=std::map<int,int>=}(initialState);
    state answersToSend:{=std::vector<reactor::ImmutableValuePtr<Message>>=};
    
    logical action sendAnswers:void;
    
    //TODO parametrize with numWorkers
    output[20] outWorkers:{=Message=};
    input[20] inWorkers:{=Message=};
    input inMaster:void;
    
    reaction(startup) {=
        // first time init
        answersToSend =  std::vector<reactor::ImmutableValuePtr<Message>>(numWorkers);
    =}
    
    reaction(inMaster) {=
        
        // reset local state
        dataMap = initialState;
        answersToSend = std::vector<reactor::ImmutableValuePtr<Message>>(numWorkers);
    =}
    
    reaction(sendAnswers) -> outWorkers {=
        
        for(int i = 0; i < outWorkers.size(); i++) {
            if(answersToSend[i] != nullptr) {
                outWorkers[i].set(answersToSend[i]);
                answersToSend[i] = nullptr;
            }
        }
    =}
    
    reaction(inWorkers) -> sendAnswers {=
        
        //TODO The order of messages to read is relevant, it effectively
        // assigns priorities to the workers.
        for(int i = 0; i < inWorkers.size(); i++) {
            if(inWorkers[i].is_present()) {
                reactor::ImmutableValuePtr<Message> msg = inWorkers[i].get();
                
                if(msg->type == WriteMsg) {
                    
                    dataMap.emplace(msg->key, msg->value);
                    // Savina sends ResultMsg always independently if adding (key,value)
                    // to the map was successful.
                    answersToSend[i] = reactor::make_immutable_value<Message>(ResultMsg, -1, msg->value);
                    
                } else if(msg->type == ReadMsg) {
                    
                    int value = dataMap[msg->key];
                    // Savina does not handle what happens if the key is not present.
                    answersToSend[i] = reactor::make_immutable_value<Message>(ResultMsg, -1, value);
                }
            }
        }
        
        sendAnswers.schedule();
    =}
}

reactor Worker(instance:int(0), numMessagesPerWorker:int(10000), writePercentage:int(10)) {
    
    public preamble {=
        #include "DictionaryCommon.hh"
        #include <random>
    =}
    
    state messageCount:int(0);
    state id:int(instance);
    state random:{=std::minstd_rand=};
    
    input inMaster:{=Message=};
    output outMaster:{=Message=};
    
    input inDict:{=Message=};
    output outDict:{=Message=};
    
    reaction(inMaster) -> outDict {=
        
        if(inMaster.get()->type == DoWorkMsg) {
            //reset local state
            random.seed(id + numMessagesPerWorker + writePercentage);
            messageCount = 0;
            
            messageCount += 1; // as in original Savina implementation
            int anInt = static_cast<int>(random()) % 100;
            if(anInt < writePercentage) {
                outDict.set(Message{WriteMsg, static_cast<int>(random()), static_cast<int>(random())});
            } else {
                outDict.set(Message{ReadMsg, static_cast<int>(random())});
            }
        }
    =}
    
    reaction(inDict) -> outDict, outMaster {=
        
        messageCount += 1;
        
        if(messageCount <= numMessagesPerWorker) {
            int anInt = static_cast<int>(random()) % 100;
            if(anInt < writePercentage) {
                outDict.set(Message{WriteMsg, static_cast<int>(random()), static_cast<int>(random())});
            } else {
                outDict.set(Message{ReadMsg, static_cast<int>(random())});
            }
        } else {
            outMaster.set(Message{EndWorkMsg, -1, -1});
        }
    =}
}

main reactor DictionaryBenchmark(numIterations:int(12), numMessagesPerWorker:int(10000), writePercentage:int(10)) {
    
    master = new Master(numWorkers=20);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> master.inStart;
    master.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("DictionaryReactorLFCppBenchmark");
        printArgs("numIterations", numIterations, "numMessagesPerWorker", numMessagesPerWorker, "writePercentage", writePercentage);
        printSystemInfo();
        runner.inStart.set();
    =}
    
    dict = new Dictionary(numWorkers=20);
    workers = new[20] Worker(numMessagesPerWorker=numMessagesPerWorker, writePercentage=writePercentage);
    
    dict.outWorkers -> workers.inDict;
    workers.outDict -> dict.inWorkers;
    workers.outMaster -> master.inWorkers;
    master.outWorkers -> workers.inMaster;
    master.outDictionary -> dict.inMaster;
    
}
