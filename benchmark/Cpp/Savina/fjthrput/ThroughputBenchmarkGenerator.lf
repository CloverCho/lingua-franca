/**
 * Micro-benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * According to the Savina paper performance can be achieved by
 * batch processing messages in the worker actors.
 * This is not possible with reactors because scheduling and
 * advancing logical time occurs after each round of
 * message delivery.
 * 
 * @author Hannes Klein
 */


/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numWorkers=60
# 
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numWorkers' in globals():
    numWorkers = int(numWorkers)
  else:
    globals()['numWorkers'] = 60
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numWorkers = {numWorkers}')
]]] */
// Generated file with the following parameters:
// numWorkers = 240
// [[[end]]]

target Cpp {
    build-type : RelWithDebInfo
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


reactor ThroughputReactor(totalMessages:int(10000)) {
    
    private preamble {=
        #include <cmath>
    =}
    
    input inReset:void;
    input inMessage:void;
    output outFinished:void;
    
    state messagesProcessed:int(0);
    
    reaction(inReset) {=
        messagesProcessed = 0;
    =}
    
    reaction(inMessage) -> outFinished {=
        messagesProcessed += 1;
        performComputation(37.2);
        
        if(messagesProcessed == totalMessages) {
            outFinished.set();
        }
    =}
    
    private preamble {=
        
        void performComputation(const double theta) {
            const double sint = sin(theta);
            const double res = sint * sint;
            // defeat dead code elimination
            if(res <= 0) {
                throw "Benchmark exited with unrealistic res value.";
            }
        }
    =}
}

reactor ThroughputProducer(totalMessages:int(10000), numConsumer:int(60)) {
    
    state messagesSent:int(0);
    state nextConsumer:int(0);
    state numConsumerFinished:int(0);
    
    input inStart:void;
    output outFinished:void;
    
    /* [[[cog
      cog.outl(f'output[{numWorkers}] outMessage:void;')
      cog.outl(f'input[{numWorkers}] inFinished:void;')
      cog.outl(f'output[{numWorkers}] outReset:void;')
    ]]] */
    output[240] outMessage:void;
    input[240] inFinished:void;
    output[240] outReset:void;
    /// [[[end]]]
    
    logical action sendNextMessage;
    
    reaction(inStart) -> outReset, sendNextMessage {=
        
        // reset local state
        messagesSent = 0;
        nextConsumer = 0;
        numConsumerFinished = 0;
        for(int i = 0; i < outReset.size(); i++) {
            outReset[i].set();
        }
        
        // start execution
        sendNextMessage.schedule();
    =}
    
    reaction(sendNextMessage) -> outMessage, sendNextMessage {=
        
        if(messagesSent == totalMessages) return;
        
        for(int i = 0; i < outMessage.size(); i++) {
            outMessage[i].set();
        }
        messagesSent += 1;
        
        if(messagesSent < totalMessages) sendNextMessage.schedule();
    =}
    
    reaction(inFinished) -> outFinished {=
        
        for(int i = 0; i < inFinished.size(); i++) {
            if(inFinished[i].is_present()) {
                numConsumerFinished++;
            }
        }
        if(numConsumerFinished == numConsumer) {
            outFinished.set();
        }
    =}
}


main reactor ThroughputBenchmark(numIterations:int(12), numMessagesPerReactor:int(10000)) {
    
    /* [[[cog
      cog.outl(f'producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer={numWorkers});')
    ]]] */
    producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer=240);
    // [[[end]]]
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> producer.inStart;
    producer.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("ThroughputBenchmark");
        /* [[[cog
          cog.outl(f'printArgs("numIterations", numIterations, "numMessagesPerReactor", numMessagesPerReactor, "numWorkers", {numWorkers});')
        ]]] */
        printArgs("numIterations", numIterations, "numMessagesPerReactor", numMessagesPerReactor, "numWorkers", 240);
        // [[[end]]]
        printSystemInfo();
        runner.inStart.set();
    =}
    
    /* [[[cog
      cog.outl(f'worker = new[{numWorkers}] ThroughputReactor(totalMessages=numMessagesPerReactor);')
    ]]] */
    worker = new[240] ThroughputReactor(totalMessages=numMessagesPerReactor);
    // [[[end]]]
    
    producer.outMessage -> worker.inMessage;
    producer.outReset -> worker.inReset;
    worker.outFinished -> producer.inFinished;
    
}
