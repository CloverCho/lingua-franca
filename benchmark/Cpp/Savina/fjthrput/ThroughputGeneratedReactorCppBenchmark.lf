/**
 * Code generator for a variable number of reactors
 * using the python module cog.
 * See https://nedbatchelder.com/code/cog/
 * 
 * Run 'cog -r -D numWorkers=100 this-file.lf'
 * with the desired number of actors and the name of this file as arguments.
 * 
 * @author Hannes Klein
 */

target Cpp;

import BenchmarkRunner from "../BenchmarkRunner.lf";
import ThroughputReactor from "ThroughputReactorCppBenchmark.lf"

reactor ThroughputProducer(totalMessages:int(10000), numConsumer:int(60)) {
    
    state messagesSent:int(0);
    state nextConsumer:int(0);
    state numConsumerFinished:int(0);
    
    input inStart:void;
    output outFinished:void;
    
    /* [[[cog
      cog.outl("output["+numWorkers+"] outMessage:void;")
      cog.outl("input["+numWorkers+"] inFinished:void;")
      cog.outl("output["+numWorkers+"] outReset:void;")
    ]]] */
    output[100] outMessage:void;
    input[100] inFinished:void;
    output[100] outReset:void;
    /// [[[end]]]
    
    logical action sendNextMessage;
    
    reaction(inStart) -> outReset, sendNextMessage {=
        
        // reset local state
        messagesSent = 0;
        nextConsumer = 0;
        numConsumerFinished = 0;
        for(int i = 0; i < outReset.size(); i++) {
            outReset[i].set();
        }
        
        // start execution
        sendNextMessage.schedule();
    =}
    
    reaction(sendNextMessage) -> outMessage, sendNextMessage {=
        
        if(messagesSent == totalMessages) return;
        
        for(int i = 0; i < outMessage.size(); i++) {
            outMessage[i].set();
        }
        messagesSent += 1;
        
        if(messagesSent < totalMessages) sendNextMessage.schedule();
    =}
    
    reaction(inFinished) -> outFinished {=
        
        for(int i = 0; i < inFinished.size(); i++) {
            if(inFinished[i].is_present()) {
                numConsumerFinished++;
            }
        }
        if(numConsumerFinished == numConsumer) {
            outFinished.set();
        }
    =}
}


main reactor ThroughputBenchmark(numIterations:int(12), numMessagesPerReactor:int(10000)) {
    
    /* [[[cog
      cog.outl('producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer='+numWorkers+');')
    ]]] */
    producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer=100);
    // [[[end]]]
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> producer.inStart;
    producer.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("ThroughputReactorLFCppBenchmark");
        /* [[[cog
          cog.outl('printArgs("numIterations", numIterations, "numMessagesPerReactor", numMessagesPerReactor, "numWorkers", '+numWorkers+');')
        ]]] */
        printArgs("numIterations", numIterations, "numMessagesPerReactor", numMessagesPerReactor, "numWorkers", 100);
        // [[[end]]]
        printSystemInfo();
        runner.inStart.set();
    =}
    
    /* [[[cog
      cog.outl('worker = new['+numWorkers+'] ThroughputReactor(totalMessages=numMessagesPerReactor);')
    ]]] */
    worker = new[100] ThroughputReactor(totalMessages=numMessagesPerReactor);
    // [[[end]]]
    
    producer.outMessage -> worker.inMessage;
    producer.outReset -> worker.inReset;
    worker.outFinished -> producer.inFinished;
    
}
