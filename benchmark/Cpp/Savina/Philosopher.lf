target Cpp;

reactor Philosopher(id:unsigned(0), count:unsigned(10000), 
                    starvation_threshold:unsigned(1000), verbose:bool(false)) {
    input start:void;
    output finished:void;
    
    input eat:void;
    input denied:void;
    output hungry:void;
    output done:void;
    
    state times_eaten:unsigned;
    state times_denied:unsigned;
 
    logical action start_eating;
    
    reaction(start) -> start_eating {=
        if(verbose)
            std::cout << "Hello! I am philosopher " << id << " and I am very hungry!\n";
        times_eaten = 0;
        times_denied = 0;
        // start eating right away
        start_eating.schedule();   
    =}
    
    reaction(start_eating) -> hungry {=
        // signal that I am hungry
        hungry.set();
    =}
    
    reaction(eat) -> done, start_eating, finished {=
        // ... take left and right fork
        if(verbose)
            std::cout << "Philosopher " << id << " is eating.\n";
        times_eaten++;
        times_denied = 0;
        // ... put forks away
        done.set(); // signal that I am done eating
        if(verbose) 
            std::cout << "Philosopher " << id << " is thinking.\n";
        if (times_eaten < count) {
            // Actually, I feel hungry again...
            start_eating.schedule();
        } else {
            // Now I am really not hungry anymore!
            finished.set();
        } 
    =}
    
    reaction(denied) -> start_eating {=
        times_denied++;
        if (times_denied == starvation_threshold) {
            std::cout << "Philosopher " << id << " is starving!\n";
        }

        // Well, I will just try again...
        start_eating.schedule();
    =}
}