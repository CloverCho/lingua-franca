/*
 * Concurrency benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * @author Hannes Klein
 * @author Marten Lohstroh
 * @author Soroush Bateni
 * @author Shaokai Lin
 */
 
target C {
    flags: "-lm",
    //logging: DEBUG,
    keepalive: true,
    files: ../include/PseudoRandom.h,
    threads: 24
};

//import BenchmarkRunner from "../BenchmarkRunner.lf";

preamble {=
    #include <stdlib.h>
    #include <stddef.h>
    #include <math.h>
    #include "PseudoRandom.h"
    
    static double processItem(const double curTerm, const int cost) {
		double res = curTerm;
        struct PseudoRandom random;
        initPseudoRandom(&random, cost);
        if(cost > 0) {
        	for(int i = 0; i < cost; i++) {
            	for(int j = 0; j < 100; j++) {
                	res += log(abs(nextDouble(random)) + 0.01);
				}
			}
		} else {
			res += log(abs(nextDouble(random)) + 0.01);
		}
        return res;
	}
	
	void printBenchmarkInfo(char* benchmarkId) {
        printf("Benchmark: %s\n", benchmarkId);
    }
        
    void printSystemInfo() {
            
        printf("System information\n"); 
        printf("O/S Name: ");
            
        #ifdef _WIN32
        printf("Windows 32-bit");
        #elif _WIN64
        printf("Windows 64-bit");
        #elif __APPLE__ || __MACH__
        printf("Mac OSX");
        #elif __linux__
        printf("Linux");
        #elif __FreeBSD__
        printf("FreeBSD");
        #elif __unix || __unix__
        printf("Unix");
        #else
        printf("Other");
        #endif
            
        printf("\n");
    }
	
=}

reactor Producer(numItemsToProduce:int(1000), prodCost:int(25)) {
        
    state prodItem:double(0.0);
    state itemsProduced:int(0);
    
    logical action next; 
    output data:double;
    
    reaction(startup, next) -> next, data {=
        if (self->itemsProduced == self->numItemsToProduce) {
        	return;
        } else {
            schedule(next, 0);
            SET(data, processItem(self->prodItem, self->prodCost));
            self->itemsProduced += 1;
        }
    =}
}

reactor Consumer(numItemsToConsume:int(1000), consCost:int(25)) {
    
    state consItem:double(0.0);
    state itemsConsumed:int(0);
    input data:double;
    
    reaction(data) {=
        self->consItem = processItem(self->consItem + data->value, self->consCost);
        self->itemsConsumed += 1;
        if (self->itemsConsumed == self->numItemsToConsume) {
			request_stop();
        }
    =}
}

main reactor ProducerConsumerSync(bufferSize:int(50), prodCost:int(25), consCost:int(25), numItemsPerProducer:int(1000)) {
    
    reaction(startup) {=
        printBenchmarkInfo("ProdConsBenchmark");
        // printArgs("numIterations", self->numIterations, "bufferSize", self->bufferSize, "prodCost", self->prodCost, "consCost", self>consCost, "numItemsPerProducer", self->numItemsPerProducer, "numProducers", 40, "numConsumers", 40);
        printf("bufferSize: %d.\n", self->bufferSize);
        printf("prodCost: %d.\n", self->prodCost);
        printf("consCost: %d.\n", self->consCost);
        printf("numItemsPerProducer: %d.\n", self->numItemsPerProducer);
        printf("numProducers: %d.\n", 40);
        printf("numConsumers: %d.\n", 40);
		
        printSystemInfo();
    =}
    
    producers = new[40] Producer(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);
    consumers = new[40] Consumer(numItemsToConsume=numItemsPerProducer, consCost=consCost);
    
    producers.data -> consumers.data;
    
}
