/*
 * Concurrency benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * @author Hannes Klein
 * @author Marten Lohstroh
 * @author Soroush Bateni
 * @author Shaokai Lin
 */
 
target C {
    flags: "-lm",
    files: ../include/PseudoRandom.h,
    coordination: centralized,
    threads:24
};

preamble {=
    #include <stdlib.h>
    #include <stddef.h>
    #include <math.h>
    #include "PseudoRandom.h"
    
    typedef struct int_fifo_t {
        size_t head;
        size_t tail;
        size_t max_size;
        bool is_full;
        int* arr;
    } int_fifo_t;
    
    /**
     * Report whether the given queue is empty.
     */
    bool int_fifo_is_empty(int_fifo_t* queue) {
        if (queue->head == queue->tail && !queue->is_full) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Report how many elements are in the queue.
     */
    size_t int_fifo_size(int_fifo_t* queue) {
        if (int_fifo_is_empty(queue)) {
            return 0;
        } else if (queue->is_full) {
            return queue->max_size;
        } else if (queue->tail > queue->head) {
            return queue->tail - queue->head;
        } else {
            return queue->max_size - (queue->head - queue->tail);
        }
    }
        
    /**
     * Clear the given queue by resetting its head and tail pointer.
     */    
    void int_fifo_clear(int_fifo_t* queue) {
        queue->head = 0;
        queue->tail = 0;
        queue->is_full = false;
    }
    
    /**
     * Create a new bounded FIFO queue.
     */
    int_fifo_t* int_fifo_create(size_t capacity) {
        int_fifo_t* queue = malloc(sizeof(int_fifo_t));
        queue->arr = malloc(capacity * sizeof(int));
        queue->max_size = capacity;
        int_fifo_clear(queue);
        return queue;
    }
    
    /**
     * Assign the given pointer to the first element in the queue.
     * Return true if the assignment was successful, false otherwise.
     */
    bool int_fifo_pop(int_fifo_t* queue, int* data) {
        if (int_fifo_is_empty(queue)) {
            //printf("Buffer is empty.\n");
            return false;
        } else {
            *data = queue->arr[queue->head];
            //printf("Popping: %d\n", *data);
            queue->head = (queue->head + 1) % queue->max_size;
            queue->is_full = false;
        	return true;
        }
    }
    
    /**
     * Add a new entry to the queue.
     */
    bool int_fifo_push(int_fifo_t* queue, int elem) {
        if (queue->is_full) {
        	//printf("Buffer is full.\n");
			return false;        	
        } else {
            //printf("Pushing: %d\n", elem);
            queue->arr[queue->tail] = elem;
            queue->tail = (queue->tail + 1) % queue->max_size;
            if (queue->head == queue->tail) {
            	queue->is_full = true;
            }
        	return true;
        }
    }
    
	typedef struct double_fifo_t {
        size_t head;
        size_t tail;
        size_t max_size;
        bool is_full;
        double* arr;
    } double_fifo_t;
    
    /**
     * Report whether the given queue is empty.
     */
    bool double_fifo_is_empty(double_fifo_t* queue) {
        if (queue->head == queue->tail && !queue->is_full) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Report how many elements are in the queue.
     */
    size_t double_fifo_size(double_fifo_t* queue) {
        if (double_fifo_is_empty(queue)) {
            return 0;
        } else if (queue->is_full) {
            return queue->max_size;
        } else if (queue->tail > queue->head) {
            return queue->tail - queue->head;
        } else {
            return queue->max_size - (queue->head - queue->tail);
        }
    }
        
    /**
     * Clear the given queue by resetting its head and tail pointer.
     */    
    void double_fifo_clear(double_fifo_t* queue) {
        queue->head = 0;
        queue->tail = 0;
        queue->is_full = false;
    }
    
    /**
     * Create a new bounded FIFO queue.
     */
    double_fifo_t* double_fifo_create(size_t capacity) {
        double_fifo_t* queue = malloc(sizeof(double_fifo_t));
        queue->arr = malloc(capacity * sizeof(double));
        queue->max_size = capacity;
        double_fifo_clear(queue);
        return queue;
    }
    
    /**
     * Assign the given pointer to the first element in the queue.
     * Return true if the assignment was successful, false otherwise.
     */
    bool double_fifo_pop(double_fifo_t* queue, double* data) {
        if (double_fifo_is_empty(queue)) {
            //printf("Buffer is empty.\n");
            return false;
        } else {
            *data = queue->arr[queue->head];
            queue->head = (queue->head + 1) % queue->max_size;
            queue->is_full = false;
        	return true;
        }
    }
    
    /**
     * Add a new entry to the queue.
     */
    bool double_fifo_push(double_fifo_t* queue, int elem) {
        if (queue->is_full) {
        	//printf("Buffer is full.\n");
			return false;        	
        } else {
            queue->arr[queue->tail] = elem;
            queue->tail = (queue->tail + 1) % queue->max_size;
            if (queue->head == queue->tail) {
            	queue->is_full = true;
            }
        	return true;
        }
    }
    
    
    static double processItem(const double curTerm, const int cost) {
		double res = curTerm;
        struct PseudoRandom random;
        initPseudoRandom(&random, cost);
        if(cost > 0) {
        	for(int i = 0; i < cost; i++) {
            	for(int j = 0; j < 100; j++) {
                	res += log(abs(nextDouble(random)) + 0.01);
				}
			}
		} else {
			res += log(abs(nextDouble(random)) + 0.01);
		}
        return res;
	}
	
	void printBenchmarkInfo(char* benchmarkId) {
            printf("Benchmark: %s\n", benchmarkId);
        }
        
        void printSystemInfo() {
            
            printf("System information\n"); 
            printf("O/S Name: ");
            
            #ifdef _WIN32
            printf("Windows 32-bit");
            #elif _WIN64
            printf("Windows 64-bit");
            #elif __APPLE__ || __MACH__
            printf("Mac OSX");
            #elif __linux__
            printf("Linux");
            #elif __FreeBSD__
            printf("FreeBSD");
            #elif __unix || __unix__
            printf("Unix");
            #else
            printf("Other");
            #endif
            
            printf("\n");
        }
	
=}

reactor Manager(bufferSize:size_t(50), numProducers:size_t(40), numConsumers:size_t(40)) {
    
    state adjustedBufferSize:int(0);
    state availableProducers:int_fifo_t*;
    state availableConsumers:int_fifo_t*;
    state pendingData:double_fifo_t*;
    
    input[numProducers] producerData:double;
    output[numProducers] produceNext:bool;
    input[numConsumers] consumerReady:bool;
    output[numConsumers] consumerData:double;
    
    logical action requestData;
    logical action consumeMore;
    
    /**
     * Populate the "available" FIFO queues and schedule
     * the produce action.
     */
    reaction(startup) -> requestData {=
        //printf("Manager started up.\n");
        self->adjustedBufferSize = self->bufferSize - self->numProducers;
        self->availableProducers = int_fifo_create(self->numProducers);
        self->availableConsumers = int_fifo_create(self->numConsumers);
        self->pendingData = double_fifo_create(self->bufferSize);
        
        for (int i = 0; i < self->numConsumers; i++) {
			int_fifo_push(self->availableConsumers, i);
        }
        for (int i = 0; i < self->numProducers; i++) {
			int_fifo_push(self->availableProducers, i);
        }
        schedule(requestData, 0);
    =}

	/**
	 * Tell producers to start producing, provided that there is enough
	 * space in the pending data FIFO and the producers are not all done.
	 */
    reaction(requestData) -> produceNext {=
        //printf("Manager requesting more data.\n");
        
        while(double_fifo_size(self->pendingData) < self->adjustedBufferSize) {            
            if (int_fifo_is_empty(self->availableProducers)) {
                //printf("All producers are now busy.\n");
                break;
            }
            int idx;
            int_fifo_pop(self->availableProducers, &idx);
            //printf("Asking producer %d to start.\n", idx);
            SET(produceNext[idx], true);
        }
    =}
    
    /**
     * Respond to new data coming in.
     */
    reaction(producerData) {=
		// Stick all incoming data in a buffer.
		for (int i = 0; i < producerData_width; i++) {
            if (producerData[i]->is_present) {
                double_fifo_push(self->pendingData, producerData[i]->value);
				int_fifo_push(self->availableProducers, i);
            }
		}
    =}
    
    reaction(producerData, consumeMore) -> consumerData, requestData {=
        // Find a consumer for all pending data.
		int idx;
		double data;
		while (!double_fifo_is_empty(self->pendingData)) {
            if (int_fifo_pop(self->availableConsumers, &idx)) {
            	double_fifo_pop(self->pendingData, &data);
            	SET(consumerData[idx], data);  
            } else {
                break;
            }
        }
        // Ask the producers to produce more.
        schedule(requestData, 0);
    =}
    
    reaction(consumerReady) -> consumeMore {=
        for (int i = 0; i < consumerReady_width; i++) {
			if (consumerReady[i]->is_present) {
				//printf("Consumer %d is ready for more data.\n", i);
				int_fifo_push(self->availableConsumers, i);
			}
		}
    =}
}

reactor Producer(numItemsToProduce:int(1000), prodCost:int(25)) {
        
    state prodItem:double(0.0);
    state itemsProduced:int(0);
    
    input next:bool;
    output data:double;
    
    reaction(next) -> data {=
		if (self->itemsProduced < self->numItemsToProduce) {
            //printf("Producer creating data.\n");
            SET(data, processItem(self->prodItem, self->prodCost));
            self->itemsProduced += 1;
        }
    =}
}

reactor Consumer(numItemsToConsume:int(1000), consCost:int(25)) {
    
    state consItem:double(0.0);
    state itemsConsumed:int(0);
    input data:double;
    output ready:bool;
    
    reaction(data) -> ready {=
        //printf("One consumer got new data.\n");
        self->consItem = processItem(self->consItem + data->value, self->consCost);
        self->itemsConsumed += 1;
        SET(ready, true);    
    =}
}

reactor ProducerRelayer {
    input data_in:double;
    output data_out:double;
    state data:double;
    physical action relay;
    
    reaction(data_in) -> relay {=
        self->data = data_in->value;
        schedule(relay, 0);
    =}
    
    reaction(relay) -> data_out {=
        SET(data_out, self->data);
    =}
 }
 
 reactor ConsumerRelayer {
    input data_in:bool;
    output data_out:bool;
    state data:bool;
    physical action relay;
    
    reaction(data_in) -> relay {=
        self->data = data_in->value;
        schedule(relay, 0);
    =}
    
    reaction(relay) -> data_out {=
        //printf("<<>>");
        SET(data_out, self->data);
    =}
 }
 
main reactor ProdConsAsync(bufferSize:int(50), prodCost:int(25), consCost:int(25), numItemsPerProducer:int(1000)) {
    
    reaction(startup) {=
        printBenchmarkInfo("ProdConsBenchmark");
        // printArgs("numIterations", self->numIterations, "bufferSize", self->bufferSize, "prodCost", self->prodCost, "consCost", self>consCost, "numItemsPerProducer", self->numItemsPerProducer, "numProducers", 40, "numConsumers", 40);
        printf("bufferSize: %d.\n", self->bufferSize);
        printf("prodCost: %d.\n", self->prodCost);
        printf("consCost: %d.\n", self->consCost);
        printf("numItemsPerProducer: %d.\n", self->numItemsPerProducer);
        printf("numProducers: %d.\n", 40);
        printf("numConsumers: %d.\n", 40);
		
        printSystemInfo();
    =}
    manager = new Manager(bufferSize=bufferSize, numProducers=40, numConsumers=40);
    producers = new[40] Producer(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);
    consumers = new[40] Consumer(numItemsToConsume=numItemsPerProducer, consCost=consCost);
    prodRelayers = new[40] ProducerRelayer();
    consRelayers = new[40] ConsumerRelayer();
    
    // FIXME: We should use physical connections along the data path.
    // These are not supported yet. We could use banks of reactors that schedule a phys. action.
    
    manager.produceNext -> producers.next;
    manager.consumerData -> consumers.data;
    producers.data -> prodRelayers.data_in;
    prodRelayers.data_out -> manager.producerData; 
    consumers.ready -> consRelayers.data_in;
    consRelayers.data_out -> manager.consumerReady;
    
}
