
/**
 * Concurrency benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * @author Hannes Klein
 * @author Marten Lohstroh
 * @author Soroush Bateni
 */
 
target C;

import BenchmarkRunner from "../BenchmarkRunner.lf";

preamble {=
    #include <stdlib.h>
    #include <stddef.h>
    
    typedef enum MsgType {
      DataItemMsg,
      ProduceDataMsg,
      ProducerExitMsg,
      ConsumerAvailableMsg,
      ConsumerExitMsg
    } msg_type_t;
    
    typedef struct Message {
      msg_type_t type;
      double data;
    } message_t;
    
    typedef struct bounded_fifo_t {
        size_t head;
        size_t tail;
        int* arr;
        size_t max_size;
        bool is_full;
    } bounded_fifo_t;
    
    /**
     * Report whether the given queue is empty.
     */
    bool is_empty(bounded_fifo_t* queue) {
        if (queue->head == queue->tail && !queue->is_full) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Report how many elements are in the queue.
     */
    size_t size(bounded_fifo_t* queue) {
        if (is_empty(queue)) {
            return 0;
        } else if (queue->is_full) {
            return queue->max_size;
        } else if (queue->tail > queue->head) {
            return queue->tail - queue->head;
        } else {
            return queue->max_size - (queue->head - queue->tail);
        }
    }
        
    /**
     * Clear the given queue by resetting its head and tail pointer.
     */    
    void clear(bounded_fifo_t* queue) {
        queue->head = 0;
        queue->tail = 0;
        queue->is_full = false;
    }
    
    /**
     * Create a new bounded FIFO queue.
     */
    bounded_fifo_t* create_fifo(size_t capacity) {
        bounded_fifo_t* queue = malloc(sizeof(bounded_fifo_t));
        queue->arr = calloc(0, capacity * sizeof(int));
        queue->max_size = capacity;
        clear(queue);
        return queue;
    }
    
    /**
     * Assign the given pointer to the first element in the queue.
     * Return true if the assignment was successful, false otherwise.
     */
    bool pop(bounded_fifo_t* queue, int* data) {
        if (is_empty(queue)) {
            printf("Buffer is empty.\n");
            return false;
        } else {
            *data = queue->arr[queue->head];
            queue->head = (queue->head + 1) % queue->max_size;
            queue->is_full = false;
        	return true;
        }
    }
    
    /**
     * Add a new entry to the queue.
     */
    bool push(bounded_fifo_t* queue, int elem) {
        if (queue->is_full) {
        	printf("Buffer is full.\n");
			return false;        	
        } else {
            queue->arr[queue->tail] = elem;
            queue->tail = (queue->tail + 1) % queue->max_size;
            if (queue->head == queue->tail) {
            	queue->is_full = true;
            }
        	return true;
        }
    }
    
        #include <math.h>
        
        static double processItem(const double curTerm, const int cost) {
            
            double res = curTerm;
            
            srand(cost);
            if(cost > 0) {
                for(int i = 0; i < cost; i++) {
                    for(int j = 0; j < 100; j++) {
                        res += log(abs(rand()) + 0.01);
                    }
                }
            } else {
                res += log(abs(rand()) + 0.01);
            }
            
            return res;
        }
    
=}

reactor ManagerReactor(bufferSize:size_t(50), numProducers:size_t(40), numConsumers:size_t(40)) {
    
    state adjustedBufferSize:int({=self->bufferSize-self->numProducers=});
    state availableProducers:bounded_fifo_t*;
    state availableConsumers:bounded_fifo_t*;
    state pendingData:bounded_fifo_t*;
    state numTerminatedProducers:int(0);
    
    input inStart:bool;
    output outFinished:bool;
    
    logical action consume;
    logical action produce;
    
    input[numProducers] inProducers:message_t;
    output[numProducers] outProducers:message_t;
    input[numConsumers] inConsumers:message_t;
    output[numConsumers] outConsumers:message_t;
    
    reaction(startup) {=
        // init local state
        self->availableProducers = create_fifo(self->numProducers);
        self->availableConsumers = create_fifo(self->numConsumers);
        self->pendingData = create_fifo(self->bufferSize);
    =}
    
    reaction(produce) -> outProducers {=
        
        while(size(self->pendingData) < self->adjustedBufferSize) { // FIXME: Why?
            
            if(is_empty(self->availableProducers)) {
                return;
            }
            int idx;
            pop(self->availableProducers, &idx);
            message_t tmp = {ProduceDataMsg, 0.0};
            SET(outProducers[idx], tmp);
        }
    =}
    
    reaction(consume) -> outConsumers, outProducers {=
        
        if(self->numTerminatedProducers == self->numProducers &&
            size(self->availableConsumers) == self->numConsumers) {
            return;
        }
        
        for (int i = 0; i < size(self->availableConsumers); i++) {
            
            if (is_empty(self->pendingData)) {
                break;
            }
            message_t msg;
            pop(self->pendingData, &msg); // FIXME: wrong data tyoe
            int idx;
            pop(self->availableConsumers, &idx);
            SET(outConsumers[idx], msg);
            if (!is_empty(self->availableProducers) {
                int idx;
                pop(self->availableProducers, &idx);
                message_t msg = {ProduceDataMsg, 0.0};
                SET(outProducers[idx], msg);
            }
        }
    =}
    
    reaction(inStart) -> produce {=
        
        // reset local state
        clear(self->availableProducers);
        clear(self->availableConsumers);
        clear(self->pendingData);
        self->numTerminatedProducers = 0;
        
        // start execution
        for(int i = 0; i < self->numProducers; i++) {
            push(self->availableProducers, i);
        }
        for(int i = 0; i < self->numConsumers; i++) {
            push(self->availableConsumers, i);
        }
        schedule(produce, 0);
    =}
    
    reaction(inConsumers) -> consume {=
        for (int i = 0; i < inConsumers_width; i++) {
            if (inConsumers[i]->is_present) {
                if(inConsumers[i]->value.type == ConsumerAvailableMsg) {
                    push(self->availableConsumers, i);
                }
            }
        }
        schedule(consume, 0);
    =}
    
    reaction(inProducers) -> produce, consume, outFinished {=
        for(int i = 0; i < inProducers_width; i++) {
            if(inProducers[i]->is_present) {
                if (inProducers[i]->value.type == DataItemMsg) {
                    push(self->pendingData, inProducers[i]->value); // FIXME: Not the right data type
                    push(self->availableProducers, i);
                    schedule(consume, 0);
                    schedule(produce, 0);
                } else if(inProducers[i]->value.type == ProducerExitMsg) {
                    self->numTerminatedProducers += 1;
                    if(self->numTerminatedProducers == self->numProducers &&
                        size(self->availableConsumers) == self->numConsumers) {
                        SET(outFinished, true);
                        return;
                    }
                }
            }
        }
    =}
}

reactor ProducerReactor(numItemsToProduce:int(1000), prodCost:int(25)) {
        
    state prodItem:double(0.0);
    state itemsProduced:int(0);
    
    input inManager:message_t;
    output outManager:message_t;
    
    reaction(inManager) -> outManager {=
        
        if(inManager->value.type == ProduceDataMsg) {
            if(self->itemsProduced == self->numItemsToProduce) {
                message_t tmp = {ProducerExitMsg, 0.0};
                SET(outManager, tmp);
                
                // reset local state
                self->prodItem = 0.0;
                self->itemsProduced = 0;
                return;
            }
            message_t tmp = {DataItemMsg, processItem(self->prodItem, self->prodCost));
            SET(outManager, tmp);
            self->itemsProduced += 1;
        }
    =}
    
}

reactor ConsumerReactor(consCost:int(25)) {
    
    preamble {=
        //#include <cmath>
        //#include "PseudoRandom.hh"
    =}
    
    state consItem:double(0.0);
    
    input inManager:message_t;
    output outManager:message_t;
    
    reaction(inManager) -> outManager {=
        
        if(inManager->value.type == DataItemMsg) {
            double dataToConsume =  inManager->value.data;
            self->consItem = processItem(self->consItem + dataToConsume, self->consCost);
            message_t tmp = {ConsumerAvailableMsg, 0.0};
            SET(outManager, tmp);
        } else if(inManager->value.type == ConsumerExitMsg) {
            // reset local state
            self->consItem = 0.0;
        }
    =}
    
    }

//main reactor Test {
//	state q:bounded_fifo_t*;
//	reaction(startup) {=
//    	self->q = create_fifo(4);
//    	push(self->q, 1);
//		push(self->q, 2);
//		push(self->q, 3);
//		push(self->q, 4);
//		while(!is_empty(self->q)) {
//			int data;
//			if (pop(self->q, &data)) {
//            	printf("value: %d\n", data);
//				printf("size: %d\n", size(self->q));
//            }
//        }
//    =} 
//
//}
main reactor ProdConsBenchmark(numIterations:int(12), bufferSize:int(50), prodCost:int(25), consCost:int(25), numItemsPerProducer:int(1000)) {
    
    manager = new ManagerReactor(bufferSize=bufferSize, numProducers=40, numConsumers=40);
    
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.outIterationStart -> manager.inStart;
    manager.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("ProdConsBenchmark");
        // FIXME: what is printArgs?
        printArgs("numIterations", self->numIterations, "bufferSize", self->bufferSize, "prodCost", self->prodCost, "consCost", self>consCost, "numItemsPerProducer", self->numItemsPerProducer, "numProducers", 40, "numConsumers", 40);

        printSystemInfo();
        SET(runner.inStart, true);
    =}
    
    producers = new[40] ProducerReactor(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);
    consumers = new[40] ConsumerReactor(consCost=consCost);
    
    manager.outProducers -> producers.inManager;
    producers.outManager -> manager.inProducers;
    
    manager.outConsumers -> consumers.inManager;
    consumers.outManager -> manager.inConsumers;
    
}
