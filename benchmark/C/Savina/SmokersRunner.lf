/**
 * At startup, there is N smokers and one arbiter. The arbiter
 * randomly selects N-1 ingredients and indicate that the
 * smoker with the complementary ingredients can smoke by 
 * sending a `complementary_ingredient`	message the smoker.
 * Upon receiving the message, if the smoker holds the needed 
 * complementary ingredient, they can now smoke and sends a
 * `smoking` message to the arbiter after their smoke time.
 * When receiving the `smoking` message, the arbiter increment
 * their count of total cigarettes smoked. After R total 
 * cigarettes smoked, the arbiter finishes.
 */
target C {
    fast: true,
    threads: 4,
    tracing: true
};

import BenchmarkRunner from "BenchmarkRunner.lf";

reactor Arbiter(
    num_smokers:int(10),// N, number of smokers and ingredients
    num_success:int(20) // Number of successes before terminate
) {
    preamble {=
       // randomly selects N-1 ingredients and return the complementary ingredient
       int select_ingredients(int num_ingredients) {
            int complementary_ingredient = rand()%num_ingredients;
            return complementary_ingredient;
       }
    =}
   
    input[num_smokers] smoking:bool; // indicate that smoker i is currently smoking
    input start:bool;
    
    output[num_smokers] complementary_ingredient:int; // indicates that the smoker with the complementary ingredient can smoke
	output finish:bool;
	
    state success_count:int;
    state num_ingredients:int;

    logical action get_ingredients;
    
    reaction(start) -> get_ingredients {=
		self->num_ingredients = self->num_smokers;
		self->success_count = 0;
		schedule(get_ingredients,0);
    =}
    reaction(get_ingredients) -> finish, complementary_ingredient {=
        if (self->success_count >= self->num_success){
            SET(finish,true);
            //printf("%d cigarettes have been smoked. Arbiter is done.\n", self->success_count);
        }else {
            int ingredient = select_ingredients(self->num_ingredients);
            SET(complementary_ingredient[ingredient], ingredient);
            //printf("Arbiter: smoker with ingredient %d can now smoke.\n", ingredient);
        }
    =}
    reaction(smoking)-> get_ingredients,finish{=
        for(int i = 0; i<self->num_smokers;i++){
			if (smoking[i]->is_present && smoking[i]->value == true){
                //printf("Arbiter: smoker %d smoked their cigarette. Increment success count.\n", i);
                self->success_count++;
                if (self->success_count == self->num_success){
                    SET(finish,true);
                }
                schedule(get_ingredients,0);
            }
        }
    =}
    
 
}

reactor Smoker(ingredient_supply:int(0),smoke_time:time(1 sec)){
    input complementary_ingredient:int;
    logical action make_cigarette;
    state busy:bool;
    output smoking:bool;
    
    
    reaction(startup) {=
        self->ingredient_supply = self->bank_index;
        self->busy = false;
    =}
    reaction(complementary_ingredient) -> make_cigarette{=
        if(complementary_ingredient->value == self->ingredient_supply && self->busy == false){
			self->busy = true;
            schedule(make_cigarette,self->smoke_time);
            //printf("Smoker %d received their ingredients.\n", self->ingredient_supply);
        }
    =}
    reaction(make_cigarette)-> smoking{=
        SET(smoking,true);
        self->busy = false;
    =}
}
main reactor (
    num_smokers:int(10),// N, number of smokers and ingredients
    num_success:int(20), // Number of successes before terminate
    numIterations:int(12), 
    count:unsigned(1000000)
){  
	arbiter = new Arbiter(num_smokers = num_smokers, num_success=num_success);
	smokers = new[num_smokers] Smoker();
	runner = new BenchmarkRunner(numIterations=numIterations);
	
	runner.outIterationStart -> arbiter.start;
	arbiter.finish -> runner.inIterationFinish;
	
	reaction(startup) -> runner.inStart {=
        printf("SmokersBenchmark\n");
        printf("numIterations: %d, count: %d\n", self->numIterations, self->count);
        printSystemInfo(); 
        SET(runner.inStart, true);
    =}
	
	arbiter.complementary_ingredient -> smokers.complementary_ingredient;
	smokers.smoking -> arbiter.smoking;
}
