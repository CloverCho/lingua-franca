/**
 * Basic benchmark from the Savina benchmark suite that is
 * intended to measure message-passing overhead.
 * This version runs multiple independent Ping-Pong benchmarks simultaneously.
 * See [Benchmarks wiki page](https://github.com/icyphy/lingua-franca/wiki/Benchmarks).
 *
 * This is based on https://www.scala-lang.org/old/node/54
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * Ping introduces a microstep delay using a logical action
 * to break the causality loop.
 * 
 * This version instantiates multiple instances of Ping and Pong in a bank.
 * 
 * @author Edward A. Lee
 */
target C {
    fast: true,
    threads: 8
};
reactor Ping(count:int(1000000)) {
    input receive:int;
    output send:int;
    state pingsLeft:int(count);
    logical action serve;
    reaction (startup, serve) -> send {=
        SET(send, self->pingsLeft--);
    =}
    reaction (receive) -> serve {=
        if (self->pingsLeft > 0) {
            schedule(serve, 0);
        } else {
            stop();
        }
    =}
}
reactor Pong(expected:int(1000000)) {
    input receive:int;
    output send:int;
    state count:int(0);
    reaction(receive) -> send {=
        self->count++;
        SET(send, receive->value);   
    =}
    reaction(shutdown) {=
        if (self->count != self->expected) {
            fprintf(stderr, "Pong expected to receive %d inputs, but it received %d.\n",
                self->expected, self->count
            );
            exit(1);
        }
        printf("Success.\n");
    =}
}

main reactor PingPong {
    ping = new[2] Ping();
    pong = new[2] Pong();
    ping.send -> pong.receive;
    pong.send -> ping.receive; 
}