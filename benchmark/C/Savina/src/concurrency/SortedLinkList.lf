/**
 * Copyright (C) 2020 TU Dresden and UC Berkeley
 *
 * Upon startup, the LinkedList actor initializes a
 * linked list with random elements. Upon startup the
 * Worker actors would send either a `read` or `write`
 * request to the LinkedList, which responds by sending
 * a `response` signal. When Workers receive this signal,
 * if they've hit their target requests amount they will
 * send a `finish` message; otherwise, they will continue
 * to query the LinkList.
 *
 * @author Thee Ho
 * @author Matt Chorlian
 */

target C {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
    files: "../include/PseudoRandom.h"
};

preamble {=
    #include "PseudoRandom.h"

    typedef enum {
        WRITE,
        SIZE,
        CONTAINS
    } access_type;
    
    typedef struct message_t {
        access_type type;
        int value;
    } message_t;
=}

reactor Worker(
    bank_index:int(0),
    num_requests:int(10),
    write_percentage:int(10),
    size_percentage:int(1)
) {
    input response:int;
    
    state random: PseudoRandom;
    state requests_sent:int(0);
    
    output request:message_t;
    output finish:bool;
    
    reaction(startup) {=
        initPseudoRandom(
            &self->random,
            self->bank_index + self->num_requests + self->size_percentage
        );
    =}

    reaction(response, startup) -> request, finish {=
        if (self->requests_sent >= self->num_requests) {
            SET(finish, true);
        } else {
            int coin = nextInt(&self->random) % 100;
            int val = nextInt(&self->random) % 1000;
            message_t message;
            if (coin <= self->write_percentage) {
                message = (message_t) { .type=WRITE, .value=val };
            //   printf("Worker %d sent write request for %d \n", self->instance, val);
            } else {
                message = (message_t) { .type=CONTAINS, .value=val };
            //   printf("Worker %d sent read request for %d \n", self->instance, val);
            }
            SET(request, message);
            self->requests_sent++;
        }
    =}
}

reactor LinkedList(num_workers:int(20)) {
    preamble {=
        typedef struct listnode {
            int val;
            struct listnode *next;
        } linklist;

        void insert(linklist **head, int val) {
            linklist *node = NULL;
            node = (linklist *) malloc(sizeof(linklist));
            node->val = val;
            node->next = NULL;
            
            if (*head == NULL || (*head)->val > val) {
                node->next = *head;
                *head = node;
                return;
            }
            linklist *curr = *head;
            while (curr->next != NULL && curr->next->val <= val) {
                if (curr->next->val == val) {
                    return;
                }
                curr = curr->next;
            }
            linklist *temp = curr->next;
            curr->next = node;
            node->next = temp;
            return;
        }

        bool lookup(linklist *head, int val) {
            linklist *curr = head;
            while (curr != NULL) {
                if (curr->val == val) {
                    return true;
                }
                curr = curr->next;
            }
            return false;
        }

        void printlist(linklist *head) {
            linklist * current = head;

            while (current != NULL) {
                printf("%d ", current->val);
                current = current->next;
            }
            printf("\n");
        }
    =}
    
    input[num_workers] requests:message_t;
    
    state list:{=linklist*=};
    state responses_to_send:int[];

    logical action send_responses;
    
    output[num_workers] responses:int;
    
    reaction(startup) {=
        // initialize linked list with random elements
        self->responses_to_send = malloc(self->num_workers * sizeof(int));
        self->list = (linklist*) NULL;
        for (int i = 0; i < 10; i++) {
            insert(&(self->list), rand() % 1000);
        }
    =}

    reaction(send_responses) -> responses {=
        for (int i = 0; i < self->num_workers; i++) {
            SET(responses[i], self->responses_to_send[i]);
            LOG_PRINT("Reply to worker %d with %d", self->responses_to_send[i]);
        }
    =}

    reaction(requests) -> send_responses {=
        for (int i = 0; i < self->num_workers; i++) {
            switch (requests[i]->value.type) {
                case WRITE:
                    insert(&(self->list), requests[i]->value.value);
                //    printf("List content after insert: ");
                //    printlist(self->list);
                    self->responses_to_send[i] = requests[i]->value.value;
                    break;
                case SIZE:
                    break; // TODO: Implement
                case CONTAINS:
                    self->responses_to_send[i] = lookup(
                        self->list,
                        requests[i]->value.value
                    );
                    break;
            }
        }
        schedule(send_responses, 0);
    =}

    reaction (shutdown) {=
        free(self->responses_to_send);
    =}
}

/* [[[cog
      cog.outl(f'main reactor(numWorkers:int({numWorkers}),numMessagesPerWorker:int({numMessagesPerWorker}),writePercentage:int({writePercentage}), sizePercentage:int({sizePercentage}))')
    ]]] */
main reactor(numWorkers:int(20), numMessagesPerWorker:int(8000), writePercentage:int(10), sizePercentage:int(1))
    // [[[end]]]
{
    list = new LinkedList(num_workers=numWorkers);
    workers = new[numWorkers] Worker(
        num_requests=numMessagesPerWorker,
        write_percentage=writePercentage,
        size_percentage=sizePercentage
    );
    
    workers.request -> list.requests;
    list.responses -> workers.response;
}
