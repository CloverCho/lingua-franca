/**
 * This reactor sends a start signal, waits for finished input,
 * and measures the physical time elapsed between the two.
 * After it has sent 
 */
target C;

reactor Master(iterations:unsigned(12)) {    
    output start:bool;
    input finished:bool;
    logical action next;
    state count:unsigned(0); 
    state start_time:time;
    state measured_times:time[];
    
    reaction(startup) -> next {=
        self->measured_times = malloc(sizeof(interval_t) * self->iterations);
        schedule(next, 0LL);
    =}
    
    reaction(next) -> start {=
        self->start_time = get_physical_time();
        printf("Master sending start to Arbitrator.\n");
        SET(start, true);   
    =}
    
    reaction(finished) -> next {=
        instant_t end_time = get_physical_time();
        interval_t duration = end_time - self->start_time;
        self->measured_times[self->count] = duration;
        self->count++;
        
        interval_t duration_ms = duration / 1000000LL;
        printf("Iteration %d: %lld ms\n", self->count, duration_ms);

        if (self->count < self->iterations) { 
            schedule(next, 0LL);
        }
    =}
}