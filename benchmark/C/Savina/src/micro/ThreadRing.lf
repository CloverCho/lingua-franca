/**
 * Micro-benchmark from the Savina benchmark suite, intended
 * to measure message passing overhead and switching between
 * actors.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * To open the causality loop in the ring of reactors one
 * reactor uses a logical action for message passing.
 * 
 * @author Hannes Klein
 * @author Matthew Chorlian
 */

/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numReactors=100
# -D numPings = 100000
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numReactors' in globals():
    numReactors = int(numReactors)
  else:
    globals()['numReactors'] = 100
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numReactors = {numReactors}')
  cog.outl(f'// numPings = {numPings}')


]]] */
// Generated file with the following parameters:
// numReactors = 100
// numPings = 100000
// [[[end]]]

target C {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
};

preamble {=
    int ping;

    bool hasNext(int ping) {
        if (ping > 0) {
            return true;
        } else {
            return false;
        }
    }
    
    int getPingsLeft(int ping) {
        return ping;
    }
    
    int ping_next(int ping) {
        return ping - 1;
    }
=}

reactor ThreadRingReactor {
    
    
    output outNextReactor:int;
    input inPrevReactor:int;
    input start:int;
    output finished:bool;
    
    reaction(inPrevReactor) -> outNextReactor, finished {=
        if (hasNext(inPrevReactor->value)) {
            SET(outNextReactor, ping_next(inPrevReactor->value));
        } else {
            SET(finished, true);
            printf("Finished with count %d, ", getPingsLeft(inPrevReactor->value));
        }
    =}
    
    reaction(start) -> outNextReactor, finished {=
        if (hasNext(start->value)) {
            SET(outNextReactor, ping_next(start->value));
            printf("Starting with count %d", getPingsLeft(start->value));
        } else {
            SET(finished, true);
        }
    =}
}

reactor ThreadRingReactorLoopOpener {
    
    output outNextReactor:int;
    input inPrevReactor:int;
    input start:int;
    output finished:bool;
    
    logical action sendToNextReactor:int;
    
    // this is where the loop terminates as of right now
    reaction(sendToNextReactor) -> outNextReactor {=
        SET(outNextReactor, sendToNextReactor->value);
    =}
    
    reaction(inPrevReactor) -> sendToNextReactor, finished {=
        if (hasNext(inPrevReactor->value)) {
            sendToNextReactor->value = ping_next(inPrevReactor->value);
            schedule(sendToNextReactor, 0);
        } else {
            SET(finished, true);
            printf("Finished with count %d",  getPingsLeft(inPrevReactor->value));
        }
    =}
    
    reaction(start) -> sendToNextReactor, finished {=
        printf("Starting with count %d, ", getPingsLeft(start->value));
        if (hasNext(start->value)) {
            sendToNextReactor->value = ping_next(start->value);
            schedule(sendToNextReactor, 0);
        } else {
            SET(finished, true);
        }
    =}
}

reactor Initializer(numReactors:int(100), numPings:int(100000)) {
    
    input inStart:bool;
    output outFinished:bool;
    
    
    input[numReactors] inFinished:bool;
    output outStart:int;
    
    reaction(inStart) -> outStart {=
        SET(outStart, self->numPings);
    =}
    
    reaction(inFinished) -> outFinished {=
        SET(outFinished, true);
    =}
}

/*[[[cog
cog.outl(f'main reactor (numPings:int({numPings}), numReactors:int({numReactors}))')
]]] */
main reactor (numPings:int(100000), numReactors:int(100)) 

/// [[[end]]]

{
    
    init = new Initializer(numReactors=numReactors, numPings=numPings);    
    
    reaction(startup) -> init.inStart {=
        SET(init.inStart, true);
    =}
    
    
    loopOpener = new ThreadRingReactorLoopOpener();

    /* [[[cog
      for i in range(int(numReactors)-1):
        cog.outl(f'worker{i} = new ThreadRingReactor();')
    ]]] */
    worker0 = new ThreadRingReactor();
    worker1 = new ThreadRingReactor();
    worker2 = new ThreadRingReactor();
    worker3 = new ThreadRingReactor();
    worker4 = new ThreadRingReactor();
    worker5 = new ThreadRingReactor();
    worker6 = new ThreadRingReactor();
    worker7 = new ThreadRingReactor();
    worker8 = new ThreadRingReactor();
    worker9 = new ThreadRingReactor();
    worker10 = new ThreadRingReactor();
    worker11 = new ThreadRingReactor();
    worker12 = new ThreadRingReactor();
    worker13 = new ThreadRingReactor();
    worker14 = new ThreadRingReactor();
    worker15 = new ThreadRingReactor();
    worker16 = new ThreadRingReactor();
    worker17 = new ThreadRingReactor();
    worker18 = new ThreadRingReactor();
    worker19 = new ThreadRingReactor();
    worker20 = new ThreadRingReactor();
    worker21 = new ThreadRingReactor();
    worker22 = new ThreadRingReactor();
    worker23 = new ThreadRingReactor();
    worker24 = new ThreadRingReactor();
    worker25 = new ThreadRingReactor();
    worker26 = new ThreadRingReactor();
    worker27 = new ThreadRingReactor();
    worker28 = new ThreadRingReactor();
    worker29 = new ThreadRingReactor();
    worker30 = new ThreadRingReactor();
    worker31 = new ThreadRingReactor();
    worker32 = new ThreadRingReactor();
    worker33 = new ThreadRingReactor();
    worker34 = new ThreadRingReactor();
    worker35 = new ThreadRingReactor();
    worker36 = new ThreadRingReactor();
    worker37 = new ThreadRingReactor();
    worker38 = new ThreadRingReactor();
    worker39 = new ThreadRingReactor();
    worker40 = new ThreadRingReactor();
    worker41 = new ThreadRingReactor();
    worker42 = new ThreadRingReactor();
    worker43 = new ThreadRingReactor();
    worker44 = new ThreadRingReactor();
    worker45 = new ThreadRingReactor();
    worker46 = new ThreadRingReactor();
    worker47 = new ThreadRingReactor();
    worker48 = new ThreadRingReactor();
    worker49 = new ThreadRingReactor();
    worker50 = new ThreadRingReactor();
    worker51 = new ThreadRingReactor();
    worker52 = new ThreadRingReactor();
    worker53 = new ThreadRingReactor();
    worker54 = new ThreadRingReactor();
    worker55 = new ThreadRingReactor();
    worker56 = new ThreadRingReactor();
    worker57 = new ThreadRingReactor();
    worker58 = new ThreadRingReactor();
    worker59 = new ThreadRingReactor();
    worker60 = new ThreadRingReactor();
    worker61 = new ThreadRingReactor();
    worker62 = new ThreadRingReactor();
    worker63 = new ThreadRingReactor();
    worker64 = new ThreadRingReactor();
    worker65 = new ThreadRingReactor();
    worker66 = new ThreadRingReactor();
    worker67 = new ThreadRingReactor();
    worker68 = new ThreadRingReactor();
    worker69 = new ThreadRingReactor();
    worker70 = new ThreadRingReactor();
    worker71 = new ThreadRingReactor();
    worker72 = new ThreadRingReactor();
    worker73 = new ThreadRingReactor();
    worker74 = new ThreadRingReactor();
    worker75 = new ThreadRingReactor();
    worker76 = new ThreadRingReactor();
    worker77 = new ThreadRingReactor();
    worker78 = new ThreadRingReactor();
    worker79 = new ThreadRingReactor();
    worker80 = new ThreadRingReactor();
    worker81 = new ThreadRingReactor();
    worker82 = new ThreadRingReactor();
    worker83 = new ThreadRingReactor();
    worker84 = new ThreadRingReactor();
    worker85 = new ThreadRingReactor();
    worker86 = new ThreadRingReactor();
    worker87 = new ThreadRingReactor();
    worker88 = new ThreadRingReactor();
    worker89 = new ThreadRingReactor();
    worker90 = new ThreadRingReactor();
    worker91 = new ThreadRingReactor();
    worker92 = new ThreadRingReactor();
    worker93 = new ThreadRingReactor();
    worker94 = new ThreadRingReactor();
    worker95 = new ThreadRingReactor();
    worker96 = new ThreadRingReactor();
    worker97 = new ThreadRingReactor();
    worker98 = new ThreadRingReactor();
    // [[[end]]]
    
    /* [[[cog
      for i in range(numReactors-2):
        cog.outl(f'worker{i}.outNextReactor -> worker{i+1}.inPrevReactor;')
      cog.outl(f'worker{numReactors-2}.outNextReactor -> loopOpener.inPrevReactor;')
    ]]] */
    worker0.outNextReactor -> worker1.inPrevReactor;
    worker1.outNextReactor -> worker2.inPrevReactor;
    worker2.outNextReactor -> worker3.inPrevReactor;
    worker3.outNextReactor -> worker4.inPrevReactor;
    worker4.outNextReactor -> worker5.inPrevReactor;
    worker5.outNextReactor -> worker6.inPrevReactor;
    worker6.outNextReactor -> worker7.inPrevReactor;
    worker7.outNextReactor -> worker8.inPrevReactor;
    worker8.outNextReactor -> worker9.inPrevReactor;
    worker9.outNextReactor -> worker10.inPrevReactor;
    worker10.outNextReactor -> worker11.inPrevReactor;
    worker11.outNextReactor -> worker12.inPrevReactor;
    worker12.outNextReactor -> worker13.inPrevReactor;
    worker13.outNextReactor -> worker14.inPrevReactor;
    worker14.outNextReactor -> worker15.inPrevReactor;
    worker15.outNextReactor -> worker16.inPrevReactor;
    worker16.outNextReactor -> worker17.inPrevReactor;
    worker17.outNextReactor -> worker18.inPrevReactor;
    worker18.outNextReactor -> worker19.inPrevReactor;
    worker19.outNextReactor -> worker20.inPrevReactor;
    worker20.outNextReactor -> worker21.inPrevReactor;
    worker21.outNextReactor -> worker22.inPrevReactor;
    worker22.outNextReactor -> worker23.inPrevReactor;
    worker23.outNextReactor -> worker24.inPrevReactor;
    worker24.outNextReactor -> worker25.inPrevReactor;
    worker25.outNextReactor -> worker26.inPrevReactor;
    worker26.outNextReactor -> worker27.inPrevReactor;
    worker27.outNextReactor -> worker28.inPrevReactor;
    worker28.outNextReactor -> worker29.inPrevReactor;
    worker29.outNextReactor -> worker30.inPrevReactor;
    worker30.outNextReactor -> worker31.inPrevReactor;
    worker31.outNextReactor -> worker32.inPrevReactor;
    worker32.outNextReactor -> worker33.inPrevReactor;
    worker33.outNextReactor -> worker34.inPrevReactor;
    worker34.outNextReactor -> worker35.inPrevReactor;
    worker35.outNextReactor -> worker36.inPrevReactor;
    worker36.outNextReactor -> worker37.inPrevReactor;
    worker37.outNextReactor -> worker38.inPrevReactor;
    worker38.outNextReactor -> worker39.inPrevReactor;
    worker39.outNextReactor -> worker40.inPrevReactor;
    worker40.outNextReactor -> worker41.inPrevReactor;
    worker41.outNextReactor -> worker42.inPrevReactor;
    worker42.outNextReactor -> worker43.inPrevReactor;
    worker43.outNextReactor -> worker44.inPrevReactor;
    worker44.outNextReactor -> worker45.inPrevReactor;
    worker45.outNextReactor -> worker46.inPrevReactor;
    worker46.outNextReactor -> worker47.inPrevReactor;
    worker47.outNextReactor -> worker48.inPrevReactor;
    worker48.outNextReactor -> worker49.inPrevReactor;
    worker49.outNextReactor -> worker50.inPrevReactor;
    worker50.outNextReactor -> worker51.inPrevReactor;
    worker51.outNextReactor -> worker52.inPrevReactor;
    worker52.outNextReactor -> worker53.inPrevReactor;
    worker53.outNextReactor -> worker54.inPrevReactor;
    worker54.outNextReactor -> worker55.inPrevReactor;
    worker55.outNextReactor -> worker56.inPrevReactor;
    worker56.outNextReactor -> worker57.inPrevReactor;
    worker57.outNextReactor -> worker58.inPrevReactor;
    worker58.outNextReactor -> worker59.inPrevReactor;
    worker59.outNextReactor -> worker60.inPrevReactor;
    worker60.outNextReactor -> worker61.inPrevReactor;
    worker61.outNextReactor -> worker62.inPrevReactor;
    worker62.outNextReactor -> worker63.inPrevReactor;
    worker63.outNextReactor -> worker64.inPrevReactor;
    worker64.outNextReactor -> worker65.inPrevReactor;
    worker65.outNextReactor -> worker66.inPrevReactor;
    worker66.outNextReactor -> worker67.inPrevReactor;
    worker67.outNextReactor -> worker68.inPrevReactor;
    worker68.outNextReactor -> worker69.inPrevReactor;
    worker69.outNextReactor -> worker70.inPrevReactor;
    worker70.outNextReactor -> worker71.inPrevReactor;
    worker71.outNextReactor -> worker72.inPrevReactor;
    worker72.outNextReactor -> worker73.inPrevReactor;
    worker73.outNextReactor -> worker74.inPrevReactor;
    worker74.outNextReactor -> worker75.inPrevReactor;
    worker75.outNextReactor -> worker76.inPrevReactor;
    worker76.outNextReactor -> worker77.inPrevReactor;
    worker77.outNextReactor -> worker78.inPrevReactor;
    worker78.outNextReactor -> worker79.inPrevReactor;
    worker79.outNextReactor -> worker80.inPrevReactor;
    worker80.outNextReactor -> worker81.inPrevReactor;
    worker81.outNextReactor -> worker82.inPrevReactor;
    worker82.outNextReactor -> worker83.inPrevReactor;
    worker83.outNextReactor -> worker84.inPrevReactor;
    worker84.outNextReactor -> worker85.inPrevReactor;
    worker85.outNextReactor -> worker86.inPrevReactor;
    worker86.outNextReactor -> worker87.inPrevReactor;
    worker87.outNextReactor -> worker88.inPrevReactor;
    worker88.outNextReactor -> worker89.inPrevReactor;
    worker89.outNextReactor -> worker90.inPrevReactor;
    worker90.outNextReactor -> worker91.inPrevReactor;
    worker91.outNextReactor -> worker92.inPrevReactor;
    worker92.outNextReactor -> worker93.inPrevReactor;
    worker93.outNextReactor -> worker94.inPrevReactor;
    worker94.outNextReactor -> worker95.inPrevReactor;
    worker95.outNextReactor -> worker96.inPrevReactor;
    worker96.outNextReactor -> worker97.inPrevReactor;
    worker97.outNextReactor -> worker98.inPrevReactor;
    worker98.outNextReactor -> loopOpener.inPrevReactor;
    // [[[end]]]
    
    loopOpener.outNextReactor -> worker0.inPrevReactor;
    
    init.outStart -> loopOpener.start;
    
    /* [[[cog
      cog.outl(f'(loopOpener.finished,')
      for i in range(numReactors-1):
        cog.out(f'worker{i}.finished')
        if i < numReactors-2:
          cog.outl(',')
        else:
          cog.outl('')
      cog.outl(f') -> init.inFinished;')
    ]]] */
    (loopOpener.finished,
    worker0.finished,
    worker1.finished,
    worker2.finished,
    worker3.finished,
    worker4.finished,
    worker5.finished,
    worker6.finished,
    worker7.finished,
    worker8.finished,
    worker9.finished,
    worker10.finished,
    worker11.finished,
    worker12.finished,
    worker13.finished,
    worker14.finished,
    worker15.finished,
    worker16.finished,
    worker17.finished,
    worker18.finished,
    worker19.finished,
    worker20.finished,
    worker21.finished,
    worker22.finished,
    worker23.finished,
    worker24.finished,
    worker25.finished,
    worker26.finished,
    worker27.finished,
    worker28.finished,
    worker29.finished,
    worker30.finished,
    worker31.finished,
    worker32.finished,
    worker33.finished,
    worker34.finished,
    worker35.finished,
    worker36.finished,
    worker37.finished,
    worker38.finished,
    worker39.finished,
    worker40.finished,
    worker41.finished,
    worker42.finished,
    worker43.finished,
    worker44.finished,
    worker45.finished,
    worker46.finished,
    worker47.finished,
    worker48.finished,
    worker49.finished,
    worker50.finished,
    worker51.finished,
    worker52.finished,
    worker53.finished,
    worker54.finished,
    worker55.finished,
    worker56.finished,
    worker57.finished,
    worker58.finished,
    worker59.finished,
    worker60.finished,
    worker61.finished,
    worker62.finished,
    worker63.finished,
    worker64.finished,
    worker65.finished,
    worker66.finished,
    worker67.finished,
    worker68.finished,
    worker69.finished,
    worker70.finished,
    worker71.finished,
    worker72.finished,
    worker73.finished,
    worker74.finished,
    worker75.finished,
    worker76.finished,
    worker77.finished,
    worker78.finished,
    worker79.finished,
    worker80.finished,
    worker81.finished,
    worker82.finished,
    worker83.finished,
    worker84.finished,
    worker85.finished,
    worker86.finished,
    worker87.finished,
    worker88.finished,
    worker89.finished,
    worker90.finished,
    worker91.finished,
    worker92.finished,
    worker93.finished,
    worker94.finished,
    worker95.finished,
    worker96.finished,
    worker97.finished,
    worker98.finished
    ) -> init.inFinished;
    // [[[end]]]
    
}
