/*
 * generated by Xtext 2.17.0
 */
package org.icyphy.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.icyphy.linguaFranca.Model
import org.junit.Assert
import org.junit.Test
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.runner.RunWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.icyphy.linguaFranca.LinguaFrancaPackage
import org.eclipse.xtext.linking.impl.XtextLinkingDiagnostic

@RunWith(XtextRunner)
@ExtendWith(InjectionExtension)
@InjectWith(LinguaFrancaInjectorProvider)

/**
 * Test harness for ensuring that cross-references are 
 * established correctly and reported when faulty.
 */
class LinguaFrancaScopingTests {
    @Inject extension ParseHelper<Model>
    @Inject extension ValidationTestHelper
    
    /**
     * Ensure that invalid references to contained reactors are reported.
     */
    @Test
    def void unresolvedReactorReference() {
        val model = '''
            target C;
            reactor From {
                output y:int;
            }
            reactor To {
                input x:int;
            }
            
            main reactor WrongConnect {
                a = new From();
                d = new To();
                s.y -> d.x;
            }
        '''.parse
        
        Assert.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing.")
        model.assertError(LinguaFrancaPackage::eINSTANCE.varRef,
            XtextLinkingDiagnostic.LINKING_DIAGNOSTIC,
            "Couldn't resolve reference to Instantiation 's'")
        model.assertError(LinguaFrancaPackage::eINSTANCE.varRef,
            XtextLinkingDiagnostic.LINKING_DIAGNOSTIC,
            "Couldn't resolve reference to Variable 'y'")
    }
    
    
    /**
     * Ensure that invalid references to ports of contained reactors are reported.
     */
    @Test
    def void unresolvedHierarchicalPortReference() {
        val model = '''
            target C;
            reactor From {
                output y:int;
            }
            reactor To {
                input x:int;
            }
            
            main reactor WrongConnect {
                a = new From();
                d = new To();
                a.x -> d.y;
            }
        '''.parse

        Assert.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing.")
        model.assertError(LinguaFrancaPackage::eINSTANCE.varRef,
            XtextLinkingDiagnostic.LINKING_DIAGNOSTIC,
            "Couldn't resolve reference to Variable 'x'")
        model.assertError(LinguaFrancaPackage::eINSTANCE.varRef,
            XtextLinkingDiagnostic.LINKING_DIAGNOSTIC,
            "Couldn't resolve reference to Variable 'y'")
    }
    
}
