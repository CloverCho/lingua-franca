/*
 * generated by Xtext 2.17.0
 */
package org.icyphy.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.icyphy.linguaFranca.LinguaFrancaPackage
import org.icyphy.linguaFranca.Model
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.icyphy.linguaFranca.TimeUnit

@ExtendWith(InjectionExtension)
@InjectWith(LinguaFrancaInjectorProvider)
class LinguaFrancaValidationTest {
	@Inject extension ParseHelper<Model>
    @Inject extension ValidationTestHelper

    /**
     * Ensure that duplicate identifiers for actions reported.
     */
    @Test
    def void unresolvedReactorReference() {
        val model = '''
            target TypeScript;
            main reactor Foo {
                logical action bar;
                physical action bar;
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.action,
            null, // FIXME: Maybe report something descriptive here?
            'Names of contained objects (inputs, outputs, actions, timers, parameters, state, and reactors) must be unique: bar')
    }
    
    /**
     * Ensure that duplicate identifiers for actions reported.
     */
    @Test
    def void disallowCppMainCalledMain() {
        val model = '''
            target Cpp;
            main reactor Main {
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.reactor,
            null,
            "Main reactor cannot be named 'Main'")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of an input name.
     */
    @Test
    def void disallowUnderscoreInputs() {
        val model = '''
            target TypeScript;
            main reactor Foo {
                input __bar;
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.input,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __bar")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of an output name.
     */
    @Test
    def void disallowUnderscoreOutputs() {
        val model = '''
            target TypeScript;
            main reactor Foo {
                output __bar;
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.output,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __bar")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of an action name.
     */
    @Test
    def void disallowUnderscoreActions() {
        val model = '''
            target TypeScript;
            main reactor Foo {
                logical action __bar;
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.action,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __bar")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of a timer name.
     */
    @Test
    def void disallowUnderscoreTimers() {
        val model = '''
            target TypeScript;
            main reactor Foo {
                timer __bar(0);
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.timer,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __bar")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of a parameter name.
     */
    @Test
    def void disallowUnderscoreParameters() {
        val model = '''
            target TypeScript;
            main reactor Foo(__bar) {
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.parameter,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __bar")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of an state name.
     */
    @Test
    def void disallowUnderscoreStates() {
        val model = '''
            target TypeScript;
            main reactor Foo {
                state __bar;
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.state,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __bar")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of a reactor definition name.
     */
    @Test
    def void disallowUnderscoreReactorDef() {
        val model = '''
            target TypeScript;
            main reactor __Foo {
            }
        '''.parse

        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.reactor,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __Foo")
    }
    
    /**
     * Ensure that "__" is not allowed at the start of a reactor instantiation name.
     */
    @Test
    def void disallowUnderscoreReactorInstantiation() {
        val model = '''
            target TypeScript;
            reactor Foo {
            }
            main reactor Bar {
                __x = new Foo();
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.instantiation,
            null,
            "Names of objects (inputs, outputs, actions, timers, parameters, state, reactor definitions, and reactor instantiation) may not start with \"__\": __x")
    }
    
    /**
     * Disallow connection to port that is effect of reaction.
     */
    @Test
    def void connectionToEffectPort() {
        val model = '''
            target C;
            reactor Foo {
                output out:int;
            }
            main reactor Bar {
                output out:int;
                x = new Foo();
                x.out -> out;
                reaction(startup) -> out {=                    
                =}
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.connection,
            null,
            "Cannot connect: Port named 'out' is already effect of a reaction.")
    }
    
    /**
     * Disallow connection to port that is effect of reaction.
     */
    @Test
    def void connectionToEffectPort2() {
        val model = '''
            target C;
            reactor Foo {
                input inp:int;
                output out:int;
            }
            main reactor Bar {
                output out:int;
                x = new Foo();
                y = new Foo();
                
                y.out -> x.inp;
                reaction(startup) -> x.inp {=                    
                =}
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.connection,
            null,
            "Cannot connect: Port named 'inp' is already effect of a reaction.")
    }
    
        /**
     * Detect cycles in the instantiation graph.
     */
    @Test
    def void detectInstantiationCycle() {
        val model = '''
            target C;
            
            reactor Contained {
                x = new Contained();
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.instantiation,
            null, 'Instantiation is part of a cycle: Contained')
    }
    
    
    /**
     * Detect cycles in the instantiation graph.
     */
    @Test
    def void detectInstantiationCycle2() {
        val model = '''
            target C;
            reactor Intermediate {
                x = new Contained();
            }
            
            reactor Contained {
                x = new Intermediate();
            }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.instantiation,
            null, 'Instantiation is part of a cycle: Contained')
        model.assertError(LinguaFrancaPackage::eINSTANCE.instantiation,
            null, 'Instantiation is part of a cycle: Intermediate')
    }
    
    /**
     * Report non-zero time value without units.
     */
    @Test
    def void nonZeroTimeValueWithoutUnits() {
        val model = '''
            target C;
              main reactor HelloWorld {
                  timer t(42, 1 sec);
                  reaction(t) {=
                      printf("Hello World.\n");
                  =}
             }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.timeOrValue,
            null, "Missing time units. Should be one of " +
                                TimeUnit.VALUES.filter[it != TimeUnit.NONE])
    }    
    
    /**
     * Report reference to non-time parameter in time argument.
     */
    @Test
    def void parameterTypeMismatch() {
        val model = '''
            target C;
              main reactor HelloWorld(p:int(0)) {
                  timer t(p, 1 sec);
                  reaction(t) {=
                      printf("Hello World.\n");
                  =}
             }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.timeOrValue,
            null, 'Parameter is not of time type')
        
    }
    
    /**
     * Report inappropriate literal in time argument.
     */
    @Test
    def void targetCodeInTimeArgument() {
        val model = '''
            target C;
              main reactor HelloWorld {
                  timer t({=foo()=}, 1 sec);
                  reaction(t) {=
                      printf("Hello World.\n");
                  =}
             }
        '''.parse
        
        Assertions.assertNotNull(model)
        Assertions.assertTrue(model.eResource.errors.isEmpty,
            "Encountered unexpected error while parsing: " +
                model.eResource.errors)
        model.assertError(LinguaFrancaPackage::eINSTANCE.timeOrValue,
            null, 'Invalid time literal')
    }    
}
