dependencies {
	compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
}
configurations {
	mwe2 {
		extendsFrom compile
	}
}

dependencies {
	mwe2 'org.eclipse.emf:org.eclipse.emf.mwe2.launch'
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 'org.eclipse.xtext:xtext-antlr-generator'
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/org/icyphy/GenerateLinguaFranca.mwe2"
	inputs.file "src/org/icyphy/LinguaFranca.xtext"
	outputs.dir "src-gen"
	args += "src/org/icyphy/GenerateLinguaFranca.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]

task generateStandaloneCompiler() {
	apply plugin: 'java'
	apply plugin: 'application'
	apply plugin: 'com.github.johnrengelman.shadow'
	mainClassName = 'org.icyphy.generator.Main'
	shadowJar {
		minimize() {
			exclude(dependency('log4j:log4j:.*'))
			exclude(dependency('com.google.inject:guice:.*'))
		}
 		transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer){
 			resource = 'plugin.properties'
 		}
	}
}

generateStandaloneCompiler.finalizedBy shadowJar
