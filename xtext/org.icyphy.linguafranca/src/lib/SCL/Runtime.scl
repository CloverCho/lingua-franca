// Static:  Maintain topologically sorted array of reactors (size = #reactors) specifying topology (input/output connections)
// Dynamic: Maintain binary heap for priority queue of next firing times (max size = #triggers over all instances).
//          Priority = timestamp
// Dynamic: Maintain array of reactors (size = #reactors) with their states

// In OB1, repeatedly:
// 1. Pop the next event from the heap
// 2. Execute said event
// 3. Push new events onto the heap

TYPE Edge
STRUCT
    targets: ARRAY of DINT;
    count: DINT;
END_STRUCT
END_UDT

TYPE Graph
STRUCT
    edges: ARRAY OF Edge;
    num_vertices: DINT;
END_STRUCT
END_UDT

TYPE HeapSlot
STRUCT
    timestamp: DINT;  // DINT is 32-bit... need 64-bit?
    // microstep: DINT;
    id: INT;
END_STRUCT
END_UDT

TYPE RuntimeState
STRUCT
    graph: Graph;
    queue: ARRAY OF HeapSlot;  // TODO: How big of a buffer?
    nqueue: DINT;
    nactors: DINT;
    started: BOOL;
    now: DINT;
    root: SimpleTestSCL;  // TODO: The type of root should probably be called 'Main' to be uniform and avoid need for codegen here
END_STRUCT
END_UDT

FUNCTION heap_sift
    VAR_IN_OUT
        heap: ARRAY OF HeapSlot;
    END_VAR;
    VAR_INPUT
        r: INT;
        begin: INT;
        end: INT;
        min_heap: BOOL;
        down: BOOL;
    END_VAR;
    VAR_OUTPUT
        result: INT;
    END_VAR;
    VAR_TEMP
        i: INT;
        temp: HeapSlot;
    END_VAR;
    #i := #r;
    WHILE 1 DO
        IF #down THEN
            #b := (#i - #begin) * 2 + 1 + #begin;
            IF #b > #end THEN
                #b := #end;
            END_IF;
            #e := 2 + #b;
            IF #e > #end THEN
                #e := #end;
            END_IF;
            #j := #b;
            IF #min_heap THEN
                #k2 := #j;
            ELSE
                #k1 := #j;
            END_IF;
            #b := #b + 1;
            WHILE #b < #e DO
                IF #min_heap THEN
                    #k1 := #b;
                ELSE
                    #k2 := #b;
                END_IF;
                IF #heap[#k1] < #heap[#k2] THEN
                    #j := #b;
                END_IF;
                #b := #b + 1;
            END_WHILE;
        ELSE
            #j := #begin;
            IF #i <> #begin THEN
                #j := #j + (#i - #begin - 1) / 2;
            END_IF;
        END_IF;
        IF #j = #end THEN
            EXIT;
        END_IF;
        IF #down XOR #min_heap THEN
            #k1 := #i;
            #k2 := #j;
        ELSE
            #k1 := #j;
            #k2 := #i;
        END_IF;
        IF NOT (#heap[#k1] < #heap[#k2]) THEN
            EXIT;
        END_IF;
        #temp := #heap[#j];
        #heap[#j] := #heap[#i];
        #heap[#i] := #temp;
        IF #r = #i THEN
            #r := #j;
        END_IF;
        #i := #j;
    END_WHILE;
    #r := #i;
    #result := #r;
END_FUNCTION;

FUNCTION heap_push
    VAR_IN_OUT
        heap: ARRAY OF HeapSlot;
    END_VAR;
    VAR_INPUT
        begin: INT;
        end: INT;
        min_heap: BOOL;
    END_VAR;
    VAR_OUTPUT
        result: INT;
    END_VAR;
    VAR_TEMP
        i: INT := end - 1;
        a: INT;
        b: INT;
    END_VAR;
    #j := #begin;
    IF #i <> #begin THEN
        #j := #j + ((#i - #begin - 1) / 2);
    END_IF;
    IF #min_heap THEN
        #a := #j;
        #b := #i;
    ELSE
        #a := #i;
        #b := #j;
    END_IF;
    #result := #heap_sift(heap := #heap, i := #i, begin := #begin, end := #end, min_heap := #min_heap, down := #heap[#a] < #heap[#b]);
END_FUNCTION;
FUNCTION heap_pop
    VAR_IN_OUT
        heap: ARRAY OF HeapSlot;
    END_VAR;
    VAR_INPUT
        begin: INT;
        end: INT;
        min_heap: BOOL;
    END_VAR;
    VAR_OUTPUT
        result: INT;
    END_VAR;
    VAR_TEMP
        i := 0;
        temp: HeapSlot;
        a: INT;
        b: INT;
    END_VAR;
    #end := #end - 1;
    #temp := #heap[#i];
    #heap[#i] := #heap[#end];
    #heap[#end] := #temp;
    IF #min_heap THEN
        #a := #end;
        #b := #i;
    ELSE
        #a := #i;
        #b := #end;
    END_IF;
    #heap_sift(heap := #heap, i := #i, begin := #begin, end := #end, min_heap := #min_heap, down := #heap[#a] < #heap[#b]);
    #result := #end;
END_FUNCTION

// TODO: Need to also account for topological order, not just the firing time
// NOTE: This function ASSUMES there is room in the queue! Should it perhaps be _re_schedule instead, and remove the actor's old firing schedule?
FUNCTION schedule
	VAR_IN_OUT
		state: RuntimeState;
	END_VAR
	VAR_INPUT
		info: HeapSlot;
	END_VAR
	VAR_OUTPUT
		#i: DINT;
	END_VAR
	#state.queue[#state.nqueue] = #info;
	heap_push(heap := #state.queue, begin := 0, end := #state.nqueue, min_heap := 1, result := #i);
	#state.nqueue = #state.nqueue + 1;
END_FUNCTION

FUNCTION fire
	VAR_IN_OUT
		state: RuntimeState;
	END_VAR
	VAR_INPUT
		actor_id: DINT;
	END_VAR
	// TODO: How to map actor ID to actor object?
	// Should codegen generate a bunch of 'if' -> actor mappings?
	IF actor_id == 0 THEN
		// ...
	END_IF;
END_FUNCTION

DB:
    state: RuntimeState;

FUNCTION main
	VAR_TEMP
		info: HeapSlot;
	END_VAR
	VAR_IN_OUT
		state: RuntimeState;
	END_VAR
	VAR_TEMP
		#i: INT;
	END_VAR
    IF #state.started == 0 THEN
    	#state.started := 1;
    	#state.nqueue := 0;
    	#info.id := 0;  // TODO: what is the main actor ID?
    	#info.timestamp := 0;
    	schedule(state := #state, info := #info);
    END_IF;
    IF #state.nqueue > 0 THEN
	    heap_pop(heap := #state.queue, begin := 0, end := #state.nqueue, min_heap := 1, result := #i);
	    #state.nqueue = #state.nqueue - 1;
	    #state.now = #state.queue[#i].timestamp;
	    fire(state := #state, actor_id := #state.queue[#i].id);
    END_IF;
END_FUNCTION
