target C (
    run="bin/ReflexGame -keepalive"
);
// Produce a counting sequence at random times with a minimum
// and maximum time between outputs specified as parameters.
reactor RandomSource(min_time:time(2 sec), max_time:time(5 sec)) {
    preamble {=
        // Generate a random additional delay over the minimum. 
        // Assume millisecond precision is enough.
        interval_t additional_time(interval_t min_time, interval_t max_time) {
            int interval_in_msec = (max_time - min_time) / MSEC(1);
            return (rand() % interval_in_msec) * MSEC(1);
        }
    =}
    input another:int;
    output out:int;
    physical action prompt(min_time);
    state count:int(0);
    
    reaction(startup) -> prompt {=
        printf("***********************************************\n");
        printf("Watch for the prompt, then hit Return or Enter.\n");
        printf("Type Control-D (EOF) to quit.\n\n");
        
        // Random number functions are part of stdlib.h, which is included by reactor.h.
        // Set a seed for random number generation based on the current time.
        srand(time(0));
        
        // Schedule the next event.
        schedule(prompt, additional_time(self->min_time, self->max_time), NULL);
    =}
    reaction(prompt) -> out, prompt {=
        self->count++;
        printf("%d. Hit Return or Enter!", self->count);
        fflush(stdout);
        set(out, self->count);
    =}
    reaction(another) -> prompt {=
        // Schedule the next event.
        schedule(prompt, additional_time(self->min_time, self->max_time), NULL);
    =}
}
reactor GetUserInput {
    
    state prompt_time:time(0);
    state total_time_in_ms:int(0);
    state count:int(0);
    
    input prompt:int;
    output another:int;
    
//    reaction(prompt) {=
//        self->prompt_time = get_physical_time();
//    =}

    reaction(prompt) -> another {=
        int c;
        while((c = getchar()) != '\n') {
        	if (c == EOF) {
            	stop();
            	break;
            }
       }
       printf("End of GetUserInput at %lld\n", get_physical_time());
       set(another, 42);
    =}
    
    reaction(shutdown) {=
        printf("**** Average response time: %d.\n", self->total_time_in_ms/self->count);
    =}
}

reactor ReportPerformance {
	input press:int;
	
	reaction(press) {=
		printf("On time!\n");
		printf("Reaction time: %lld\n", get_physical_time() - get_logical_time());
        	
	=} deadline(100 msec) {=
		printf("Too late!\n");
	=}
	
}

main reactor ReflexGame {
    p = new RandomSource();
    g = new GetUserInput();
    r = new ReportPerformance();
    p.out -> g.prompt;
    g.another -> p.another;
    g.another -> r.press;
}
