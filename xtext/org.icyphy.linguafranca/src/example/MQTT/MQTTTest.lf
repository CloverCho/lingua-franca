/**
 * Test case for MQTT pub/sub.
 * 
 * Prerequisites:
 * 
 * To get this example to compile, you will need to install the Paho
 * MQTT client library, which requires that you first install
 * openSSL. To run the compiled code, you will need to have an
 * MQTT broker, such as mosquitto, running.
 * 
 * The Eclipse Paho library for MQTT clients can be obtained here:
 * https://github.com/eclipse/paho.mqtt.c.
 * 
 * This openSSL library (see https://www.openssl.org) is here:
 * https://github.com/openssl/openssl.git
 * 
 * Finally, you need an MQTT broker to be running. For example,
 * the Mosquitto Eclipse project provides one that can be downloaded
 * at https://mosquitto.org/download/.
 * Alternatively, on a Mac, you can use homebrew:
 * 
 *     brew install mosquitto
 * 
 * To start the broker and test it, you can do this:
 * 
 * 1. Start the broker in the background:
 *     > mosquitto &
 * 2. Start a command-line subscriber:
 *     > mosquitto_sub -v -t 'test/topic'
 * 3. In another terminal window, publish a message:
 *     > mosquitto_pub -t 'test/topic' -m 'Hello World'
 * 
 * @author Ravi Akella
 * @author Edward A. Lee
 */
target C {
    threads: 1, // Must use threaded implementation so schedule is thread safe.
    flags: "-I/usr/local/include -L/usr/local/lib -g -lpaho-mqtt3c",
    timeout: 5 secs
};

import MQTTPublisher.lf;
import MQTTSubscriber.lf;

/**
 * Reactor that generates a sequence of messages, one per second.
 * The message will be a string consisting of a root string followed
 * by a count.
 * @param root The root string.
 * @output message The message.
 */
reactor MessageGenerator(root:string("")) {
    // Output type char* instead of string is used for dynamically
    // allocated character arrays (as opposed to static constant strings).
    output message:char*;
    state count:int(1);
    timer t(0, 1 sec);
    reaction(t) -> message {=
        // With NULL, 0 arguments, snprintf tells us how many bytes are needed.
        // Add one for the null terminator.
        int length = snprintf(NULL, 0, "%s %d", self->root, self->count) + 1;
        // Dynamically allocate memory for the output.
        set_new_array(message, length);
        // Populate the output string and increment the count.
        snprintf(message, length, "%s %d", self->root, self->count++);
    =}
}

/**
 * Reactor that prints an incoming string.
 * @param prefix A prefix for the message.
 * @input message The message.
 */
reactor PrintMessage(prefix:string("")) {
    input message:char*;
    reaction(message) {=
        printf("%s%s\n", self->prefix, message);
    =}
}

main reactor MQTTTest {
    pub = new MQTTPublisher(topic = "my/test", address = "tcp://localhost:1883", clientID = "TestPublisher");
    msg = new MessageGenerator(root = "Hello World");
    msg.message->pub.in;
    
    sub = new MQTTSubscriber(address = "tcp://localhost:1883", clientID = "TestSubscriber2", topic = "my/test");
    dsp = new PrintMessage(prefix = "MQTTSubscriber received message: ");
    sub.message->dsp.message;
}