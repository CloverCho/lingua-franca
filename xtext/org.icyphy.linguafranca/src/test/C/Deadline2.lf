// This test checks that a deadline violation is detected and that the original
// input of the deadline violation is not triggered by default.
target C( 
    run = "bin/Deadline2 -timeout 2 sec"
);
reactor Source(period:time(1 sec)) {
    output y:int;
    timer t(0, period);
    state count:int(0);
    reaction(t) -> y {=
        (self->count)++;
        // Take time to cause a deadline violation.
        struct timespec sleep_time = {(time_t) 0, (long)200000000};
        struct timespec remaining_time;
        nanosleep(&sleep_time, &remaining_time);
        set(y, self->count);
    =}
}
reactor Destination {
    input x:int;
    input e:int;
    
    react(e) {=
        printf("**** Handle deadline miss.\n");
    =}
    react(x) {=
        printf("FAILURE: Deadline miss should have blocked delivery of x: %d.\n", x);
        exit(2);
    =}
}
main reactor Deadline2 {
    logical action panic:int;
    reaction(panic) -> d.e {=
        printf("**** Deadline miss detected.\n");
        // It would be nice if the panic action had the d.x data as a payload,
        // but I don't see how to implement that.
        set(d.e, 42);
    =}
    s = new Source();
    d = new Destination();
    s.y -> d.x;
    deadline(d.x, 100 msec, panic);
}