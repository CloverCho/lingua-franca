target C {
    federates: {
        RTI: {host: "localhost", port: 15044},
        Source: {reactors: [s]},
        Destination: {reactors: [d]}
    }
};
reactor Source {
    output out:string;
    reaction(startup) -> out {=
        set(out, "Hello World!");
    =}
}
reactor Destination {
    input in:string;
    reaction(in) {=
        // FIXME: Check that starting logical times are the same.
        printf("Destination received: %s\n", in);
    =}
}
main reactor HelloDistributed {
    s = new Source();      // Reactor 0 in federate 0
    d = new Destination(); // Reactor 0 in federate 1
    // Following action is added by the code generator.
    physical action a:string; // FIXME: not sure about malloc.
    // Code generator removes the following connection:
    // s.out -> d.in physical;  
    // Code generator adds the following two reactions:
    reaction(s.out) {=
        #define D_IN 0
        #define FED_DESTINATION 1
        send_physical(D_IN, FED_DESTINATION, strlen(s.out) + 1, (unsigned char*) s.out);
    =}
    reaction(a) -> d.in {=
        // NOTE: Docs say that malloc'd char* is freed on conclusion of the time step.
        // So passing it downstream should be OK.
        set(d.in, a_value);
    =}
}