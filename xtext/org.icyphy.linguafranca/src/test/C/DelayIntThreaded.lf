// This tests actions with values by delaying an input by a fixed amount.
target C(
    threads = 1 
);
reactor DelayInt(delay:time(100 msec)) {
    input in:int;
    output out:int;
    logical action d:int;
    reaction(in) -> d {=
        // Allocate memory for a copy of the input. Use lf_malloc(),
        // the Lingua Franca specialized version of malloc().
        int* value = lf_malloc(sizeof(int));
        *value = in;
        schedule(d, self->delay, value);
    =}
    
    reaction(d) -> out {=
        // This will pass the value, so the malloc can be freed.
        if (d_has_value) {
            set(out, d_value);
        }
    =}
}
reactor Test {
    input in:int;
    state start_time:time(0);
    state received_value:bool(false);
    reaction(startup) {=
        // Record the logical time at the start.
        self->start_time = get_logical_time();
    =}
    reaction(in) {=
        printf("Received: %d.\n", in);
        self->received_value = true;
        // Check the time of the input.
        instant_t current_time = get_logical_time();
        interval_t elapsed = current_time - self->start_time;
        printf("After %lld nsec of logical time.\n", elapsed);
        if (elapsed != 100000000LL) {
            printf("ERROR: Expected elapsed time to be 100000000. It was %lld.\n", elapsed);
            exit(1);
        }
        if (in != 42) {
            printf("ERROR: Expected input value to be 42. It was %d.\n", in);
            exit(2);            
        }
    =}
    reaction(shutdown) {=
        printf("Checking that communication occurred.\n");
        if (!self->received_value) {
            printf("ERROR: No communication occurred!\n");
            exit(3);            
        }
    =}
}
main reactor DelayIntThreaded {
    d = new DelayInt();
    t = new Test();
    d.out -> t.in;
    reaction(startup) -> d.in {=
        set(d.in, 42);
    =}
}