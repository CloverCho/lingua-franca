/**
 * Distributed LF program where a MessageGenerator creates a string
 * message that is sent via the RTI (runtime infrastructure) to a
 * receiver that prints the message. The type is char*, so this
 * tests the transport of token-encapsulated messages.
 * Three executable programs are generated, Distributed,
 * Distributed_Sender, and Distributed_Receiver.
 * The RTI is realized in the first of these and is identified
 * as a "launcher," so it launches the other two programs. 
 * 
 * @author Edward A. Lee
 */
target C {
    threads: 1, // Must use threaded implementation so schedule is thread safe.
    timeout: 5 secs,
    keepalive: true, // FIXME: This should be automatic with a physical action.
    federates: {
        RTI: {host: "localhost", port: 15044, launcher: true},
        Sender: {reactors: [msg]},
        Receiver: {reactors: [dsp]}
    }
};

/**
 * Reactor that generates a sequence of messages, one per second.
 * The message will be a string consisting of a root string followed
 * by a count.
 * @param root The root string.
 * @output message The message.
 */
reactor MessageGenerator(root:string("")) {
    // Output type char* instead of string is used for dynamically
    // allocated character arrays (as opposed to static constant strings).
    output message:char*;
    state count:int(1);
    // Send first message after 1 sec so that the startup reactions
    // do not factor into the transport time measurement on the first message.
    timer t(1 sec, 1 sec);
    reaction(t) -> message {=
        // With NULL, 0 arguments, snprintf tells us how many bytes are needed.
        // Add one for the null terminator.
        int length = snprintf(NULL, 0, "%s %d", self->root, self->count) + 1;
        // Dynamically allocate memory for the output.
        set_new_array(message, length);
        // Populate the output string and increment the count.
        snprintf(message, length, "%s %d", self->root, self->count++);
        printf("MessageGenerator: At time %lld, send message: %s\n",
            get_elapsed_logical_time(),
            message
        );
    =}
}

/**
 * Reactor that prints an incoming string.
 * @param prefix A prefix for the message.
 * @input message The message.
 */
reactor PrintMessage {
    input message:char*;
    state count:int(0);
    reaction(message) {=
        printf("PrintMessage: At (elapsed) logical time %lld, receiver receives: %s\n",
            get_elapsed_logical_time(),
            message
        );
        // Check the trailing number only of the message.
        self->count++;
        int trailing_number = atoi(&message[12]);
        if (trailing_number != self->count) {
            printf("ERROR: Expected message to be 'Hello World %d'.\n", self->count);
            exit(1);
        }
    =}
    reaction(shutdown) {=
        if (self->count == 0) {
            printf("ERROR: No messages received.\n");
            exit(2);
        }
    =}
}

main reactor Distributed {
    msg = new MessageGenerator(root = "Hello World");
    dsp = new PrintMessage();
    msg.message->dsp.message;
}