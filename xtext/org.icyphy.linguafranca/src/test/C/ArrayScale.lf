// Source produces a dynamically allocated array, which is passes
// to Scale. Scale requests a writable copy, which, instead of
// copying, it just gets ownership of the original array.
// It modifies it and passes it to Print. It gets freed after
// Print is done with it.
target C;
import ArrayPrint.lf;
reactor Scale(scale:int(2)) {
    preamble {=
        #include "../arrays.c"
    =}
    input in:int[];
    output out:int[];
    reaction(in) -> out {=
        int* modified = writable_copy(in);
        for(int i = 0; i < in_length; i++) {
            modified[i] = in[i] * self->scale;
        }
        set_array(out, modified, in_length);
    =}
}
main reactor ArrayScale {
    s = new Source();
    c = new Scale();
    p = new Print();
    s.out -> c.in;
    c.out -> p.in;
}