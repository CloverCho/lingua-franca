// This tests the use of the "polymorphic" delay reactor on a struct.
// It delays by a logical time any pointer datatype.
target C;
reactor DelayPointer(delay:time(100 msec)) {
    mutable input in:void*;
    output out:void*;
    logical action a:void*;
    reaction(in) -> a {=
        // mutable input guarantees *in will not be freed.
        schedule(a, self->delay, in);
    =}
    reaction(a) -> out {=
        // Using set_array delegates responsibility for
        // freeing the allocated memory downstream.
        // Note that the length has to be repeated here!
        if (a_has_value) {
            set_array(out, a_value, 3);
        }
    =}
}
reactor Source {
    output out:int[];
    reaction(startup) -> out {=
        // Dynamically allocate an output array of length 3.
        set_new_array(out, 3);
        
        // Above allocates the array, which then must be populated.
        out[0] = 0;
        out[1] = 1;
        out[2] = 2;
    =}
}
// The scale parameter is just for testing.
reactor Print(scale:int(1)) {
    input in:int[];
    reaction(in) {=
        int count = 0;       // For testing.
        bool failed = false; // For testing.
        printf("Received: [");
        for (int i = 0; i < in_length; i++) {
            if (i > 0) printf(", ");
            printf("%d", in[i]);
            // For testing, check whether values match expectation.
            if (in[i] != self->scale * count) {
                failed = true;
            }
            count++;         // For testing.
        }
        printf("]\n");
        if (failed) {
            printf("ERROR: Value received by Print does not match expectation!\n");
            exit(1);
        }
    =}
}
main reactor DelayArray {
    s = new Source();
    d = new DelayPointer();
    p = new Print();
    s.out -> d.in;
    d.out -> p.in;
}
