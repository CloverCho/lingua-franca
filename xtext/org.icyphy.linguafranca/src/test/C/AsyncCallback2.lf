// Test asynchronous callbacks that trigger a non-physical action.
// This test case assumes that target is multithreaded.
// This test will not work with the unthreaded C target because that target
// does not implement any mutex protecting the event queue.
target C {
    threads: 1,
    timeout: 2 sec
};
main reactor AsyncCallback2 {
    
    preamble {=
        #include <pthread.h>
                
        void callback(void* a) {
            // Schedule twice. If the action is not physical, these should
            // get consolidated into a single action triggering. If it is,
            // then they cause two separate triggerings with close but not
            // equal time stamps. To ensure they occur at the same logical time,
            // acquire the one global mutex.
            pthread_mutex_lock(&mutex);
            schedule(a, 0, NULL);
            schedule(a, 0, NULL);
            pthread_mutex_unlock(&mutex);
        }
        // Simulate time passing before a callback occurs.
        void* take_time(void* a) {
            struct timespec sleep_time = {(time_t) 0, (long)100000000};
            struct timespec remaining_time;
            nanosleep(&sleep_time, &remaining_time);
            callback(a);
            return NULL;
        }
        pthread_t threadId;
    =}
  
    timer t(0, 200 msec);
    state thread_id:pthread_t(0);
    state expected_time:time(0);
    logical action a;
    state i:int(0);
    reaction(t) -> a {=
        // start new thread, provide callback
        pthread_create(&self->thread_id, NULL, &take_time, a);
    =}
    
    reaction(a) {=
        instant_t elapsed_time = get_elapsed_logical_time();
        printf("Asynchronous callback %d: Assigned logical time greater than start time by %lld nsec.\n", self->i++, elapsed_time); 
        if (elapsed_time != self->expected_time) {
            printf("ERROR: Expected logical time to be %lld.\n", self->expected_time);
            exit(1);
        }
        self->expected_time += 200000000LL;
    =}
}

