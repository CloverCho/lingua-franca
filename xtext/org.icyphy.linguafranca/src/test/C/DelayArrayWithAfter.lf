// This tests transport of dynamically allocated arrays over
// connections with 'after'.
target C {
    timeout: 5 sec,
    fast: true
};
reactor Source {
    output out:int[];
    state iteration:int(1);
    timer t(0, 1 sec);
    reaction(t) -> out {=
        // Dynamically allocate an output array of length 3.
        set_new_array(out, 3);
        
        // Above allocates the array, which then must be populated.
        out[0] = 1 * self->iteration;
        out[1] = 2 * self->iteration;
        out[2] = 3 * self->iteration;
        self->iteration++;
    =}
}
// The scale parameter is just for testing.
reactor Print(scale:int(1)) {
    input in:int[];
    state iteration:int(1);
    reaction(in) {=
        int count = 1;       // For testing.
        bool failed = false; // For testing.
        printf("Received: [");
        for (int i = 0; i < in_length; i++) {
            if (i > 0) printf(", ");
            printf("%d", in[i]);
            // For testing, check whether values match expectation.
            if (in[i] != self->scale * count * self->iteration) {
                failed = true;
            }
            count++;         // For testing.
        }
        printf("]\n");
        if (failed) {
            printf("ERROR: Value received by Print does not match expectation!\n");
            exit(1);
        }
        if (count != 4) {
            printf("ERROR: Received array length is not 3!\n");
            exit(2);
        }
        self->iteration++;
    =}
}
main reactor DelayArray {
    s = new Source();
    p = new Print();
    s.out -> p.in after 1500 msec;
}
