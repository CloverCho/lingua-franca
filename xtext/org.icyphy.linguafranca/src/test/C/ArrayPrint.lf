target C;
// Source produces a dynamically allocated array, which is passes
// to Print. Reference counting ensures that the array is freed.
reactor Source {
    preamble{=
        // Included code below should be generated or in a library.
        // So we should not need this.
        #include "../arrays.c"
    =}
    output out:int[];
    reaction(startup) -> out {=
        // Dynamically allocate an output array of length 3.
        int* out_value = set_new_array(out, 3);
        
        // Above returns the array, which then must be populated.
        out_value[0] = 0;
        out_value[1] = 1;
        out_value[2] = 2;
    =}
}
reactor Print {
    input in:int[];
    reaction(in) {=
        printf("Received: [");
        for (int i = 0; i < in_length; i++) {
            if (i > 0) printf(", ");
            printf("%d", in[i]);
        }
        printf("]\n");
    =}
    // Generated reaction is triggered by any input, reads any input.
    // FIXME: Should be able to have empty trigger clause. Doesn't work!
    reaction(in) {=
        if (in_is_present) {
            __done_using(self->__in);
        }
    =}
}
main reactor ArrayPrint {
    s = new Source();
    p = new Print();
    s.out -> p.in;
}