// This tests actions with payloads by delaying an input by a fixed amount.
// This is a start at handling dynamic memory allocation for such actions.
target TypeScript;
reactor Delay(delay:time(100 msec)) {
    input x:number;
    output out:number;
    logical action a:number;
    reaction(x) -> a {=
        a.schedule( delay, x as number);
    =}
    reaction(a) -> out {=
        if (a !== null){
            out.set(a as number)
        }
    =}
}
reactor Test {
    input x:number;
    state start_time:time(0);
    state received_value:boolean(false);
    reaction(startup) {=
        // Record the logical time at the start.
        start_time = util.time.getCurrentLogicalTime();
    =} 
    reaction(x) {=
        console.log("Received: " + x);
        received_value = true;
        // Check the time of the input.
        let current_time = util.time.getCurrentLogicalTime();
        let elapsed = current_time.subtract(start_time); 
        console.log("After " + elapsed + " of logical time.");
        if ( ! elapsed.isEqualTo(new UnitBasedTimeValue( 100, TimeUnit.msec))) {
            console.log("ERROR: Expected elapsed time to be [0, 100000000]. It was " + elapsed);
            util.exec.failure();
            //throw new Error( "ERROR: Expected elapsed time to be [0, 100000000]. It was " + elapsed);
        }
        if ( x != 42) {
            console.log("ERROR: Expected input value to be 42. It was " + x);
            util.exec.failure();
            //throw new Error("ERROR: Expected input value to be 42. It was " + (this.state as any).x);            
        }
    =}
    reaction(shutdown) {=
        console.log("Checking that communication occurred.");
        if (! received_value) {
            console.log("ERROR: No communication occurred!");
            util.exec.failure();
            //throw new Error("ERROR: No communication occurred!");          
        }
    =}
}

main reactor DelayInt { 
    d = new Delay();
    t = new Test();
    d.out -> t.x; 
    reaction(startup) -> d.x {=
        d.x.set(42);
    =}
}