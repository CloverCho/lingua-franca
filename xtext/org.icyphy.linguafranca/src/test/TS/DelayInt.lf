// This tests actions with payloads by delaying an input by a fixed amount.
// This is a start at handling dynamic memory allocation for such actions.
target TypeScript;
reactor Delay(delay:time(100 msec)) {
    input in:number;
    output out:number;
    logical action a:number;
    reaction(in) -> a {=
        let delay = (this.state as any).delay;
        (this.state as any).a.schedule( delay, (this.state as any).in.get());
    =}
    reaction(a) -> out {=
        if ( (this.state as any).a.isPresent()){
            (this.state as any).out.set( (this.state as any).a.get() )
        }
    =}
}
reactor Test {
    input in:number;
    state start_time:time(0);
    state received_value:boolean(false);
    reaction(startup) {=
        // Record the logical time at the start.
        (this.state as any).start_time = this._getCurrentLogicalTime()[0];
    =} 
    reaction(in) {=
        console.log("Received: " + (this.state as any).in.get());
        (this.state as any).received_value = true;
        // Check the time of the input.
        let current_time = this._getCurrentLogicalTime();
        let elapsed = numericTimeDifference(current_time[0], (this.state as any).start_time); 
        console.log("After " + elapsed + " of logical time.");
        if ( ! numericTimeEquals(elapsed, [0, 100000000] ) ) {
            console.log("ERROR: Expected elapsed time to be [0, 100000000]. It was " + elapsed);
            throw new Error( "ERROR: Expected elapsed time to be [0, 100000000]. It was " + elapsed);
        }
        if ( (this.state as any).in.get() != 42) {
            console.log("ERROR: Expected input value to be 42. It was " + (this.state as any).in.get());
            throw new Error("ERROR: Expected input value to be 42. It was " + (this.state as any).in.get());            
        }
    =}
    reaction(shutdown) {=
        console.log("Checking that communication occurred.");
        if ( ! (this.state as any).received_value) {
            console.log("ERROR: No communication occurred!");
            throw new Error("ERROR: No communication occurred!");          
        }
    =}
}

main reactor DelayInt { 
    d = new Delay();
    t = new Test();
    d.out -> t.in; 
    reaction(startup) -> d.in {=
        (this.state as any).d.in.set(42);
    =}
}