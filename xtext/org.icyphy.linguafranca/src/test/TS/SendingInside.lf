// This tests a reactor that contains another reactor and also
// has its own reaction that routes inputs to the contained reactor.

// FIXME: Find a way to terminate with failure and address target attrbitus

target TypeScript;
//(
//	run = "bin/SendingInside -fast -timeout 10 sec"
//);
reactor Printer {
	input x:number;
	state count:number(1);
	reaction(x) {=
		console.log("Inside reactor received: "
		  + (this.state as any).x.get());
		if ((this.state as any).x.get() != (this.state as any).count) {
			console.log("FAILURE: Expected " + (this.state as any).count);
			throw new Error("FAILURE: Expected " + (this.state as any).count);
		}
		(this.state as any).count++;
	=}
}
main reactor SendingInside {
	state count:number(0);
	timer t(0, 1 sec);
	p = new Printer();
	reaction(t) -> p.x {=
		(this.state as any).count++;
		(this.state as any).p.x.set( (this.state as any).count);
	=}
}