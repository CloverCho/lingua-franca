// Test a deadline where the deadline violation produces
// an output and the container reacts to that output.
target TypeScript{
    timeout : 2 sec
};
reactor Deadline(threshold:time(100 msec)) {
    input x:number;
    output deadline_violation:boolean;
    reaction(x) -> deadline_violation {=
        console.log("ERROR: Deadline violation was not detected!");
        util.failure()
        //throw new Error("ERROR: Deadline violation was not detected!");
    =} deadline(threshold) {=
        console.log("Deadline violation detected.");
        deadline_violation = true;
    =}
}
main reactor DeadlineHandledAbove {
    state violation_detected:boolean(false);
    d = new Deadline(threshold = 10 msec);
    reaction(startup) -> d.x {=
        // Busy wait 20 msec to cause a deadline violation.
        let initialElapsedTime = util.getElapsedPhysicalTime();
        while ( util.getElapsedPhysicalTime().isSmallerThan(initialElapsedTime.add( new UnitBasedTimeValue(20, TimeUnit.msec))));
        d.x = 42;
    =}
    reaction(d.deadline_violation) {=
        if (d.deadline_violation) {
            console.log("Output successfully produced by deadline miss handler.");
            violation_detected = true;
        }
    =}
    reaction(shutdown) {=
        if ( violation_detected) {
            console.log("SUCCESS. Test passes.");
        } else {
            console.log("FAILURE. Container did not react to deadline violation.");
           util.failure()
            //throw new Error("FAILURE. Container did not react to deadline violation.");
        }
    =}
}