"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Microsteps = exports.Destination = void 0;

var _reactor = require("./reactor");

var _time = require("./time");

var _util = require("./util");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_util.Log.setGlobalLevel(_util.Log.levels.ERROR); // Code generated by the Lingua Franca compiler for reactor Destination in /Users/matt.weber/git/lingua-franca/xtext/org.icyphy.linguafranca/src/test/TS/Microsteps.lf
// =============== START reactor class Destination


class Destination extends _reactor.Reactor {
  constructor(parent) {
    super(parent);

    _defineProperty(this, "x", void 0);

    _defineProperty(this, "y", void 0);

    this.x = new _reactor.InPort(this);
    this.y = new _reactor.InPort(this);
    this.addReaction(new _reactor.Triggers(this.x, this.y), new _reactor.Args(this.y, this.x), function (__y, __x) {
      // =============== START react prologue
      let y = __y.get();

      let x = __x.get(); // =============== END react prologue


      try {
        let elapsed = this.util.time.getElapsedLogicalTime();
        console.log("Time since start: " + elapsed);

        if (!elapsed.isEqualTo(new _time.UnitBasedTimeValue(0, _time.TimeUnit.sec))) {
          console.log("Expected elapsed time to be 0, but it was " + elapsed);
          this.util.exec.failure();
        }

        let count = 0;

        if (x) {
          console.log("x is present.");
          count++;
        }

        if (y) {
          console.log("y is present.");
          count++;
        }

        if (count != 1) {
          console.log("Expected exactly one input to be present but got " + count);
          this.util.exec.failure();
        }
      } finally {// =============== START react epilogue
        // =============== END react epilogue
      }
    });
  }

} // =============== END reactor class Destination
// Code generated by the Lingua Franca compiler for reactor Microsteps in /Users/matt.weber/git/lingua-franca/xtext/org.icyphy.linguafranca/src/test/TS/Microsteps.lf
// =============== START reactor class Microsteps


exports.Destination = Destination;

class Microsteps extends _reactor.App {
  constructor(name, timeout = undefined, keepAlive = false, fast = false, success, fail) {
    super(timeout, keepAlive, fast, success, fail);

    _defineProperty(this, "d", void 0);

    _defineProperty(this, "start", void 0);

    _defineProperty(this, "repeat", void 0);

    this.d = new Destination(this);
    this.start = new _reactor.Timer(this, 0, 0);
    this.repeat = new _reactor.Action(this, _time.Origin.logical);
    this.addReaction(new _reactor.Triggers(this.start), new _reactor.Args(this.start, this.getSchedulable(this.repeat), {
      x: this.getWritable(this.d.x)
    }), function (__start, repeat, __d) {
      // =============== START react prologue
      let start = __start.get();

      let d = {
        x: __d.x
      }; // =============== END react prologue

      try {
        d.x.set(1);
        repeat.schedule(0);
      } finally {// =============== START react epilogue
        // =============== END react epilogue
      }
    });
    this.addReaction(new _reactor.Triggers(this.repeat), new _reactor.Args(this.repeat, {
      y: this.getWritable(this.d.y)
    }), function (__repeat, __d) {
      // =============== START react prologue
      let repeat = __repeat.get();

      let d = {
        y: __d.y
      }; // =============== END react prologue

      try {
        d.y.set(1);
      } finally {// =============== START react epilogue
        // =============== END react epilogue
      }
    });
  }

} // =============== END reactor class Microsteps
// ************* Instance Microsteps of class Microsteps


exports.Microsteps = Microsteps;

let _app = new Microsteps('Microsteps', undefined, false, false); // ************* Starting Runtime for Microsteps of class Microsteps


_app._start();