// Test logical action with delay.
target TypeScript;

reactor GeneratedDelay {
    input y_in:number;
    output y_out:number;
    state y_state:number(0);
    logical action act(100 msec);

    reaction(y_in) -> act {=
        self.y_state = self.y_in.get() as number;
        act.schedule(0);
    =}

    reaction(act) -> y_out {=
        y_out.set(self.y_state);
    =}
}

reactor Source {
    output out:number;
    reaction(startup) -> out {=
        out.set(1);
    =} 
}
reactor Sink {
    input in:number;
    reaction(in) {=
        var elapsed_logical = self.util.getElapsedLogicalTime();
        var logical = self.util.getCurrentLogicalTime();
        var physical = self.util.getCurrentPhysicalTime();
        console.log("Logical, physical, and elapsed logical: " + logical + physical + elapsed_logical); 
        var oneHundredMsec = new UnitBasedTimeInterval(100, TimeUnit.msec);
        if (elapsed_logical.isEqualTo(oneHundredMsec)) {
            console.log("FAILURE: Expected " + oneHundredMsec + " but got " + elapsed_logical);
            self.util.failure();
        } else {
            console.log("SUCCESS. Elapsed logical time is " + elapsed_logical);
        }
    =}
}
main reactor ActionDelay {
    source = new Source();
    sink = new Sink();
    g = new GeneratedDelay();
    
    source.out -> g.y_in;
    g.y_out -> sink.in;
}