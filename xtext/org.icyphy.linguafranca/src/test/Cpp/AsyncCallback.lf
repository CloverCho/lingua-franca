// Test asynchronous callbacks that trigger a physical action.
target Cpp(
    threads = 1,
    run = "bin/AsyncCallback --timeout 2",
    cmake_include = "AsyncCallback.cmake"
);

main reactor AsyncCallback {    
    preamble {= 
        #include <thread>
        #include <chrono>
        #include <iostream>
    =}
    
    timer t(0, 200 msec);
    state thread:{=std::thread=}({==});
    state expected_time:{=long long=}({=100000000LL=});
    state toggle:bool(false);
    physical action a:void;
    state i:int(0);
    reaction(t) {=
        // make sure to join the old thread
        if(thread.joinable()) {
            thread.join();
        }

        // start new thread
        this->thread = std::thread([this] () {
             // Simulate time passing before a callback occurs
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
            // Schedule twice. If the action is not physical, these should
            // get consolidated into a single action triggering. If it is,
            // then they cause two separate triggerings with close but not
            // equal time stamps.
            a.schedule();
            a.schedule();
        });
    =}
    
    reaction(a) {=
        auto elapsed_time = get_elapsed_logical_time();
        std::cout << "Asynchronous callback " << i++ << ": Assigned logical "
                  << "time greater than start time by " << elapsed_time
                  << " nsec." << std::endl;
        if (elapsed_time <= expected_time) {
            std::cerr << "ERROR: Expected logical time to be larger than "
                      << expected_time;
            exit(1);
        }
        if (toggle) {
            toggle = false;
            expected_time += 200000000LL;
        } else {
            toggle = true;
        }
    =}

    reaction(shutdown) {=
        // make sure to join the thread before shutting down
        if(thread.joinable()) {
            thread.join();
        }
    =}
}
