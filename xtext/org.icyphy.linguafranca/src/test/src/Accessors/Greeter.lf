/** Wrapper for a gRPC service defined by the Greeter.proto file.
 *  The Greeter reactor can and should be generated automatically from the proto file.
 *  It defines a reactor that has one input port and one output port for
 *  each gRPC call defined in the Greeter service proto file.
 *  The name of the input is the name of the RPC call, and the name
 *  of the output is the same name with "Response" appended.
 *  The IP address and port of the service are given by a parameter.
 *
 *  FIXME: This is currently insecure, requiring no credentials.
 *
 *  @author: Ravi Akella and Edward A. Lee
 */
target Accessor;
reactor Greet(serverAddress:string("localhost:50051")) {
    preamble {=
        var grpc = require('grpc');
        var protoLoader = require('@grpc/proto-loader');
        var util = require('util');
        var PROTO_PATH = '../src/GreeterSupport/Greeter.proto'
        var client_stub = null; // FIXME: Should be a state variable.
    =}
    input sayHello;
    output sayHelloResponse;
    state clientStub(null);
    timer start;
    reaction(start) {=
        var packageDefinition = protoLoader.loadSync(PROTO_PATH);
        var client = grpc.loadPackageDefinition(packageDefinition);
        client_stub = new client.Greeter(this.getParameter('serverAddress'), grpc.credentials.createInsecure());
        if (client_stub === null) {
            console.log('Failed to creat gRPC Greeter!');
        } else {
            console.log('gRPC Greeter client created.');
        }
    =}
    reaction(sayHello) {=
        // Make an asynchronous RPC call, providing a callback function for the response.
        client_stub.sayHello(sayHello, function(err, response) {
            if (err) {
                console.log('Error:' + err.code + ' [' + err.details + ']');
                return;
            }
            self.send('sayHelloResponse', response.message);
        });        
    =}
}
reactor GenerateRequest {
    preamble {=
        // FIXME: state keyword not yet supported by Accessor target.
        var count = 0;
    =}
    timer t(1 sec, 1 sec);
    output request;
    state count(0);
    reaction(t) -> request {=
        set(request, {name: "world" + count});
        count++;
    =}
}
reactor Display {
    input text;
    reaction(text) {=
        console.log("Received gRPC result: " + text);
    =}
}
reactor Main {
    a = new GenerateRequest();
    g = new Greet();
    d = new Display();
    a.request -> g.sayHello;
    g.sayHelloResponse -> d.text;
}
