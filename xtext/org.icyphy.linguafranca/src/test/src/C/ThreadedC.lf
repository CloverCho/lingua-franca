// Check for speedup of multithreaded execution on multicore machines.
// Each instance of TakeTime takes 200 ms to transport the input to the output.
// Four of them are instantiated.
// Note that without parallel execution, there is no way this can keep up with real time
// since in every 400 msec cycle it has 800 msec of work to do.
target C(
	threads = 4,
	run = "./ThreadedC -stop 4 sec"
);
reactor Source {
	timer t(0, 400 msec);
	output out:int;
	state s:int(0);
	reaction(t) -> out {=
		set(out, self->s++);
	=}
}
reactor TakeTime {
	input in:int;
	output out:int;
	reaction(in) -> out {=
		struct timespec sleep_time = {(time_t) 0, (long)200000000};
		struct timespec remaining_time;
		nanosleep(&sleep_time, &remaining_time);
		set(out, in);
	=}
}
reactor Destination {
	input in1:int;
	input in2:int;
	input in3:int;
	input in4:int;
	reaction(in1, in2, in3, in4) {=
		printf("Sum of received: %d.\n", in1 + in2 + in3 + in4);
	=}
}
reactor Main {
	a = new Source();
	t1 = new TakeTime();
	t2 = new TakeTime();
	t3 = new TakeTime();
	t4 = new TakeTime();
	b = new Destination();
	a.out -> t1.in;
	a.out -> t2.in;
	a.out -> t3.in;
	a.out -> t4.in;
	t1.out -> b.in1;
	t2.out -> b.in2;
	t3.out -> b.in3;
	t4.out -> b.in4;
}