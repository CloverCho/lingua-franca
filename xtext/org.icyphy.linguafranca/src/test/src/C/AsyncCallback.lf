// Test asynchronous callbacks that trigger a physical action.
// This test case assumes that target is multithreaded.
// This test will not work with the unthreaded C target because that target
// does not implement any mutex protecting the event queue.
target C(
	threads = 1,
	run = "./AsyncCallback -timeout 2 sec"
);

reactor Main {
	
	preamble {=
		#include <pthread.h>
				
		void callback(void* a) {
		    // Schedule twice. If the action is not physical, these should
		    // get consolidated into a single action triggering. If it is,
		    // then they cause two separate triggerings with close but not
		    // equal time stamps.
			schedule(a, 0, NULL);
            schedule(a, 0, NULL);
		}
		// Simulate time passing before a callback occurs.
		void* take_time(void* a) {
			struct timespec sleep_time = {(time_t) 0, (long)100000000};
			struct timespec remaining_time;
			nanosleep(&sleep_time, &remaining_time);
			callback(a);
			return NULL;
		}
		pthread_t threadId;
	=}
	
	timer t(0, 200 msec);
	state thread_id:pthread_t(NULL);
	state expected_time:{=long long=}({=100000000LL=});
	state toggle:bool(false);
    physical action a:int;
	state i:int(0);
	reaction(t) -> a {=
		// start new thread, provide callback
		pthread_create(&self->thread_id, NULL, &take_time, a);
	=}
	
	reaction(a) {=
		instant_t elapsed_time = get_elapsed_logical_time();
        printf("Asynchronous callback %d: Assigned logical time greater than start time by %lld nsec.\n", self->i++, elapsed_time); 
		if (elapsed_time <= self->expected_time) {
		    printf("ERROR: Expected logical time to be larger than %lld.\n", self->expected_time);
		    exit(1);
		}
        if (self->toggle) {
            self->toggle = false;
            self->expected_time += 200000000LL;
        } else {
            self->toggle = true;
        }
	=}
}
