// Grammar for Lingua Franca
// The Lingua-Franca toolkit is is licensed under the BSD 2-Clause License.
// See LICENSE.md file in the top repository directory.

grammar org.icyphy.LinguaFranca with org.eclipse.xtext.common.Terminals

generate linguaFranca "http://www.icyphy.org/LinguaFranca"

/////////// Overall file
Model:
	target=Target 
	(imports += Import)*
	(reactors += Reactor)+;

/////////// Top level elements
Target:
	'target' name=ID ( '(' parameters=Assignments? ')' )? ';';
	
Import:
	'import' name=Path ';';

Reactor:
   	'main'? 'reactor' name=ID parameters=Params? '{'
   	(preamble = Preamble)?
   	((inits += Initialization) // TODO: code-gen for init
	| (states += State)
   	| (inputs += Input)
   	| (outputs += Output)
   	| (timers += Timer)
   	| (actions += Action)
   	| (instances += Instance)
   	| (connections += Connection)
   	| (deadlines += Deadline)
   	| (reactions += Reaction)
   	| (mutations += Mutation))*
   	'}';
	
/////////// Statements

// Types are optional for use in untyped languages.
State:
	'state' name=ID (':' type=Type)? ('(' value=Value ')') ';';

Input:
	'input' name=ID (':' type=Type)? ';';

Output:
	'output' name=ID (':' type=Type)? ';';

Timer:
	modifier=('logical'|'physical')? 'timer' name=ID timing=Timing?';';

Action:
	modifier=('logical'|'physical')? 'action' name=ID ('(' delay=(ID | NUMBER) ')')? (':' type=Type)? ';';

Reaction:
	('reaction' | 'react')
	('(' (triggers+=TriggerRef (',' triggers+=TriggerRef)*)? ')')?
	(sources+=SourceRef (',' sources+=SourceRef)*)?
	('->' effects+=EffectRef (',' effects+=EffectRef)*)?
	code=CODE;

Mutation:
	('mutation' | 'mutate')
	('(' (triggers+=[Trigger] (',' triggers+=[Trigger])*)? ')')?
	(sources+=[Input] (',' sources+=[Input])*)?
	('->' effects+=[Effect] (',' effects+=[Effect])*)?
	code=CODE;

Initialization:
	('initialize' | 'init')
	(sources+=[Input] (',' sources+=[Input])*)?
	('->' effects+=[Effect] (',' effects+=[Effect])*)?
	code=CODE;

Preamble:
	'preamble' code=CODE;
	
// FIXME: Insert dummy object for foreign imports in scope provider.
Instance:
	name=ID '=' 'new' reactorClass=[Reactor] ('(' parameters=Assignments? ')')? ';' ;

Connection:
    leftPort=Port '->' rightPort=Port ';'; // FIXME: add cross-referencing here
    
Deadline:
    'deadline' '(' port=InputRef ',' delay=Time ',' action=[Action] ')' ';';

KEYWORD:
	'input' | 'state' | 'output' | 'timer' | 'action';

/////////// Pieces

Variable:
	Input | Output | Action | Timer;

Trigger:
	Action | Input
;

Effect:
	Action | Output
;

TriggerRef:
	variable=[Variable] | instance=[Instance] '.' variable=[Output];

SourceRef:
	variable=[Input] | instance=[Instance] '.' variable=[Output];
	
InputRef:
	variable=[Input] | instance=[Instance] '.' variable=[Input];

EffectRef:
	variable=[Variable] | instance=[Instance] '.' variable=[Input];

Assignments:
	assignments+=Assignment (',' assignments+=Assignment)*;
	
Assignment:
	name=ID '=' value=Value (unit=ID)?; // FIXME: Cross-referencing
	//name=[Param] '=' value=Value (unit=ID)?;

// Parameters for actors and composites.
Params:
    '(' params+=Param (',' params+=Param)* ')';

// Single parameter.
Param:
    'const'? name=ID ((':' type='time' '(' time=Time ')')
    		| (':' type=Type)? ('(' value=Value ')')
    		)?;

// Timing specification for a timer: (offset, period)
// Can be empty, which means (0,0) = (NOW, ONCE).
// E.g. (0) or (NOW) or (NOW, ONCE) or (100, 1000)
// The latter means fire with period 1000, offset 100.
Timing:
	'(' offset=Time (',' period=Time)?')';

// Time is either an ID (a reference to a parameter) or
// a constant, a number followed by a unit specification.
// Time unit here is any ID. The validator should check for valid units.
Time:
	time=ID | time=NUMBER (unit=ID)?;

// 'input' and 'output' are allowed port names despite being keywords.
Port:
    ID | (ID '.' ID);

// A type is in the target language, hence either an ID or target code.
Type:
    ID | CODE ;
    
Value:
    ID | NUMBER | STRING | CODE;

/////////// Elementary components
// Terminals must be mutually exclusive. They are used by the lexer before parsing.

// FIXME: Can we replace this with something more general? E.g., scientific notation, hex, etc.?
terminal NUMBER:
    ('-'? INT ('.' INT)?) ;

// FIXME: What if the code needs to contain '=}'?
// Just escaping with \ is not a good idea because then every \ has to be escaped \\.
// Perhaps the string EQUALS_BRACE could become '=}'?
terminal CODE:
    '{=' .* '=}' ;

// The following cannot be terminal because it overlaps ID.
Path:
	ID ('.' ID)* ;
