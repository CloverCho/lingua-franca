/* Grammar for Lingua Franca. */

/* Runtime infrastructure for the C target of Lingua Franca. */

/*************
Copyright (c) 2020, The University of California at Berkeley.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***************/

/** Grammar for Lingua Franca.
 *  
 *  @author{Marten Lohstroh <marten@berkeley.edu>}
 *  @author{Edward A. Lee <eal@berkeley.edu>}
 */

grammar org.icyphy.LinguaFranca with org.eclipse.xtext.common.Terminals

generate linguaFranca "http://www.icyphy.org/LinguaFranca"

/////////// Overall file
Model:
    target=Target
    (imports+=Import)*
    (reactors+=Reactor)+;

/////////// Top level elements
Target:
    'target' name=ID ('(' properties+=Property (',' properties+=Property)* ')')? ';';

Import:
    'import' name=Path ';';

Reactor:
    (main?='main'? & realtime?='realtime'?) 'reactor' name=ID
    ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
    (preamble=Preamble)?
    ((states+=State)
    | (inputs+=Input)
    | (outputs+=Output)
    | (timers+=Timer)
    | (actions+=Action)
    | (instantiations+=Instantiation)
    | (connections+=Connection)
    | (reactions+=Reaction)
    | (mutations+=Mutation))*
    '}';

/////////// Statements

// Types are optional for use in untyped languages.
State:
    'state' name=ID ((':' ofTimeType?='time' '(' time=INT (unit=TimeUnit)? ')')
    | ((':' type=Type) '(' value=(Literal | ID) ')')
    | ('(' (value=(Literal)) ')')
    | ('(' parameter=[Parameter] ')'))? ';';

Input:
    'input' name=ID (':' type=Type)? ';';

Output:
    'output' name=ID (':' type=Type)? ';';

// Timing specification for a timer: (offset, period)
// Can be empty, which means (0,0) = (NOW, ONCE).
// E.g. (0) or (NOW) or (NOW, ONCE) or (100, 1000)
// The latter means fire with period 1000, offset 100.
Timer:
    'timer' name=ID ('(' offset=TimeOrValue (',' period=TimeOrValue)? ')')? ';';

Action:
    origin=ActionOrigin 'action' name=ID ('(' delay=TimeOrValue ')')? (':' type=Type)? ';';

Reaction:
    ('reaction')
    ('(' (triggers+=TriggerRef (',' triggers+=TriggerRef)*)? ')')?
    (sources+=VarRef (',' sources+=VarRef)*)?
    ('->' effects+=VarRef (',' effects+=VarRef)*)?
    code=CODE
    (deadline=Deadline)?;

TriggerRef:
    VarRef | startup?='startup' | shutdown?='shutdown';

Deadline:
    'deadline' '(' time=TimeOrValue ')' deadlineCode=CODE;

Mutation:
    ('mutation')
    ('(' (triggers+=[Trigger] (',' triggers+=[Trigger])*)? ')')?
    (sources+=[Input] (',' sources+=[Input])*)?
    ('->' effects+=[Effect] (',' effects+=[Effect])*)?
    code=CODE;

Preamble:
    'preamble' code=CODE;

Instantiation:
    name=ID '=' 'new' reactorClass=[Reactor] '(' (parameters+=Assignment (',' parameters+=Assignment)*)? ')' ';';

Connection:
    leftPort=VarRef '->' rightPort=VarRef ';';

KEYWORD:
    'input' | 'state' | 'output' | 'timer' | 'action';

/////////// Pieces
Variable:
    Port | Action | Timer;

Trigger:
    Action | Input;

Effect:
    Action | Output;

VarRef:
    variable=[Variable]
    | container=[Instantiation] '.' variable=[Variable];

Assignment:
    (lhs=[Parameter] '=' rhs=TimeOrValue);

Property:
    name=ID '=' value=Literal;

// Single parameter.
Parameter:
    name=ID ((':' ofTimeType?='time' '(' time=INT (unit=TimeUnit)? ')')
    | ((':' type=Type)? '(' value=Literal ')'))?;

// Time is either a reference to a parameter or an integer value, 
// a number followed by a unit specification (unless the value is zero). 
// If it is a constant, the validator should check that if the value
// is non-zero, it is accompanied by a unit.
TimeOrValue:
    (parameter=[Parameter] | value=Literal | (time=INT unit=TimeUnit));

Port:
    Input | Output;

    // A type is in the target language, hence either an ID or target code.
Type:
    ID | CODE;

Literal:
    STRING | CODE | FLOAT | INT | NEGINT;

/////////// Elementary components
// Terminals must be mutually exclusive. They are used by the lexer before parsing.
terminal NEGINT:
    '-' ('0'..'9')+;

terminal FLOAT:
    '-'? ('0'..'9')+ '.' ('0'..'9')+;

// FIXME: What if the code needs to contain '=}'?
// Just escaping with \ is not a good idea because then every \ has to be escaped \\.
// Perhaps the string EQUALS_BRACE could become '=}'?
terminal CODE:
    '{=' .* '=}';

// The following cannot be terminal because it overlaps ID.
Path:
    ID ('.' ID)*;

/////////// Enums
enum ActionOrigin:
    LOGICAL='logical' | PHYSICAL='physical';

enum TimeUnit:
    NONE='empty' |
    NSEC='nsec' | NSECS='nsecs' |
    USEC='usec' | USECS='usecs' |
    MSEC='msec' | MSECS='msecs' |
    SEC='sec' | SECS='secs' | SECOND='second' | SECONDS='seconds' |
    MIN='min' | MINS='mins' | MINUTE='minute' | MINUTES='minutes' |
    HOUR='hour' | HOURS='hours' |
    DAY='day' | DAYS='days' |
    WEEK='week' | WEEKS='weeks';
    