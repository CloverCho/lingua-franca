/*
 * generated by Xtext 2.17.0
 */
grammar DebugInternalLinguaFranca;

// Rule Model
ruleModel:
	ruleTarget
	ruleImport
	*
	ruleComponent
	+
;

// Rule Target
ruleTarget:
	'target'
	RULE_ID
	';'
;

// Rule Import
ruleImport:
	'import'
	rulePath
	';'
;

// Rule Component
ruleComponent:
	(
		ruleReactor
		    |
		ruleComposite
	)
;

// Rule Reactor
ruleReactor:
	'reactor'
	ruleComponentBody
	'}'
;

// Rule Composite
ruleComposite:
	'composite'
	ruleComponentBody
	ruleInstance
	*
	ruleConnection
	*
	'}'
;

// Rule ComponentBody
ruleComponentBody:
	RULE_ID
	ruleParams
	?
	'{'
	ruleInput
	*
	ruleOutput
	*
	(
		ruleTimer
		    |
		ruleAction
	)*
	rulePreamble
	?
	ruleReaction
	*
;

// Rule Input
ruleInput:
	'input'
	(
		RULE_ID
		    |'input'
	)
	(
		':'
		ruleType
	)?
	';'
;

// Rule Output
ruleOutput:
	'output'
	(
		RULE_ID
		    |'output'
	)
	(
		':'
		ruleType
	)?
	';'
;

// Rule Timer
ruleTimer:
	'timer'
	(
		RULE_ID
		    |'timer'
	)
	ruleTiming
	?
	';'
;

// Rule Action
ruleAction:
	'action'
	(
		RULE_ID
		    |'action'
	)
	(
		'('
		(
			RULE_ID
			    |RULE_NUMBER
		)
		')'
	)?
	';'
;

// Rule Reaction
ruleReaction:
	'reaction'
	(
		'('
		(
			RULE_ID
			(
				','
				RULE_ID
			)*
		)?
		')'
	)?
	ruleGets
	?
	ruleSets
	?
	RULE_CODE
;

// Rule Preamble
rulePreamble:
	'preamble'
	RULE_CODE
;

// Rule Instance
ruleInstance:
	RULE_ID
	'='
	'new'
	RULE_ID
	(
		'('
		ruleAssignments
		?
		')'
	)?
	';'
;

// Rule Connection
ruleConnection:
	rulePort
	'->'
	rulePort
	';'
;

// Rule Assignments
ruleAssignments:
	ruleAssignment
	(
		','
		ruleAssignment
	)*
;

// Rule Assignment
ruleAssignment:
	RULE_ID
	'='
	ruleValue
;

// Rule Gets
ruleGets:
	RULE_ID
	(
		','
		RULE_ID
	)?
;

// Rule Params
ruleParams:
	'('
	ruleParam
	(
		','
		ruleParam
	)*
	')'
;

// Rule Param
ruleParam:
	'const'?
	RULE_ID
	(
		':'
		ruleType
	)?
	(
		'('
		ruleValue
		')'
	)?
;

// Rule Timing
ruleTiming:
	'('
	(
		'NOW'
		    |
		RULE_ID
		    |RULE_NUMBER
	)
	(
		','
		(
			'ONCE'
			    |
			'STOP'
			    |
			RULE_ID
			    |RULE_NUMBER
		)
	)?
	')'
;

// Rule Port
rulePort:
	(
		RULE_ID
		    |
		RULE_ID
		'.'
		(
			RULE_ID
			    |
			'input'
			    |
			'output'
		)
	)
;

// Rule Sets
ruleSets:
	'->'
	RULE_ID
	(
		','
		RULE_ID
	)?
;

// Rule Type
ruleType:
	(
		RULE_ID
		    |
		RULE_CODE
	)
;

// Rule Value
ruleValue:
	(
		RULE_ID
		    |
		RULE_NUMBER
		    |
		RULE_STRING
		    |
		RULE_CODE
	)
;

// Rule Path
rulePath:
	RULE_ID
	(
		'.'
		RULE_ID
	)*
;

RULE_NUMBER : '-'? RULE_INT ('.' RULE_INT)?;

RULE_CODE : '{=' .* '=}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
