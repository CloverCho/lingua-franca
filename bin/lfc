#!/bin/bash

#==========================================================
# Description: 	    Run the lfc compiler.
# Authors:          Marten Lohstroh, Mehrdad Niknami
# Usage:            Usage: lfc [options] file...
#==========================================================

set -euo pipefail

# Exit with message and error code 1.
function error_exit() {
    1>&2 echo "compilation terminated."
	exit 1
}

# Report error.
function error() {
    1>&2 echo -e "\e[1mlfc: \e[31merror: \e[0m$1"
}

# Report fatal error.
function fatal_error() {
    1>&2 echo -e "\e[1mlfc: \e[31mfatal error: \e[0m$1"
}

# Report that no input files are given.
function no_files() {
    fatal_error "no input files"
}

# Report that the given file cannot be found.
function file_not_found() {
    error "$1: No such file or directory"
    no_files
}

# Report that the given file does not have the appropriate extension.
function incompatible_file() {
    1>&2 echo "$1: file not recognized: file format not recognized"
    fatal_error "incompatible input file"
}

# Report that a value is missing after a given flag.
function missing_value() {
    1>&2 echo "missing value after flag: '"$1"'"
    fatal_error "malformed arguments"
}

# Print message explaining the CLI args.
function usage() {
    echo "Usage: lfc [options] file... [target-options]"
    echo "Options:"
    echo "  -c | --target-compiler  Target compiler to invoke."
    echo "  -h | --help             Display this information."
    echo "  -n | --no-target        Do not invoke target compiler."
    echo "  -r | --rebuild          Rebuild the compiler first."
}

if [[ $(type -p java) != "" ]]; then
    #echo found java executable in PATH
    _java=java
elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
    #echo found java executable in JAVA_HOME     
    _java="$JAVA_HOME/bin/java"
else
    fatal_error "JRE not found."
    error_exit
fi

if [[ "$_java" ]]; then
    semantic_version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
    java_version=$(echo "$semantic_version" | awk -F. '{printf("%03d%03d",$1,$2);}')
    #echo version "$semantic_version"
    #echo version "$java_version"
    if [ $java_version -lt 001008 ]; then
        fatal_error "JRE $semantic_version found but 1.8 or greater is required."     
        error_exit   
    fi
fi

# Process CLI args.
rebuild=0
files=()
group=0
targs=""

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -c | --target-compiler )
            opt=$1
            shift
            if [[ $1 == -* ]]; then
                missing_value $opt
                error_exit
            else
                targs=$targs" --target-compiler "$1
            fi
        ;;
        -f | --file )
            opt=$1
            shift
            if [[ $1 == -* ]]; then
                missing_value $opt
                error_exit
            else
                filename=$1
            fi
        ;;
	-h | --help )
            usage
            exit 0
        ;;
        -r | --rebuild )
            rebuild=1
        ;;
        -n | --no-target )
            targs=$targs" --no-target"
        ;;
        -* ) 
            if [[ $group < 1 ]]; then
                1>&2 echo "Unknown parameter passed: $1"
                usage
                error_exit
            else
                targs=$targs" "$1
                group=2
            fi
        ;;
        * ) 
            if [[ ! -f "$1" ]]; then
                if [[ $group < 2 ]]; then
                    file_not_found $1
                    error_exit
                else
                    targs=$targs" "$1
                fi
            else
                if [[ $1 == *.lf ]]; then
                    files+=( $1 )
                    group=1
                else
                    incompatible_file $1
                    error_exit
                fi
            fi
    esac
    shift
done

# Exit if no input files are given.
entries=${#files[@]}
if [[ ${entries} -lt 1 ]]; then
fatal_error "no input files"
    error_exit
fi

base=""
if [ ! "$0" = "${0##*/*}" ]; then  # Do we have a parent directory?
	base="${0%/*}/"
fi

# Rebuild if requested. No Internet connection should be required for this.
if [ ${rebuild} -eq 1 ]; then
    "${base}/build-lfc" "--offline"
fi

base="${base}../xtext/"
lfbase="${base}org.icyphy.linguafranca/"
jarpath="${lfbase}build/libs/org.icyphy.linguafranca-1.0.0-SNAPSHOT-all.jar"

# Report target options being overridden.
if [[ $targs != "" ]]; then
    echo "Target compiler flags:""${targs}"
fi

# Compile the given file entries.
for (( i=0; i<$entries; i++ )); do
    if [ $java_version -gt 001008 ]; then
        java --add-opens java.base/java.lang=ALL-UNNAMED -jar "${jarpath}" "${files[$i]}""${targs}";
    else
        java -jar "${jarpath}" "${files[$i]}""${targs}";
    fi
done
