#!/bin/bash

#==========================================================
# Description:  Measure the execution time of a given
#               Lingua Franca program. This is achieved
#               by running the binary for a number of times
# Author:       Soroush Bateni
# Usage:        measure-lf-time [options] file...
#==========================================================

# FIXME: This script currently looks for "Elapsed physical time (in nsec):"
# which are only produced for the C and Python targets.

set -euo pipefail

# Print message explaining the arguments
function usage() {
    echo "Usage: measure-lf-time [options] [bins]"
    echo "bins: binaries for a Lingua Franca program."
    echo "Options:"
    echo "  -n | --number-of-executions num    Run the [generated] binary num."
    echo "  -l | --log                         Store the output of the commands in directory called \"logs\"."
}

# Exit with message and error code 1.
function error_exit() {
    1>&2 echo "compilation terminated."
	exit 1
}

# Report error.
function error() {
    1>&2 echo -e "\e[1mmeasure-lf-time: \e[31merror: \e[0m$1"
}

# Report fatal error.
function fatal_error() {
    1>&2 echo -e "\e[1mmeasure-lf-time: \e[31mfatal error: \e[0m$1"
}

# Report that the given file cannot be found.
function file_not_found() {
    error "$1: No such file or directory"
    no_files
}

# Report that a value is missing after a given flag.
function missing_value() {
    1>&2 echo "missing value after flag: '"$1"'"
    fatal_error "malformed arguments"
}

# Process benchmark args
number_of_executions=10
files=()
log=false

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -n | --number-of-executions )
            opt=$1
            shift
            if [[ $1 == -* ]]; then
                missing_value $opt
                error_exit
            else
                number_of_executions=$1
            fi
        ;;
        -h | --help )
            usage
            exit 0
            ;;
        -l | --log )
            log=true
            ;;
        -* ) 
            1>&2 echo "Unknown parameter passed: $1"
            usage
            error_exit
            ;;
        * ) 
            if [[ -f "$1" ]]; then
                files+=( $1 )
            else            
                file_not_found $1
                error_exit
            fi
    esac
    shift
done

# Exit if no input files are given.
entries=${#files[@]}
if [[ ${entries} -lt 1 ]]; then
fatal_error "no input files"
    error_exit
fi

# Create a logs directory
mkdir -p logs;

echo -e "Benchmark (in nsecs)\tAverage\t\tMinimum\t\tMaximum\t\tMedian"
# Run benchmark for the given file entries.
for (( i=0; i<$entries; i++ )); do \
    benchmark=$(for k in $(eval echo {1..$number_of_executions}); do
                    $"${files[$i]}"
                done)
    if [ "$log" = true ] ; then
        echo "$benchmark" &> "logs/${files[$i]##*/}-`date +"%s-%d-%m-%Y"`"
    fi
    # This script assumes that the 7th column on the line that contains "Elapsed physical time (in nsec):"
    # contains the elapse physical time.
    results=$(echo "$benchmark" | grep "Elapsed physical time (in nsec):" |
        awk '
            # In the beginning
            !i++{
                # Remove the , in the number
                gsub(/,/,"",$7);
                # And set initial values of min and max
                min=$7+0;
                max=$7+0;
            }
            # Then
            {
                # Remove the , in the number
                gsub(/,/,"",$7);
                # Add numbers in each row to sum
                sum+=$7;
                # Calculate new min
                min=($7+0<=0+min) ? $7:min;
                # Calculate new max
                max=($7+0>=0+max) ? $7:max;
            }
            # Print the results in the output
            END {
                printf "%d\t%d\t%d\n", sum/NR, min, max
            }
        ')
    median=$(echo "$benchmark" | grep "Elapsed physical time (in nsec):" |
        awk '
            {
                # Remove the , in the number
                gsub(/,/,"",$7);
                # Store the physical execution time in result
                # for each row
                result[NR]=$7;
            }
            END {
                if (NR % 2) {
                    print result[(NR + 1) / 2];
                } else {
                    print (result[(NR / 2)] + result[(NR / 2) + 1]) / 2.0;
                }
            }
        ')
    echo -e "${files[$i]##*/}\t\t\t$results\t$median"
done