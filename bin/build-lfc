#!/bin/bash

#==========================================================
# Description: 	        Build the lfc compiler.
# Authors:		Marten Lohstroh, Mehrdad Niknami
# Usage:		build-lfc [options]
#==========================================================

set -euo pipefail

# Absolute path to the directory containing this script, even in presence of links
bindir=`dirname "$(readlink -f "$0")"`
# the base directory
base=`dirname ${bindir}`

# Import utility functions
source "${base}/lib/bash/util.sh" 

# Find the jar and check whether sources are present or not.
find_jarpath

if [[ "${src_available}" == "false" ]]; then
    fatal_error "Cannot find sources."
fi

# Print message explaining the CLI args.
function usage() {
    echo "Usage: build-lfc [options] [[-r | --run] file [args]]"
    echo "Options:"
    echo "  -c | --clean          Build entirely from scratch."
    echo "  -h | --help           Display this information."
    echo "  -o | --offline        Use cached libraries."
    echo "  -s | --stacktrace     Provide stacktrace of build errors."
}

flags=" ";
clean=0;

# FIXME: trim arg list using commented-out code at the bottom

while [[ "$#" -gt 0 ]]; do 
    case $1 in
        -o | --offline ) 
            flags=$flags"--offline "
        ;;
        -s | --stacktrace ) 
            flags=$flags"--stacktrace "
        ;;
        -c | --clean )
        clean=1
        ;;
        *) 
            usage
            exit 1
        ;;
    esac
    shift
done

if [ $clean -eq 1 ]; then
    echo "Performing cleanup."
    "${base}/gradlew" -p "${base}" clean;
fi

# Check if jar is missing or out-of-date relative to source files
if [ ! -f "${lfc_jar_snapshot_path}" ] || ! "${FIND}" "${lfbase}/src" -path "${lfbase}src/test" -prune -o -type f -newer "${lfc_jar_snapshot_path}" -exec false {} +; then
	1>&2 echo "Jar file is missing or out-of-date; running Gradle..."
	"${base}/gradlew" ${flags} -p "${base}" buildLfc
	touch -c -- "${jarpath}"  # Ensure the file timestamp is up-to-date even if the file didn't need to be updated
else
    echo "Already up-to-date."
fi

## FROM lfc script:
# enable the rebuild feature only if the sources are available
# if [[ "${src_available}" == "true" ]]; then
#     # 1. Determine whether to rebuild; and
#     # 2. Strip rebuild flag from args.
#     rebuild=false
#     args=()
#     for var in "$@"; do
#         # remove leading whitespace characters
#         var="${var#"${var%%[![:space:]]*}"}"
#         # remove trailing whitespace characters
#         var="${var%"${var##*[![:space:]]}"}"
#         if [[ $var = "-r" ]]; then
#             rebuild=true
#         else
#             args+=("$var")
#         fi
#     done

#     # Build if no jar exists or rebuild is requested.
#     if [[ "${jar_found}" == "false" ]] ||  [[ "${rebuild}" == "true" ]]; then
#         pushd "$base"
#         ./gradlew buildLfc
#         popd
#         jarpath="$(ls  ${jarpath_pattern} | sort -V | tail -n1)"
#         find_jarpath
#     fi
# fi
