/**
 * Upon startup, the barber goes to sleep and is woken up by
 * a `cut` message from the first customer. After serving each
 * customer, the barber checks the waiting room for the next 
 * customer. If there is no one waiting, the barber returns 
 * to sleep. Customers arrive independently from each other
 * and send a `cut` message upon arrival. If the barber is 
 * sleeping, the customer get served right away, else the
 * barber either sent a `wait` message to sit in the waiting 
 * room or `full` message if all chairs are full. When received
 * a `full` message, customer leaves and retries latter. 
 * Customers sent a `finish` message and leave upon receiving
 * a `done` message from the barber.
 * 
 * This example is inspired by Savina benchmark by the same,
 * which has a C target implementation here:
 * [https://github.com/lf-lang/lingua-franca/blob/master/benchmark/C/Savina/src/concurrency/SleepingBarber.lf].
 * Unlike the benchmark, this example illustrates a direct
 * implementation that takes advantage of the semantics of
 * Lingua Franca.
 * 
 * @author Thee Ho
 * @author Edward A. Lee
 */
 
target C {
    fast: true,
    tracing: true,
    logging: DEBUG,
    threads: 1,
};
reactor Barber(
    cut_time:time(1 nsec), // (Logical) time spent serving a customer.
    num_chairs:int(5),
    num_customers:int(10)
) {
    preamble {=
       // Return the customer waiting in the first non-empty
       // chair or -1 if there are no customers waiting.
       int get_customer(int chairs[], int num_chairs) {
            for (int i = 0; i < num_chairs; i++){
            	int id = chairs[i];
            	if (id >= 0){
                    chairs[i] = -1;   
                    return id;
                }
            }
            return -1;
       }
       // Put a customer in the first empty chair, if there is one,
       // and return true. If there is no empty chair, return false.
       bool put_customer(int chairs[], int num_chairs, int ID){
	   		for (int i = 0; i < num_chairs; i++){
            	if (chairs[i] < 0){
                    chairs[i] = ID;
                    return true;
                }
            }
            return false;
       }   
    =}
    input[num_customers] cut:bool;
    
    output[num_customers] done:bool;
    output[num_customers] wait:bool;
    output[num_customers] full:bool;
   
    state customerID:int;
    state customer_served:int;
    state chairs:int[]; // store customerID of waiting customers
    state sleep:bool;

    logical action done_cutting;
    logical action check_waitingroom;
    
    reaction(startup) {=
        self->chairs = calloc(self->num_chairs, sizeof(int));
        // Mark the chairs empty.
        for (int i=0; i < self->num_chairs; i++) {
            self->chairs[i] = -1;
        }
        self->customer_served = 0;
        self->sleep = true;
    	self->customerID = -1;
    =}
     
    reaction(cut) -> done_cutting, wait, full {=
        for (int i = 0; i < self->num_customers; i++){
            if (cut[i]->is_present){
                info_print("Customer %d arrives at time %lld.", i, get_elapsed_logical_time());
        		if (self->sleep){
            		self->sleep = false;
            		info_print("Barber begins cut.");
            		schedule(done_cutting, self->cut_time);
            		self->customerID = i;
        		} else if (put_customer(self->chairs, self->num_chairs, i)) {
                    info_print("Customer waiting in a chair.");
            		SET(wait[i],true);
        		} else {
                    info_print("All chairs are full. Customer leaves.");
            		SET(full[i],true);
        		}
        	}
        }
    =}
    
    reaction(done_cutting)->check_waitingroom, done {=
     //   printf("Barber is done serving customer %d.\n", self->customerID);
        SET(done[self->customerID],true);
        self->customerID = -1;
        self->customer_served++; 
        schedule(check_waitingroom,0);
    =}
    
    reaction(check_waitingroom)->done_cutting {=
        int id = get_customer(self->chairs,self->num_chairs);
        if (id >= 0){
            self->customerID = id;
            schedule(done_cutting, self->cut_time);
        } else {
            self->sleep = true;
       //    printf("*********** Barber going to sleep at %lld\n", get_elapsed_logical_time());
        }
    =}
    
    reaction(shutdown) {=
        free(self->chairs);
    =}
}

reactor Customer(
    bank_index:int(0), 
    retry_time:time(5 sec) // Maximum between attempts to enter.
){
    input done:bool; 
    input wait:bool;
    input full:bool;
    
    logical action enter;
    
    output cut:bool;
    output finish:bool;
    
    reaction(startup) -> enter {=
        // Schedule random customer arrivals
        srand(0);
        schedule(enter, ((rand()%1000)/1000.0) * self->retry_time); 
    =}
    reaction(enter) -> cut {=
        SET(cut,true); 
     // printf("Customer %d arrived.\n", self->bank_index);
    =}
    reaction(wait){=
     //   printf("Customer %d is in the wait room.\n", self->bank_index);
    =}
    reaction(full) -> enter {=
     //   printf("Waiting room full customer %d left.\n", self->bank_index);
        schedule(enter,self->retry_time);
    =}
    reaction(done) -> finish {=
        SET(finish,true);
    =}
}

main reactor (cut_time:time(1 nsec), num_chairs:int(4), num_customers:int(32)){  
    barber = new Barber(cut_time=cut_time, num_chairs=num_chairs, num_customers=num_customers);
    customers = new[num_customers] Customer();

    customers.cut -> barber.cut;
    barber.done -> customers.done;
    barber.wait -> customers.wait;
    barber.full -> customers.full;
}
