/**
 * Rhythm generator using samples of percussion instruments.
 * This version can run on multiple machines leveraging
 * synchronized clocks to stay in sync.
 * This program is not portable. It runs on MacOS.
 * 
 * This program tests clock synchronization by producing
 * sounds on each of two computers that, if the clocks are
 * synchronized well enough, sound like they are occurring
 * at identical times. In this version, there is no communication
 * between the components other than clock synchronization.
 * 
 * @see RhythmMac.lf
 * @see RhythmMacDistributed.lf
 * @see RhythmMacDistributedIndependent.lf
 * 
 * @author Edward A. Lee
 */
target C {
    flags: ["-framework", "AudioToolbox", "-framework", "CoreFoundation", "-lm"],
    coordination: decentralized,
    logging: log,
    timeout: 10 sec,
    clock-sync: on,
    clock-sync-options: {
        local-federates-on: true,
        test-offset: 200 msec,
        period: 5 msec,
        trials: 10,
        attenuation: 10
    },
    files: ["/lib/C/util/wave_file_reader.c", "/lib/C/util/wave_file_reader.h",
            "/lib/C/util/audio_loop_mac.c", "/lib/C/util/audio_loop.h",
            "/lib/C/util/audio_loop_linux.c",
            "sounds/Claves.wav"] 
};
preamble {= 
    #include "wave_file_reader.c"
    #if __APPLE__
    #include "audio_loop_mac.c"
    #elif __linux__
    #include "audio_loop_linux.c"
    #else
    #error "Platform not supported."
    #endif
    
    /////////////////////////////
    // Configuration of the audio.
        
    // wav files giving the waveforms.
    // These have to also be included in the files target directive.
    #define NUM_WAVEFORMS 1  // Number of waveforms.
    char* waveform_file = "Claves.wav";
            
    // The waveforms themselves.
    lf_waveform_t* waveform;
=}

/**
 * Reactor that outputs a note request at the specified period.
 */
reactor BeatSource(period:time(1600 msec)) {    
    output note:float;     // To play a note with the given emphasis.
    
    timer tick(0, period);
        
    reaction(tick) -> note {=
        SET(note, 1.0f);
    =}
}

/**
 * Produce a note when a `note` input is received.
 * 
 * This reactor provides a small collection of built-in audio
 * waveforms which are read at startup time from .wav files.
 * The waveform input specifies which of the waveforms to play
 * upon the next `note` input received.
 * It is a number between 0 and NUM_WAVEFORMS. If a number outside
 * this range is received, then simple tick sounds will be produced.
 * Number 0 is specially interpreted for silence.
 *
 * The `note` input is a number, normally between 0.0 and 1.0,
 * that specifies the loudness of the note. If the loudness exceeds
 * 1.0, or if too many notes are played at once, clipping may occur.
 * 
 */
reactor PlayWaveform {
    input note:float;
    
    /**
     * Index of the current waveform.
     * -1 means no waveform (just make ticks)).
     */
    state waveform_id:int(0);
        
    reaction(startup) {=
        
        waveform = read_wave_file(waveform_file);
        
        // Start an audio loop that will become ready to receive
        // amplitude samples of audio data.
        lf_start_audio_loop(get_logical_time());
    =}
    
    reaction(note) {=
        lf_play_audio_waveform(waveform, note->value, get_logical_time());
        // Alternatively, pass null to just play a tick.
        // lf_play_audio_waveform(NULL, note->value, get_logical_time());
    =} deadline (100 msec) {=  // NOTE: deadline has to match BUFFER_DURATION_NS.
        fprintf(stderr, "WARNING: Missed deadline!\n");
    =}
    
    reaction(shutdown) {=
        lf_stop_audio_loop();
    =}
}

reactor RhythmMacPlayer {
    source = new BeatSource();
    play = new PlayWaveform();
    source.note -> play.note;
}

federated reactor RhythmMacDistributedNoUI at localhost {
    player1 = new RhythmMacPlayer() at localhost;
    player2 = new RhythmMacPlayer() at localhost;
}

