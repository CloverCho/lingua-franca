/**
 * Simple demonstration of asynchronous input and timed output.
 * This version is not portable. It runs on Linux using ALSA (libasound*-dev).
 * It serves as a demonstration for how to write Lingua Franca
 * programs that use libasound.
 * 
 * This program opens a simple, terminal-based user interface for
 * specifying a rhythmic audio output. The rhythm is displayed in
 * the terminal as it is generated and produced as audio using
 * sample audio files.
 * 
 * This program also uses ncurses, which needs to be installed on your machine
 * for this to work. It also uses the library utility sensor_simulator,
 * provided with Lingua Franca, which uses keyboard input to simulate
 * asynchronous sensors and beeps to simulate timed output.
 * See sensor_simulator.h for documentation.
 * 
 * The merengue rhythm comes from here: 
 * https://www.8notes.com/school/lessons/percussion/merengue.asp
 * 
 * The sound files come from here:
 * https://freewavesamples.com
 * 
 * Sound files are assumed to be wav files with sample rate 44,100,
 * 16-bit samples, linear PCM encoded.
 * 
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
 
target C {
    flags: ["-lncurses", "-lasound", "-lm", "-lpthread"],
    files: ["/lib/C/util/sensor_simulator.c", "/lib/C/util/sensor_simulator.h",
            "/lib/C/util/wave_file_reader.c", "/lib/C/util/wave_file_reader.h",
            "/lib/C/util/audio_loop_linux.c", "/lib/C/util/audio_loop.h",
            "/lib/C/util/audio_loop_mac.c",
            "sounds/Bass-Drum-1.wav", "sounds/Hi-Bongo.wav", "sounds/Claves.wav", "sounds/High-Conga-1.wav",
            "sounds/Cowbell-1.wav", "sounds/Cuica-1.wav", "sounds/Guiro.wav",
            "sounds/Ensoniq-ESQ-1-Snare.wav", "sounds/Floor-Tom-1.wav"]
};

import RhythmSource from "RhythmMac.lf"
import PlayWaveform from "PlayWaveform.lf"

main reactor RhythmLinux {
    play = new PlayWaveform();
    source = new RhythmSource();
    source.note -> play.note;
    source.instrument -> play.waveform;
}
