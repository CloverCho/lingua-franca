

target C;

reactor EngineControl {
	
	input on_off:bool;
	input angle:int;
	output torque:int;
	output check:int; 
	state braking:bool(true);
	physical action crank(0, 5 msec, "drop"):bool;
	
	reaction(on_off) -> torque {=
		if(self->braking) {
			self->braking = true;
			SET(torque, 0);
		} else {
			self->braking = false;
		}
	=}
	 
	reaction(angle) -> torque {= 
		if (!self->braking) { 
			SET(torque, calc_torq(angle->value));
		}	
	=}
	
	reaction(crank) -> check {=
		SET(check, true);	
	=} 
}

reactor LeftPedal { 
	preamble {=
	  	#define ZERO_MAX 3
	  	#define ZERO_MIN 0
	    volatile unsigned char* mm_reg = (unsigned char*) 0x1ffff670;    
	=}
	
	output angle:int;
	output on_off:bool;
	
	physical action a(0, 1 msec, "replace"):int;
	state pressed:int(0);
   
    reaction(a) -> angle, on_off {=
        int a = (int) *mm_reg;
        if(!self->pressed && a > ZERO_MAX) {
          SET(on_off, true);
          self->pressed = true;
        }
        if (self->pressed && a < ZERO_MIN) {
          SET(on_off, false);
          self->pressed = false;
        }
        SET(angle, a);
     =}
}

reactor RightPedal {
    preamble {=
    	// volatile unsigned char* mm_reg = (char*) 0x1ffff670;
        void callback() {
            int value = (int) *mm_reg;
            self->pedal = value;
        }
        void init_poll() {
            setup_poll(&callback);
        }
    =}
   
    // Assume all valid pedal values are non-negative.
    state pedal:int(-1);
    logical action response(2 msec);
    input check:int;
    output angle:int;
    
    // Swapping these two reactions creates a cycle.
    
    reaction(response) -> angle {=
        if (self->pedal < 0) {
            // handle error
        } else {
            SET(angle, self->pedal); 
        }
    =}
    
    reaction(check) -> response {=
        self->pedal = -1;
        init_poll();
        schedule(response, 0);
    =}
    
    
}

//
//reactor RightPedal {
//      
//    input check:void;
//    output angle:int;
//    action response(30);//:int; FIXME: the delay should be a time *unit missing)
//                       // also the response has to carry a value
//    
//    // The desired behavior here is that > 30 ms after a 'check' event triggers
//    // this reaction, another reaction occurs that reports the angle retrieved
//    // from a sensor. The polling with take up physical time.
//    // If we request a new angle using
//    // a blocking call, the result will be reported approximately 30 ms
//    // (physical time) later as long as the blocking call (and the processing
//    // of whatever else is sitting in the event queue for the current logical time)
//    // does not exceed 30 ms.
//    // If we do this asynchronously, with a callback, we don't hold up the
//    // processing of events from the event queue, which is good, but even if all
//    // events can be processed well in time, the response will emerge approximately
//    // 30 ms + the polling delay later because the asynchronous call to schedule
//    // will be based off the physical time at which the callback is invoked.
//    // It seems more appropriate to schedule the event relative to the time at
//    // which the reaction that initiated the request was triggered (like in the
//    // blocking case). Moreover, if the response comes too late, this can be detected
//    // if we keep track of the time at which the request was issued. 
//    // How do we do this?
//    reaction(check) -> response {=
//    	// poll sensor & schedule response
//        schedule(response, poll_accellerator_pedal());
//    =}
//
//    reaction(response) -> angle {=
//        set(angle, get(response));
//    =}
//}

// Simply apply the requested force
reactor Brakes {
	input force:int;
	
	reaction(force) {=
        
    =} deadline (3 msec) {=
        
    =}
}

// Simply apply the requested torque
reactor Engine {
	input torque:int;
	
	reaction(torque) {=
        
    =} deadline (5 msec) {=
        
    =}
}

reactor BrakeControl {
	input angle:int;
	output force:int;
	
	reaction(angle) -> force {=
        
    =}
}

main reactor PowerTrain {
	lp = new LeftPedal();
	rp = new RightPedal();
	bc = new BrakeControl(); // FIXME: check for referencing unknown reactor classes
	ec = new EngineControl();
	b = new Brakes();
	e = new Engine();
	
	lp.angle -> bc.angle;
	bc.force -> b.force;
	lp.on_off -> ec.on_off;
	ec.torque -> e.torque;
	ec.check -> rp.check;
	rp.angle -> ec.angle;
	
}