/**
 * Distributed LF program where a MessageGenerator creates a string
 * message that is sent via the RTI (runtime infrastructure) to a
 * receiver that prints the message.
 * 
 * The after value on the connection gives the logical time offset
 * between the sender and the receiver. The connection is a physical one,
 * indicated with ~>. If this offset is greater
 * than the physical latency from the MessageGenerator through the RTI
 * to the receiver, plus the clock synchronization error,
 * then the timestamps at the receiver will be deterministic.
 * They are the sender's timestamp plus the offset.
 * Otherwise, the timestamps will be larger and will match the
 * physical time at which the receiver receives the message.
 * If the sender and receiver are running in the same machine
 * then there is no clock synchronization error.
 * 
 * To measure the total communication latency from the MessageGenerator,
 * through the RTI to the receiver, set the offset to 0.
 * In this case, the subscriber will always retimestamp the received
 * message using physical time. At the end of execution, when the
 * timeout expires, the average and maximum latency will be printed.
 * 
 * To get deterministic timestamps, the offset needs to be larger
 * than the total latency. An offset of 10 msec seems to be adequate.
 * 
 * To run this:
 * 
 * The code generator produces three executable files, Distributed_RTI,
 * Distributed_Sender, and Distributed_Receiver. Start all three in any
 * order. They will synchronize the start time and run for 10 seconds.
 * A Makefile is provided for convenience.  Using "make all" will
 * generate the code, compile it, and run all three programs, two of
 * which run in the background. The target "make run" will just run
 * the executables, assuming they have already been built, and
 * "make compile" will code generate and compile without running.
 * 
 * @author Edward A. Lee
 */
target C {
    timeout: 10 secs,
    keepalive: true,
    federates: {
        RTI: {host: "localhost", port: 15044},
        Sender: {reactors: [msg]},
        Receiver: {reactors: [dsp]}
    }
};

/**
 * Reactor that generates a sequence of messages, one per second.
 * The message will be a string consisting of a root string followed
 * by a count.
 * @param root The root string.
 * @output message The message.
 */
reactor MessageGenerator(root:string("")) {
    // Output type char* instead of string is used for dynamically
    // allocated character arrays (as opposed to static constant strings).
    output message:char*;
    state count:int(1);
    // Send first message after 1 sec so that the startup reactions
    // do not factor into the transport time measurement on the first message.
    timer t(1 sec, 1 sec);
    reaction(t) -> message {=
        // With NULL, 0 arguments, snprintf tells us how many bytes are needed.
        // Add one for the null terminator.
        int length = snprintf(NULL, 0, "%s %d", self->root, self->count) + 1;
        // Dynamically allocate memory for the output.
        set_new_array(message, length);
        // Populate the output string and increment the count.
        snprintf(message, length, "%s %d", self->root, self->count++);
        printf("MessageGenerator: At time %lld, send message: %s\n",
            get_elapsed_logical_time(),
            message
        );
    =}
}

/**
 * Reactor that prints an incoming string.
 * @param prefix A prefix for the message.
 * @input message The message.
 */
reactor PrintMessage {
    input message:char*;
    reaction(message) {=
        printf("PrintMessage: At (elapsed) logical time %lld, receiver receives: %s\n",
            get_elapsed_logical_time(),
            message
        );
    =}
}

main reactor Distributed {
    msg = new MessageGenerator(root = "Hello World");
    dsp = new PrintMessage();
    msg.message ~> dsp.message after 10 msec;
}