#define LOG_LEVEL 2
#include "ctarget.h"
#define NUMBER_OF_FEDERATES 1
#define TARGET_FILES_DIRECTORY "/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/src-gen/Intersection/Carla/CarlaIntersection"
#include "core/reactor.c"
// Code generated by the Lingua Franca compiler from:
// file://home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf
typedef struct {
    double speed;
    double distance;
} request_message_t;

typedef struct {
    // Average speed vehicle should maintain in the intersection.
    double target_speed;  // FIXME: Deadline.  = t/w
    // Time at which the vehicle can enter the intersection.
    instant_t arrival_time;
} grant_message_t;

        
typedef struct {
    // The CARLA vehicle control data

        // 0. <= throttle <= 1.
        float throttle;
        
        // -1. <= steer <= 1.
        float steer;
        
        // 0. <= brake <= 1.
        float brake;
        
        // hand_brake 0 or 1
        bool hand_brake;
        
        // reverse 0 or 1
        bool reverse;
        
        // gear
        int gear;
        
        // manual gear shift
        bool manual_gear_shift;
} vehicle_command_t;

// Table of offsets by vehicle bank_index:
interval_t timer_offsets[] = {
    0LL,
    MSEC(200),
    MSEC(400),
    MSEC(600)
};
// Table of periods by vehicle bank_index:
interval_t timer_periods[] = {
    SEC(4),
    SEC(8),
    SEC(16),
    SEC(32)
};
// =============== START reactor class Carla
// *********** From the preamble, verbatim:
#line 37 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
#include <functional>
#include <memory>
#include <string>
#include <iostream>
    
#include "rclcpp/rclcpp.hpp"
#include "carla_msgs/msg/carla_ego_vehicle_control.hpp"
        class LFCarlaPublisher : public rclcpp::Node {
    public:
        LFCarlaPublisher()
        : Node("LFCarlaPublisher")
        {
            publisher_ = this->create_publisher<carla_msgs::msg::CarlaEgoVehicleControl>("/carla/ego_vehicle/vehicle_control_cmd", 10);
        }
    
        rclcpp::Publisher<carla_msgs::msg::CarlaEgoVehicleControl>::SharedPtr publisher_;
        }; 
    

// *********** End of preamble.
#line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
typedef struct {
#line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    float value;
#line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool is_present;
#line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_destinations;
#line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
} carla_throttle_t;
#line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
typedef struct {
#line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    float value;
#line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool is_present;
#line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_destinations;
#line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
} carla_steer_t;
#line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
typedef struct {
#line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    float value;
#line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool is_present;
#line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_destinations;
#line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
} carla_brake_t;
#line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
typedef struct {
#line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool value;
#line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool is_present;
#line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_destinations;
#line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
} carla_reverse_t;
#line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
typedef struct {
#line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int value;
#line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool is_present;
#line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_destinations;
#line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
} carla_gear_t;
#line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
typedef struct {
#line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    vehicle_command_t value;
#line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool is_present;
#line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_destinations;
#line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
} carla_command_t;
typedef struct {
    int bank_index;
    #line 61 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    std::shared_ptr<LFCarlaPublisher> lf_carla_publisher;
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_throttle_t* __throttle;
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // width of -2 indicates that it is not a multiport.
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int __throttle__width;
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Default input (in case it does not get connected)
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_throttle_t __default__throttle;
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_steer_t* __steer;
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // width of -2 indicates that it is not a multiport.
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int __steer__width;
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Default input (in case it does not get connected)
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_steer_t __default__steer;
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_brake_t* __brake;
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // width of -2 indicates that it is not a multiport.
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int __brake__width;
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Default input (in case it does not get connected)
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_brake_t __default__brake;
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_reverse_t* __reverse;
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // width of -2 indicates that it is not a multiport.
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int __reverse__width;
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Default input (in case it does not get connected)
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_reverse_t __default__reverse;
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_gear_t* __gear;
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // width of -2 indicates that it is not a multiport.
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int __gear__width;
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Default input (in case it does not get connected)
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_gear_t __default__gear;
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_command_t* __command;
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // width of -2 indicates that it is not a multiport.
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int __command__width;
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Default input (in case it does not get connected)
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    carla_command_t __default__command;
    #line 62 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t ___reaction_0;
    #line 67 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t ___reaction_1;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t ___reaction_2;
    trigger_t ___startup;
    reaction_t* ___startup_reactions[1];
    trigger_t ___shutdown;
    reaction_t* ___shutdown_reactions[1];
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    trigger_t ___throttle;
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t* ___throttle_reactions[1];
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    trigger_t ___steer;
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t* ___steer_reactions[1];
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    trigger_t ___brake;
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t* ___brake_reactions[1];
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    trigger_t ___reverse;
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t* ___reverse_reactions[1];
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    trigger_t ___gear;
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t* ___gear_reactions[1];
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    trigger_t ___command;
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    reaction_t* ___command_reactions[1];
} carla_self_t;
void carlareaction_function_0(void* instance_args) {
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    carla_self_t* self = (carla_self_t*)instance_args;
    
    #pragma GCC diagnostic pop
    #line 63 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    char *argv[] = {(char*)"LFCarlaPublisher", NULL};
    rclcpp::init(1, argv);
    self->lf_carla_publisher = std::make_shared<LFCarlaPublisher>();        
        
}
void carlareaction_function_1(void* instance_args) {
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    carla_self_t* self = (carla_self_t*)instance_args;
    carla_throttle_t* throttle = self->__throttle;
    int throttle_width = self->__throttle__width;
    carla_steer_t* steer = self->__steer;
    int steer_width = self->__steer__width;
    carla_brake_t* brake = self->__brake;
    int brake_width = self->__brake__width;
    carla_reverse_t* reverse = self->__reverse;
    int reverse_width = self->__reverse__width;
    carla_gear_t* gear = self->__gear;
    int gear_width = self->__gear__width;
    carla_command_t* command = self->__command;
    int command_width = self->__command__width;
    #pragma GCC diagnostic pop
    #line 68 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    auto message = carla_msgs::msg::CarlaEgoVehicleControl();
    if (command->is_present) {
        message.throttle = command->value.throttle;
                message.steer = command->value.steer;
                message.brake = command->value.brake;
                message.reverse = command->value.reverse;
                message.gear = command->value.gear;
    } else {
                message.throttle = throttle->value;
                message.steer = steer->value;
                message.brake = brake->value;
                message.reverse = reverse->value;
                message.gear = gear->value;
    }
    self->lf_carla_publisher->publisher_->publish(message);
        
}
void carlareaction_function_2(void* instance_args) {
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    carla_self_t* self = (carla_self_t*)instance_args;
    
    #pragma GCC diagnostic pop
    #line 86 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // std::cout << "Executing shutdown reaction." << std::endl;
            rclcpp::shutdown();
        
}
carla_self_t* new_Carla() {
    carla_self_t* self = (carla_self_t*)calloc(1, sizeof(carla_self_t));
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Set input by default to an always absent default input.
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->__throttle = &self->__default__throttle;
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Set input by default to an always absent default input.
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->__steer = &self->__default__steer;
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Set input by default to an always absent default input.
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->__brake = &self->__default__brake;
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Set input by default to an always absent default input.
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->__reverse = &self->__default__reverse;
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Set input by default to an always absent default input.
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->__gear = &self->__default__gear;
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Set input by default to an always absent default input.
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->__command = &self->__default__command;
    #line 62 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_0.number = 0;
    #line 62 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_0.function = carlareaction_function_0;
    #line 62 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_0.self = self;
    #line 62 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_0.deadline_violation_handler = NULL;
    #line 62 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_0.STP_handler = NULL;
    #line 62 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_0.name = "?";
    #line 67 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_1.number = 1;
    #line 67 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_1.function = carlareaction_function_1;
    #line 67 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_1.self = self;
    #line 67 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_1.deadline_violation_handler = NULL;
    #line 67 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_1.STP_handler = NULL;
    #line 67 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_1.name = "?";
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_2.number = 2;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_2.function = carlareaction_function_2;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_2.self = self;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_2.deadline_violation_handler = NULL;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_2.STP_handler = NULL;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reaction_2.name = "?";
    self->___startup_reactions[0] = &self->___reaction_0;
    self->___startup.last = NULL;
    self->___startup.reactions = &self->___startup_reactions[0];
    self->___startup.number_of_reactions = 1;
    self->___startup.is_timer = false;
    self->___shutdown_reactions[0] = &self->___reaction_2;
    self->___shutdown.last = NULL;
    self->___shutdown.reactions = &self->___shutdown_reactions[0];
    self->___shutdown.number_of_reactions = 1;
    self->___shutdown.is_timer = false;
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___throttle.last = NULL;
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___throttle_reactions[0] = &self->___reaction_1;
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___throttle.reactions = &self->___throttle_reactions[0];
    #line 55 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___throttle.number_of_reactions = 1;
    self->___throttle.element_size = sizeof(float);
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___steer.last = NULL;
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___steer_reactions[0] = &self->___reaction_1;
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___steer.reactions = &self->___steer_reactions[0];
    #line 56 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___steer.number_of_reactions = 1;
    self->___steer.element_size = sizeof(float);
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___brake.last = NULL;
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___brake_reactions[0] = &self->___reaction_1;
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___brake.reactions = &self->___brake_reactions[0];
    #line 57 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___brake.number_of_reactions = 1;
    self->___brake.element_size = sizeof(float);
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reverse.last = NULL;
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reverse_reactions[0] = &self->___reaction_1;
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reverse.reactions = &self->___reverse_reactions[0];
    #line 58 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___reverse.number_of_reactions = 1;
    self->___reverse.element_size = sizeof(bool);
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___gear.last = NULL;
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___gear_reactions[0] = &self->___reaction_1;
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___gear.reactions = &self->___gear_reactions[0];
    #line 59 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___gear.number_of_reactions = 1;
    self->___gear.element_size = sizeof(int);
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___command.last = NULL;
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___command_reactions[0] = &self->___reaction_1;
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___command.reactions = &self->___command_reactions[0];
    #line 60 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    self->___command.number_of_reactions = 1;
    self->___command.element_size = sizeof(vehicle_command_t);
    return self;
}
void delete_Carla(carla_self_t* self) {
    if (self->___reaction_0.output_produced != NULL) {
        free(self->___reaction_0.output_produced);
    }
    if (self->___reaction_0.triggers != NULL) {
        free(self->___reaction_0.triggers);
    }
    if (self->___reaction_0.triggered_sizes != NULL) {
        free(self->___reaction_0.triggered_sizes);
    }
    if (self->___reaction_1.output_produced != NULL) {
        free(self->___reaction_1.output_produced);
    }
    if (self->___reaction_1.triggers != NULL) {
        free(self->___reaction_1.triggers);
    }
    if (self->___reaction_1.triggered_sizes != NULL) {
        free(self->___reaction_1.triggered_sizes);
    }
    if (self->___reaction_2.output_produced != NULL) {
        free(self->___reaction_2.output_produced);
    }
    if (self->___reaction_2.triggers != NULL) {
        free(self->___reaction_2.triggers);
    }
    if (self->___reaction_2.triggered_sizes != NULL) {
        free(self->___reaction_2.triggered_sizes);
    }
    for(int i = 0; i < self->___reaction_0.num_outputs; i++) {
        free(self->___reaction_0.triggers[i]);
    }
    for(int i = 0; i < self->___reaction_1.num_outputs; i++) {
        free(self->___reaction_1.triggers[i]);
    }
    for(int i = 0; i < self->___reaction_2.num_outputs; i++) {
        free(self->___reaction_2.triggers[i]);
    }
    free(self);
}
// =============== END reactor class Carla

// =============== START reactor class RSU
#line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
typedef struct {
#line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    request_message_t value;
#line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    bool is_present;
#line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int num_destinations;
#line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
} rsu_request_t;
#line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
typedef struct {
#line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    grant_message_t value;
#line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    bool is_present;
#line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int num_destinations;
#line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
} rsu_grant_t;
typedef struct {
    int bank_index;
    #line 131 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int num_entries;
    #line 132 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    double intersection_width;
    #line 135 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    double nominal_speed_in_intersection;
    #line 140 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    interval_t earliest_free;
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // Multiport input array will be malloc'd later.
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    rsu_request_t** __request;
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int __request__width;
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // Default input (in case it does not get connected)
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    rsu_request_t __default__request;
    #line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // Array of output ports.
    #line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    rsu_grant_t* __grant;
    #line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int __grant__width;
    #line 142 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    reaction_t ___reaction_0;
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    trigger_t ___request;
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    reaction_t* ___request_reactions[1];
} rsu_self_t;
void rsureaction_function_0(void* instance_args) {
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    rsu_self_t* self = (rsu_self_t*)instance_args;
    rsu_request_t** request = self->__request;
    int request_width = self->__request__width;
    int grant_width = self->__grant__width;
    rsu_grant_t* grant[grant_width];
    for(int i=0; i < grant_width; i++) {
         grant[i] = &(self->__grant[i]);
    }
    #pragma GCC diagnostic pop
    #line 143 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    for (int i = 0; i < self->num_entries; i++) {
                if (request[i]->is_present) {
            // Calculate the time it will take the approaching vehicle to
            // arrive at its current speed. Note that this is
            // time from the time the vehicle sends the message
            // according to the arriving vehicle's clock.
            double speed_in_m_per_sec = request[i]->value.speed * 1000.0 / 3600.0;
            double arrival_in = request[i]->value.distance / speed_in_m_per_sec;
            
            instant_t time_message_sent = get_logical_time();
            
            // Convert the time interval to nsec (it is seconds).
            interval_t arrival_time_ns = time_message_sent + (interval_t) (arrival_in * BILLION);
            
            grant_message_t response;
            if (arrival_time_ns >= self->earliest_free) {
                // Vehicle can maintain speed.
                response.target_speed = request[i]->value.speed;
                response.arrival_time = arrival_time_ns;
            } else {
                // Vehicle has to slow down and maybe stop.
                response.arrival_time = self->earliest_free;
                // Could be smarter than this, but just send the nominal speed in intersection.
                response.target_speed = self->nominal_speed_in_intersection;
            }
            SET(grant[i], response);
            // Update earliest free on the assumption that the vehicle
            // maintains its target speed (on average) within the intersection.
            interval_t time_in_intersection 
                    = (interval_t)(BILLION * self->intersection_width * 3600 
                        / (1000 * response.target_speed)
                    );
            self->earliest_free = response.arrival_time + time_in_intersection;
            
            info_print("*** Grant access to vehicle %d to enter at time %lld. Next available time is %lld",
                i,
                response.arrival_time - start_time,
                self->earliest_free - start_time
            );
        }
    }
        
}
rsu_self_t* new_RSU() {
    rsu_self_t* self = (rsu_self_t*)calloc(1, sizeof(rsu_self_t));
    #line 142 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.number = 0;
    #line 142 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.function = rsureaction_function_0;
    #line 142 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.self = self;
    #line 142 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.deadline_violation_handler = NULL;
    #line 142 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.STP_handler = NULL;
    #line 142 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.name = "?";
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___request.last = NULL;
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___request_reactions[0] = &self->___reaction_0;
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___request.reactions = &self->___request_reactions[0];
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___request.number_of_reactions = 1;
    self->___request.element_size = sizeof(request_message_t);
    return self;
}
void delete_RSU(rsu_self_t* self) {
    #line 137 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    free(self->__request);
    #line 138 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    free(self->__grant);
    if (self->___reaction_0.output_produced != NULL) {
        free(self->___reaction_0.output_produced);
    }
    if (self->___reaction_0.triggers != NULL) {
        free(self->___reaction_0.triggers);
    }
    if (self->___reaction_0.triggered_sizes != NULL) {
        free(self->___reaction_0.triggered_sizes);
    }
    for(int i = 0; i < self->___reaction_0.num_outputs; i++) {
        free(self->___reaction_0.triggers[i]);
    }
    free(self);
}
// =============== END reactor class RSU

// =============== START reactor class Vehicle
#line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
typedef struct {
#line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    grant_message_t value;
#line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    bool is_present;
#line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int num_destinations;
#line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
} vehicle_grant_t;
#line 83 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
typedef struct {
#line 83 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    request_message_t value;
#line 83 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    bool is_present;
#line 83 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int num_destinations;
#line 83 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
} vehicle_request_t;
#line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
typedef struct {
#line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    vehicle_command_t value;
#line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    bool is_present;
#line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int num_destinations;
#line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
} vehicle_to_vehicle_t;
#line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
typedef struct {
#line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    trigger_t* trigger;
#line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    bool is_present;
#line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    bool has_value;
#line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    lf_token_t* token;
#line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
} vehicle_delay_t;
typedef struct {
    int bank_index;
    #line 76 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    interval_t offset;
    #line 77 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    interval_t period;
    #line 78 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    double speed;
    #line 79 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    double distance;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    vehicle_delay_t __delay;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    vehicle_grant_t* __grant;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // width of -2 indicates that it is not a multiport.
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int __grant__width;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // Default input (in case it does not get connected)
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    vehicle_grant_t __default__grant;
    #line 83 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    vehicle_request_t __request;
    #line 83 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int __request__width;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    vehicle_to_vehicle_t __to_vehicle;
    #line 85 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    int __to_vehicle__width;
    #line 89 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    reaction_t ___reaction_0;
    #line 102 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    reaction_t ___reaction_1;
    #line 110 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    reaction_t ___reaction_2;
    trigger_t ___startup;
    reaction_t* ___startup_reactions[1];
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    trigger_t ___delay;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    reaction_t* ___delay_reactions[1];
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    trigger_t ___grant;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    reaction_t* ___grant_reactions[1];
} vehicle_self_t;
void vehiclereaction_function_0(void* instance_args) {
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    vehicle_self_t* self = (vehicle_self_t*)instance_args;
    vehicle_request_t* request = &self->__request;
    vehicle_delay_t* delay = &self->__delay;
    #pragma GCC diagnostic pop
    #line 90 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    if (timer_offsets[self->bank_index] == 0LL) {
                // Need to send a message at the start time.
                request_message_t message;
        message.speed = self->speed;
        message.distance = self->distance;
        SET(request, message);
        schedule(delay, timer_periods[self->bank_index]);
    } else {
           schedule(delay, timer_offsets[self->bank_index]);
    }
        
}
void vehiclereaction_function_1(void* instance_args) {
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    vehicle_self_t* self = (vehicle_self_t*)instance_args;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // Expose the action struct as a local variable whose name matches the action name.
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    vehicle_delay_t* delay = &self->__delay;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // Set the fields of the action struct to match the current trigger.
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    delay->is_present = (bool)self->___delay.status;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    delay->has_value = ((self->___delay.token) != NULL && (self->___delay.token)->value != NULL);
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    delay->token = (self->___delay.token);
    vehicle_request_t* request = &self->__request;
    #pragma GCC diagnostic pop
    #line 103 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    request_message_t message;
               message.speed = self->speed;
               message.distance = self->distance;
               SET(request, message);
               schedule(delay, timer_periods[self->bank_index]);
        
}
void vehiclereaction_function_2(void* instance_args) {
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    vehicle_self_t* self = (vehicle_self_t*)instance_args;
    vehicle_grant_t* grant = self->__grant;
    int grant_width = self->__grant__width;
    vehicle_to_vehicle_t* to_vehicle = &self->__to_vehicle;
    #pragma GCC diagnostic pop
    #line 111 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    float throttle = (100/grant->value.target_speed);
    vehicle_command_t cmd = {
        .throttle = throttle,
        .steer = 0,
        .brake = 0,
        .hand_brake = 0,
        .reverse = 0,
        .gear = 1,
        .manual_gear_shift = 0
    };
    SET(to_vehicle, cmd);
    
    info_print("Granted access at elapsed logical time %lld. Physical time is %lld",
        get_elapsed_logical_time(),
        get_elapsed_physical_time()
    );
        
}
vehicle_self_t* new_Vehicle() {
    vehicle_self_t* self = (vehicle_self_t*)calloc(1, sizeof(vehicle_self_t));
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->__delay.trigger = &self->___delay;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    // Set input by default to an always absent default input.
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->__grant = &self->__default__grant;
    #line 89 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.number = 0;
    #line 89 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.function = vehiclereaction_function_0;
    #line 89 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.self = self;
    #line 89 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.deadline_violation_handler = NULL;
    #line 89 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.STP_handler = NULL;
    #line 89 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_0.name = "?";
    #line 102 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_1.number = 1;
    #line 102 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_1.function = vehiclereaction_function_1;
    #line 102 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_1.self = self;
    #line 102 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_1.deadline_violation_handler = NULL;
    #line 102 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_1.STP_handler = NULL;
    #line 102 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_1.name = "?";
    #line 110 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_2.number = 2;
    #line 110 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_2.function = vehiclereaction_function_2;
    #line 110 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_2.self = self;
    #line 110 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_2.deadline_violation_handler = NULL;
    #line 110 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_2.STP_handler = NULL;
    #line 110 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___reaction_2.name = "?";
    self->___startup_reactions[0] = &self->___reaction_0;
    self->___startup.last = NULL;
    self->___startup.reactions = &self->___startup_reactions[0];
    self->___startup.number_of_reactions = 1;
    self->___startup.is_timer = false;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___delay.last = NULL;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___delay_reactions[0] = &self->___reaction_1;
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___delay.reactions = &self->___delay_reactions[0];
    #line 87 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___delay.number_of_reactions = 1;
    self->___delay.is_physical = false;
    self->___delay.element_size = 0;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___grant.last = NULL;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___grant_reactions[0] = &self->___reaction_2;
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___grant.reactions = &self->___grant_reactions[0];
    #line 81 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Intersection.lf"
    self->___grant.number_of_reactions = 1;
    self->___grant.element_size = sizeof(grant_message_t);
    return self;
}
void delete_Vehicle(vehicle_self_t* self) {
    if (self->___reaction_0.output_produced != NULL) {
        free(self->___reaction_0.output_produced);
    }
    if (self->___reaction_0.triggers != NULL) {
        free(self->___reaction_0.triggers);
    }
    if (self->___reaction_0.triggered_sizes != NULL) {
        free(self->___reaction_0.triggered_sizes);
    }
    if (self->___reaction_1.output_produced != NULL) {
        free(self->___reaction_1.output_produced);
    }
    if (self->___reaction_1.triggers != NULL) {
        free(self->___reaction_1.triggers);
    }
    if (self->___reaction_1.triggered_sizes != NULL) {
        free(self->___reaction_1.triggered_sizes);
    }
    if (self->___reaction_2.output_produced != NULL) {
        free(self->___reaction_2.output_produced);
    }
    if (self->___reaction_2.triggers != NULL) {
        free(self->___reaction_2.triggers);
    }
    if (self->___reaction_2.triggered_sizes != NULL) {
        free(self->___reaction_2.triggered_sizes);
    }
    for(int i = 0; i < self->___reaction_0.num_outputs; i++) {
        free(self->___reaction_0.triggers[i]);
    }
    for(int i = 0; i < self->___reaction_1.num_outputs; i++) {
        free(self->___reaction_1.triggers[i]);
    }
    for(int i = 0; i < self->___reaction_2.num_outputs; i++) {
        free(self->___reaction_2.triggers[i]);
    }
    free(self);
}
// =============== END reactor class Vehicle

// =============== START reactor class VehicleInterface
#line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
typedef struct {
#line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    vehicle_command_t value;
#line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    bool is_present;
#line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_destinations;
#line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
} vehicleinterface_to_vehicle_t;
typedef struct {
    int bank_index;
    #line 23 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_entries;
    #line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    // Array of output ports.
    #line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    vehicleinterface_to_vehicle_t* __to_vehicle;
    #line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int __to_vehicle__width;
} vehicleinterface_self_t;
vehicleinterface_self_t* new_VehicleInterface() {
    vehicleinterface_self_t* self = (vehicleinterface_self_t*)calloc(1, sizeof(vehicleinterface_self_t));
    return self;
}
void delete_VehicleInterface(vehicleinterface_self_t* self) {
    #line 24 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    free(self->__to_vehicle);
    free(self);
}
// =============== END reactor class VehicleInterface

// =============== START reactor class CarlaIntersection
typedef struct {
    int bank_index;
    #line 91 "file:/home/soroush/lingua-franca-master/git/lingua-franca/experimental/src/Intersection/Carla/CarlaIntersection.lf"
    int num_entries;
} carlaintersection_self_t;
carlaintersection_self_t* new_CarlaIntersection() {
    carlaintersection_self_t* self = (carlaintersection_self_t*)calloc(1, sizeof(carlaintersection_self_t));
    return self;
}
void delete_CarlaIntersection(carlaintersection_self_t* self) {
    free(self);
}
// =============== END reactor class CarlaIntersection

char* __default_argv[] = {"CarlaIntersection", "-o", "5", "sec"};
void __set_default_command_line_options() {
    default_argc = 4;
    default_argv = __default_argv;
}
// Array of pointers to timer triggers to be scheduled in __initialize_timers().
trigger_t** __timer_triggers = NULL;
int __timer_triggers_size = 0;
// Array of pointers to timer triggers to be scheduled in __trigger_startup_reactions().
reaction_t* __startup_reactions[2];
int __startup_reactions_size = 2;
// Array of pointers to shutdown triggers.
reaction_t* __shutdown_reactions[1];
int __shutdown_reactions_size = 1;
trigger_t* __action_for_port(int port_id) {
    return NULL;
}
void __initialize_trigger_objects() {
    __tokens_with_ref_count_size = 1;
    __tokens_with_ref_count = (token_present_t*)malloc(1 * sizeof(token_present_t));
    // Create the array that will contain pointers to is_present fields to reset on each step.
    __is_present_fields_size = 5;
    __is_present_fields = (bool**)malloc(5 * sizeof(bool*));
    
    // ************* Instance CarlaIntersection of class CarlaIntersection
    carlaintersection_self_t* carlaintersection_self = new_CarlaIntersection();
    //***** Start initializing CarlaIntersection
    carlaintersection_self->num_entries = 1; 
    // ************* Instance CarlaIntersection.carla of class Carla
    carla_self_t* carlaintersection_carla_self[1];
    // ************* Instance CarlaIntersection.carla[0] of class Carla
    carlaintersection_carla_self[0] = new_Carla();
    //***** Start initializing CarlaIntersection.carla[0]
    __startup_reactions[0] = &carlaintersection_carla_self[0]->___reaction_0;
    __shutdown_reactions[0] = &carlaintersection_carla_self[0]->___reaction_2;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_carla_self[0]->__throttle__width = -2;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_carla_self[0]->__steer__width = -2;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_carla_self[0]->__brake__width = -2;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_carla_self[0]->__reverse__width = -2;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_carla_self[0]->__gear__width = -2;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_carla_self[0]->__command__width = -2;
    //***** End initializing CarlaIntersection.carla[0]
    // ************* Instance CarlaIntersection.vehicleI of class VehicleInterface
    vehicleinterface_self_t* carlaintersection_vehiclei_self = new_VehicleInterface();
    //***** Start initializing CarlaIntersection.vehicleI
    carlaintersection_vehiclei_self->num_entries = 1; 
    carlaintersection_vehiclei_self->__to_vehicle__width = carlaintersection_vehiclei_self->num_entries;
    // Allocate memory for multiport output.
    carlaintersection_vehiclei_self->__to_vehicle = (vehicleinterface_to_vehicle_t*)malloc(sizeof(vehicleinterface_to_vehicle_t) * carlaintersection_vehiclei_self->__to_vehicle__width); 
    // ************* Instance CarlaIntersection.vehicleI.vehicles of class Vehicle
    vehicle_self_t* carlaintersection_vehiclei_vehicles_self[1];
    // ************* Instance CarlaIntersection.vehicleI.vehicles[0] of class Vehicle
    carlaintersection_vehiclei_vehicles_self[0] = new_Vehicle();
    //***** Start initializing CarlaIntersection.vehicleI.vehicles[0]
    carlaintersection_vehiclei_vehicles_self[0]->offset = 0; 
    carlaintersection_vehiclei_vehicles_self[0]->period = SEC(1); 
    carlaintersection_vehiclei_vehicles_self[0]->speed = 42.0; 
    carlaintersection_vehiclei_vehicles_self[0]->distance = 42.0; 
    // width of -2 indicates that it is not a multiport.
    carlaintersection_vehiclei_vehicles_self[0]->__request__width = -2;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_vehiclei_vehicles_self[0]->__to_vehicle__width = -2;
    __startup_reactions[1] = &carlaintersection_vehiclei_vehicles_self[0]->___reaction_0;
    // width of -2 indicates that it is not a multiport.
    carlaintersection_vehiclei_vehicles_self[0]->__grant__width = -2;
    carlaintersection_vehiclei_vehicles_self[0]->___delay.offset = 0;
    carlaintersection_vehiclei_vehicles_self[0]->___delay.period = -1;
    carlaintersection_vehiclei_vehicles_self[0]->___delay.token = __create_token(0);
    carlaintersection_vehiclei_vehicles_self[0]->___delay.status = absent;
    __tokens_with_ref_count[0].token
            = &carlaintersection_vehiclei_vehicles_self[0]->___delay.token;
    __tokens_with_ref_count[0].status
            = &carlaintersection_vehiclei_vehicles_self[0]->___delay.status;
    __tokens_with_ref_count[0].reset_is_present = true;
    //***** End initializing CarlaIntersection.vehicleI.vehicles[0]
    // ************* Instance CarlaIntersection.vehicleI.rsu of class RSU
    rsu_self_t* carlaintersection_vehiclei_rsu_self = new_RSU();
    //***** Start initializing CarlaIntersection.vehicleI.rsu
    carlaintersection_vehiclei_rsu_self->num_entries = 1; 
    carlaintersection_vehiclei_rsu_self->intersection_width = 42.0; 
    carlaintersection_vehiclei_rsu_self->nominal_speed_in_intersection = 10.0; 
    carlaintersection_vehiclei_rsu_self->__grant__width = carlaintersection_vehiclei_rsu_self->num_entries;
    // Allocate memory for multiport output.
    carlaintersection_vehiclei_rsu_self->__grant = (rsu_grant_t*)malloc(sizeof(rsu_grant_t) * carlaintersection_vehiclei_rsu_self->__grant__width); 
    carlaintersection_vehiclei_rsu_self->__request__width = carlaintersection_vehiclei_rsu_self->num_entries;
    // Allocate memory for multiport inputs.
    carlaintersection_vehiclei_rsu_self->__request = (rsu_request_t**)malloc(sizeof(rsu_request_t*) * carlaintersection_vehiclei_rsu_self->__request__width); 
    // Set inputs by default to an always absent default input.
    for (int i = 0; i < carlaintersection_vehiclei_rsu_self->__request__width; i++) {
        carlaintersection_vehiclei_rsu_self->__request[i] = &carlaintersection_vehiclei_rsu_self->__default__request;
    }
    carlaintersection_vehiclei_rsu_self->earliest_free = 0;
    //***** End initializing CarlaIntersection.vehicleI.rsu
    //***** End initializing CarlaIntersection.vehicleI
    //***** End initializing CarlaIntersection
    // Populate arrays of trigger pointers.
    carlaintersection_self->bank_index = 0;
    carlaintersection_carla_self[0]->bank_index = 0;
    // Total number of outputs produced by the reaction.
    carlaintersection_carla_self[0]->___reaction_0.num_outputs = 0;
    // Allocate arrays for triggering downstream reactions.
    if (carlaintersection_carla_self[0]->___reaction_0.num_outputs > 0) {
        carlaintersection_carla_self[0]->___reaction_0.output_produced 
                = (bool**)malloc(sizeof(bool*) * carlaintersection_carla_self[0]->___reaction_0.num_outputs);
        carlaintersection_carla_self[0]->___reaction_0.triggers 
                = (trigger_t***)malloc(sizeof(trigger_t**) * carlaintersection_carla_self[0]->___reaction_0.num_outputs);
        carlaintersection_carla_self[0]->___reaction_0.triggered_sizes 
                = (int*)malloc(sizeof(int) * carlaintersection_carla_self[0]->___reaction_0.num_outputs);
    }
    // Initialize the output_produced array.
    // Total number of outputs produced by the reaction.
    carlaintersection_carla_self[0]->___reaction_1.num_outputs = 0;
    // Allocate arrays for triggering downstream reactions.
    if (carlaintersection_carla_self[0]->___reaction_1.num_outputs > 0) {
        carlaintersection_carla_self[0]->___reaction_1.output_produced 
                = (bool**)malloc(sizeof(bool*) * carlaintersection_carla_self[0]->___reaction_1.num_outputs);
        carlaintersection_carla_self[0]->___reaction_1.triggers 
                = (trigger_t***)malloc(sizeof(trigger_t**) * carlaintersection_carla_self[0]->___reaction_1.num_outputs);
        carlaintersection_carla_self[0]->___reaction_1.triggered_sizes 
                = (int*)malloc(sizeof(int) * carlaintersection_carla_self[0]->___reaction_1.num_outputs);
    }
    // Initialize the output_produced array.
    // Total number of outputs produced by the reaction.
    carlaintersection_carla_self[0]->___reaction_2.num_outputs = 0;
    // Allocate arrays for triggering downstream reactions.
    if (carlaintersection_carla_self[0]->___reaction_2.num_outputs > 0) {
        carlaintersection_carla_self[0]->___reaction_2.output_produced 
                = (bool**)malloc(sizeof(bool*) * carlaintersection_carla_self[0]->___reaction_2.num_outputs);
        carlaintersection_carla_self[0]->___reaction_2.triggers 
                = (trigger_t***)malloc(sizeof(trigger_t**) * carlaintersection_carla_self[0]->___reaction_2.num_outputs);
        carlaintersection_carla_self[0]->___reaction_2.triggered_sizes 
                = (int*)malloc(sizeof(int) * carlaintersection_carla_self[0]->___reaction_2.num_outputs);
    }
    // Initialize the output_produced array.
    // Reaction 0 of CarlaIntersection.carla[0] does not depend on one maximal upstream reaction.
    carlaintersection_carla_self[0]->___reaction_0.last_enabling_reaction = NULL;
    // Reaction 1 of CarlaIntersection.carla[0] does not depend on one maximal upstream reaction.
    carlaintersection_carla_self[0]->___reaction_1.last_enabling_reaction = NULL;
    // Reaction 2 of CarlaIntersection.carla[0] depends on one maximal upstream reaction.
    carlaintersection_carla_self[0]->___reaction_2.last_enabling_reaction = &(carlaintersection_carla_self[0]->___reaction_1);
    carlaintersection_vehiclei_self->bank_index = 0;
    carlaintersection_vehiclei_self->__to_vehicle[0].num_destinations
    = 1;
    carlaintersection_vehiclei_vehicles_self[0]->bank_index = 0;
    // Total number of outputs produced by the reaction.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.num_outputs = 1;
    // Allocate arrays for triggering downstream reactions.
    if (carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.num_outputs > 0) {
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.output_produced 
                = (bool**)malloc(sizeof(bool*) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.num_outputs);
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.triggers 
                = (trigger_t***)malloc(sizeof(trigger_t**) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.num_outputs);
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.triggered_sizes 
                = (int*)malloc(sizeof(int) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.num_outputs);
    }
    // Initialize the output_produced array.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.output_produced[0]
    = &carlaintersection_vehiclei_vehicles_self[0]->__request.is_present
    ;
    // Total number of outputs produced by the reaction.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.num_outputs = 1;
    // Allocate arrays for triggering downstream reactions.
    if (carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.num_outputs > 0) {
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.output_produced 
                = (bool**)malloc(sizeof(bool*) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.num_outputs);
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.triggers 
                = (trigger_t***)malloc(sizeof(trigger_t**) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.num_outputs);
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.triggered_sizes 
                = (int*)malloc(sizeof(int) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.num_outputs);
    }
    // Initialize the output_produced array.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.output_produced[0]
    = &carlaintersection_vehiclei_vehicles_self[0]->__request.is_present
    ;
    // Total number of outputs produced by the reaction.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.num_outputs = 1;
    // Allocate arrays for triggering downstream reactions.
    if (carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.num_outputs > 0) {
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.output_produced 
                = (bool**)malloc(sizeof(bool*) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.num_outputs);
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.triggers 
                = (trigger_t***)malloc(sizeof(trigger_t**) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.num_outputs);
        carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.triggered_sizes 
                = (int*)malloc(sizeof(int) * carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.num_outputs);
    }
    // Initialize the output_produced array.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.output_produced[0]
    = &carlaintersection_vehiclei_vehicles_self[0]->__to_vehicle.is_present
    ;
    // Reaction 0 of CarlaIntersection.vehicleI.vehicles[0] does not depend on one maximal upstream reaction.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.last_enabling_reaction = NULL;
    // Reaction 0 of CarlaIntersection.vehicleI.vehicles[0] triggers 1
    // downstream reactions through port CarlaIntersection.vehicleI.vehicles[0].request.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.triggered_sizes[0] = 1;
    // For reaction 0 of CarlaIntersection.vehicleI.vehicles[0], allocate an
    // array of trigger pointers for downstream reactions through port CarlaIntersection.vehicleI.vehicles[0].request
    trigger_t** carlaintersection_vehiclei_vehicles_0__0_0 = (trigger_t**)malloc(1 * sizeof(trigger_t*));
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.triggers[0] = carlaintersection_vehiclei_vehicles_0__0_0;
    // Point to destination port CarlaIntersection.vehicleI.rsu.request[0]'s trigger struct.
    carlaintersection_vehiclei_vehicles_0__0_0[0] = &carlaintersection_vehiclei_rsu_self->___request;
    // Reaction 1 of CarlaIntersection.vehicleI.vehicles[0] depends on one maximal upstream reaction.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.last_enabling_reaction = &(carlaintersection_vehiclei_vehicles_self[0]->___reaction_0);
    // Reaction 1 of CarlaIntersection.vehicleI.vehicles[0] triggers 1
    // downstream reactions through port CarlaIntersection.vehicleI.vehicles[0].request.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.triggered_sizes[0] = 1;
    // For reaction 1 of CarlaIntersection.vehicleI.vehicles[0], allocate an
    // array of trigger pointers for downstream reactions through port CarlaIntersection.vehicleI.vehicles[0].request
    trigger_t** carlaintersection_vehiclei_vehicles_0__1_0 = (trigger_t**)malloc(1 * sizeof(trigger_t*));
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.triggers[0] = carlaintersection_vehiclei_vehicles_0__1_0;
    // Point to destination port CarlaIntersection.vehicleI.rsu.request[0]'s trigger struct.
    carlaintersection_vehiclei_vehicles_0__1_0[0] = &carlaintersection_vehiclei_rsu_self->___request;
    // Reaction 2 of CarlaIntersection.vehicleI.vehicles[0] depends on one maximal upstream reaction.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.last_enabling_reaction = &(carlaintersection_vehiclei_rsu_self->___reaction_0);
    // Reaction 2 of CarlaIntersection.vehicleI.vehicles[0] triggers 2
    // downstream reactions through port CarlaIntersection.vehicleI.vehicles[0].to_vehicle.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.triggered_sizes[0] = 2;
    // For reaction 2 of CarlaIntersection.vehicleI.vehicles[0], allocate an
    // array of trigger pointers for downstream reactions through port CarlaIntersection.vehicleI.vehicles[0].to_vehicle
    trigger_t** carlaintersection_vehiclei_vehicles_0__2_0 = (trigger_t**)malloc(2 * sizeof(trigger_t*));
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.triggers[0] = carlaintersection_vehiclei_vehicles_0__2_0;
    // Destination port CarlaIntersection.vehicleI.to_vehicle[0] itself has no reactions.
    carlaintersection_vehiclei_vehicles_0__2_0[0] = NULL;
    // Point to destination port CarlaIntersection.carla[0].command's trigger struct.
    carlaintersection_vehiclei_vehicles_0__2_0[1] = &carlaintersection_carla_self[0]->___command;
    carlaintersection_vehiclei_vehicles_self[0]->__request.num_destinations
    = 1;
    carlaintersection_vehiclei_vehicles_self[0]->__to_vehicle.num_destinations
    = 1;
    carlaintersection_vehiclei_rsu_self->bank_index = 0;
    carlaintersection_vehiclei_rsu_self->__grant__width = 1;
    // Allocate memory to store output of reaction.
    carlaintersection_vehiclei_rsu_self->__grant = (rsu_grant_t*)malloc(sizeof(rsu_grant_t) 
        * carlaintersection_vehiclei_rsu_self->__grant__width); 
    // Total number of outputs produced by the reaction.
    carlaintersection_vehiclei_rsu_self->___reaction_0.num_outputs = 1;
    // Allocate arrays for triggering downstream reactions.
    if (carlaintersection_vehiclei_rsu_self->___reaction_0.num_outputs > 0) {
        carlaintersection_vehiclei_rsu_self->___reaction_0.output_produced 
                = (bool**)malloc(sizeof(bool*) * carlaintersection_vehiclei_rsu_self->___reaction_0.num_outputs);
        carlaintersection_vehiclei_rsu_self->___reaction_0.triggers 
                = (trigger_t***)malloc(sizeof(trigger_t**) * carlaintersection_vehiclei_rsu_self->___reaction_0.num_outputs);
        carlaintersection_vehiclei_rsu_self->___reaction_0.triggered_sizes 
                = (int*)malloc(sizeof(int) * carlaintersection_vehiclei_rsu_self->___reaction_0.num_outputs);
    }
    // Initialize the output_produced array.
    for (int i = 0; i < 1; i++) {
        carlaintersection_vehiclei_rsu_self->___reaction_0.output_produced[0 + i]
                = &carlaintersection_vehiclei_rsu_self->__grant[i].is_present
                ;
    }
    // Reaction 0 of CarlaIntersection.vehicleI.rsu depends on one maximal upstream reaction.
    carlaintersection_vehiclei_rsu_self->___reaction_0.last_enabling_reaction = &(carlaintersection_vehiclei_vehicles_self[0]->___reaction_1);
    // Reaction 0 of CarlaIntersection.vehicleI.rsu triggers 1
    // downstream reactions through port CarlaIntersection.vehicleI.rsu.grant[0].
    carlaintersection_vehiclei_rsu_self->___reaction_0.triggered_sizes[0] = 1;
    // For reaction 0 of CarlaIntersection.vehicleI.rsu, allocate an
    // array of trigger pointers for downstream reactions through port CarlaIntersection.vehicleI.rsu.grant[0]
    trigger_t** carlaintersection_vehiclei_rsu_0_0 = (trigger_t**)malloc(1 * sizeof(trigger_t*));
    carlaintersection_vehiclei_rsu_self->___reaction_0.triggers[0] = carlaintersection_vehiclei_rsu_0_0;
    // Point to destination port CarlaIntersection.vehicleI.vehicles[0].grant's trigger struct.
    carlaintersection_vehiclei_rsu_0_0[0] = &carlaintersection_vehiclei_vehicles_self[0]->___grant;
    carlaintersection_vehiclei_rsu_self->__grant[0].num_destinations
    = 1;
    // doDeferredInitialize
    // Connect inputs and outputs for reactor CarlaIntersection.
    // Connect CarlaIntersection.vehicleI.to_vehicle[0] (eventual source is CarlaIntersection.vehicleI.vehicles[0].to_vehicle) to input port CarlaIntersection.carla[0].command
    carlaintersection_carla_self[0]->__command = (carla_command_t*)&carlaintersection_vehiclei_vehicles_self[0]->__to_vehicle;
    // Connect inputs and outputs for reactor CarlaIntersection.carla.
    // END Connect inputs and outputs for reactor CarlaIntersection.carla.
    // Connect inputs and outputs for reactor CarlaIntersection.carla[0].
    // END Connect inputs and outputs for reactor CarlaIntersection.carla[0].
    // Connect inputs and outputs for reactor CarlaIntersection.vehicleI.
    // Connect CarlaIntersection.vehicleI.vehicles[0].request to input port CarlaIntersection.vehicleI.rsu.request[0]
    carlaintersection_vehiclei_rsu_self->__request[0] = (rsu_request_t*)&carlaintersection_vehiclei_vehicles_self[0]->__request;
    // Connect CarlaIntersection.vehicleI.rsu.grant[0] to input port CarlaIntersection.vehicleI.vehicles[0].grant
    carlaintersection_vehiclei_vehicles_self[0]->__grant = (vehicle_grant_t*)&carlaintersection_vehiclei_rsu_self->__grant[0];
    // Connect inputs and outputs for reactor CarlaIntersection.vehicleI.vehicles.
    // END Connect inputs and outputs for reactor CarlaIntersection.vehicleI.vehicles.
    // Connect inputs and outputs for reactor CarlaIntersection.vehicleI.vehicles[0].
    // END Connect inputs and outputs for reactor CarlaIntersection.vehicleI.vehicles[0].
    // Connect inputs and outputs for reactor CarlaIntersection.vehicleI.rsu.
    // END Connect inputs and outputs for reactor CarlaIntersection.vehicleI.rsu.
    // END Connect inputs and outputs for reactor CarlaIntersection.vehicleI.
    // END Connect inputs and outputs for reactor CarlaIntersection.
    // Add action CarlaIntersection.vehicleI.vehicles[0].delay to array of is_present fields.
    __is_present_fields[0] 
            = &carlaintersection_vehiclei_vehicles_self[0]->__delay.is_present;
    // Add port CarlaIntersection.vehicleI.vehicles[0].request to array of is_present fields.
    __is_present_fields[1] = &carlaintersection_vehiclei_vehicles_self[0]->__request.is_present
    ;
    // Add port CarlaIntersection.vehicleI.vehicles[0].to_vehicle to array of is_present fields.
    __is_present_fields[2] = &carlaintersection_vehiclei_vehicles_self[0]->__to_vehicle.is_present
    ;
    // Add port CarlaIntersection.vehicleI.rsu.grant to array of is_present fields.
    __is_present_fields[3] = &carlaintersection_vehiclei_rsu_self->__grant[0].is_present
    ;
    // Add port CarlaIntersection.vehicleI.to_vehicle to array of is_present fields.
    __is_present_fields[4] = &carlaintersection_vehiclei_self->__to_vehicle[0].is_present
    ;
    carlaintersection_carla_self[0]->___reaction_0.chain_id = 8;
    // index is the OR of level 0 and 
    // deadline 140737488355327 shifted left 16 bits.
    carlaintersection_carla_self[0]->___reaction_0.index = 0x7fffffffffff0000LL;
    carlaintersection_carla_self[0]->___reaction_1.chain_id = 15;
    // index is the OR of level 4 and 
    // deadline 140737488355327 shifted left 16 bits.
    carlaintersection_carla_self[0]->___reaction_1.index = 0x7fffffffffff0004LL;
    carlaintersection_carla_self[0]->___reaction_2.chain_id = 15;
    // index is the OR of level 5 and 
    // deadline 140737488355327 shifted left 16 bits.
    carlaintersection_carla_self[0]->___reaction_2.index = 0x7fffffffffff0005LL;
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.chain_id = 7;
    // index is the OR of level 0 and 
    // deadline 140737488355327 shifted left 16 bits.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_0.index = 0x7fffffffffff0000LL;
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.chain_id = 5;
    // index is the OR of level 1 and 
    // deadline 140737488355327 shifted left 16 bits.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_1.index = 0x7fffffffffff0001LL;
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.chain_id = 7;
    // index is the OR of level 3 and 
    // deadline 140737488355327 shifted left 16 bits.
    carlaintersection_vehiclei_vehicles_self[0]->___reaction_2.index = 0x7fffffffffff0003LL;
    carlaintersection_vehiclei_rsu_self->___reaction_0.chain_id = 3;
    // index is the OR of level 2 and 
    // deadline 140737488355327 shifted left 16 bits.
    carlaintersection_vehiclei_rsu_self->___reaction_0.index = 0x7fffffffffff0002LL;
    calculate_epoch_offset();
}
void __trigger_startup_reactions() {
    
    for (int i = 0; i < __startup_reactions_size; i++) {
        if (__startup_reactions[i] != NULL) {
            _lf_enqueue_reaction(__startup_reactions[i]);
        }
    }
}
void __initialize_timers() {
}
void logical_tag_complete(tag_t tag_to_send) {
}
bool __trigger_shutdown_reactions() {                          
    for (int i = 0; i < __shutdown_reactions_size; i++) {
        if (__shutdown_reactions[i] != NULL) {
            _lf_enqueue_reaction(__shutdown_reactions[i]);
        }
    }
    // Return true if there are shutdown reactions.
    return (__shutdown_reactions_size > 0);
}
void terminate_execution() {}
