target Cpp {
    keepalive: true,
    cmake-include: "threads.cmake"
};

reactor BrakingAssistant {
	output trigger_brake: void;
	logical action brake_condition;
	timer p(500msecs, 20msecs);
	
	state counter: int(0);
	
//	reaction(startup) -> brake_condition {=
//        brake_condition.schedule(5s);
//    =}
    
//    reaction(brake_condition) -> trigger_brake {=
//		std::cout << "[computer] Dangerous condition detected: Initializing braking - " << get_physical_time() << std::endl;
//		trigger_brake.set();
//	=}

	reaction(p) -> trigger_brake {=
        // processing takes some time
 		std::this_thread::sleep_for(10ms);
 		
        if (counter % 10 == 0) {
            trigger_brake.set();
        }
      	counter++;  
    =}
}

reactor Brake {
    public preamble {=
        #include <thread>
    =}

    physical action braking_pedal;
	input brake_assistant: void;
	
    state thread:{=std::thread=};
    
    reaction(startup) -> braking_pedal {=
        this->thread = std::thread([this] () {
            using namespace std::chrono_literals;

			while (true) {
				// delay the braking a bit
				std::this_thread::sleep_for(1005ms);
				std::cout << "[manual] Emergency braking started - " << get_physical_time() << std::endl;
				braking_pedal.schedule(0ms);
				std::cout << "[manual] Started braking - " << get_physical_time() << std::endl;
				
			}
        });
    =}
	
	reaction(brake_assistant) {=
        std::cout << "[system] Brake triggered - " << get_physical_time() << std::endl;
        std::cout << "[system] source: assistant" << std::endl;
    =} deadline (15msecs) {=
        std::cout << "[error] Deadline on automatic braking violated - " << get_physical_time() << std::endl;
    =}

	reaction(braking_pedal) {=
        std::cout << "[system] Brake triggered - " << get_physical_time() << std::endl;
        std::cout << "[system] source: manual" << std::endl;
    =} deadline (3msecs) {=
        std::cout << "[error] Deadline on manual braking violated - " << get_physical_time() << std::endl;
    =}
    
    reaction(shutdown) {=
        thread.join();
    =}
}

main reactor {
	assistant = new BrakingAssistant();
	brake = new Brake();
	assistant.trigger_brake -> brake.brake_assistant;
}
