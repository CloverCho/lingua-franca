/**
 * Ptolemy II Example for Modes.
 * An SDF model where the ModalModel requires more than one token
 * on its input in order to fire.
 * http://ptolemy.org/systems/models/modal/ModalSDF/index.html
 * 
 * @author Alexander Schulz-Rosengarten
 */
target Python{
    threads: 0
};

reactor Sinewave(sample_rate(125 usec), frequency(440), phase(0)) {
    output data;
    
    timer rate(0, sample_rate);
 
    state ramp({=self.itertools.count(0)=})
    
    preamble {=
        import math
        import itertools
    =}
    
    reaction(rate) -> data {=
        x = next(self.ramp) * ((self.frequency * 2 * self.math.pi) * (self.sample_rate / SEC(1))) + self.phase
        #print("Sinewave (%f, %f)" % (x, self.math.sin(x)))
        data.set(self.math.sin(x))
    =}
}

reactor Processor(sample_size(10)) {
    input data;
    output out;
    
    state sample({=[None] * self.sample_size=});
    state count(0);
    state active_mode(0);
    
    // This action only mimic the Ptolemy structure
    logical action processAVG

    /** @label Collect */
    reaction(data) -> processAVG {=
        if self.active_mode == 0:
            self.sample[self.count] = data.value
            self.count += 1
            if self.count == self.sample_size:
                self.count = 0
                processAVG.schedule(0)
    =}
    
    /** @label Process and Transition */
    reaction(processAVG) -> out {=
        if self.active_mode == 0:
            #print("Processing: ", self.sample)
            out.set(sum(self.sample) / self.sample_size)
            # Transition to MAX
            self.active_mode = 1
    =}

    // This action only mimic the Ptolemy structure
    logical action processMAX

    /** @label Collect */
    reaction(data) -> processMAX {=
        if self.active_mode == 1:
            self.sample[self.count] = data.value
            self.count += 1
            if self.count == self.sample_size:
                self.count = 0
                processMAX.schedule(0)
    =}
    
    /** @label Process and Transition */
    reaction(processMAX) -> out {=
        if self.active_mode == 1:
            #print("Processing: ", self.sample)
            out.set(max(self.sample))
            # Transition to MAX
            self.active_mode = 0
    =}
}

reactor Plotter {
    input data;
    
    state plot_data({=[]=})
    
    preamble {=
        import matplotlib.pyplot as plt
    =}
    
    reaction(startup) {=
        self.plt.ion()
        self.plt.title("Plot")
        
        # No idea why multiple draws are required but it works this way 
        self.plt.draw()
        self.plt.pause(0.00000001)
        self.plt.draw()
        self.plt.pause(0.00000001)
    =}
    
    reaction(data) {=
        #print("Plotting ", data.value)
        self.plot_data.append(data.value)
        self.plt.stem(self.plot_data)
        
        # No idea why multiple draws are required but it works this way 
        self.plt.draw()
        self.plt.pause(0.00000001)
        self.plt.draw()
        self.plt.pause(0.00000001)
    =}
}

main reactor {
    s = new Sinewave(sample_rate = 125 msec, frequency = 0.44)
    m = new Processor()
    p = new Plotter()
    s.data -> m.data
    m.out -> p.data
}
