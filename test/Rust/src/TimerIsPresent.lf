// Tests the is_present function for timers.
target Rust {
    timeout: 7 msec
};

main reactor {

    timer a(0, 5 msec);
    timer b(1 msec, 5 msec);
    timer c(1 msec);

    state success: bool(false);
    state tick: u32(0);

    reaction(startup, a, b, c) {=
        match self.tick {
        0 => { // startup
            ctx.assert_tag_eq(Duration::from_millis(0), 0);
            assert!(ctx.is_present(a));
            assert!(!ctx.is_present(b));
            assert!(!ctx.is_present(c));
        },
        1 => { // 1 msec
            ctx.assert_tag_eq(Duration::from_millis(1), 0);
            assert!(!ctx.is_present(a));
            assert!(ctx.is_present(b));
            assert!(ctx.is_present(c));
        },
        2 => { // 5 msec (a triggers)
            ctx.assert_tag_eq(Duration::from_millis(5), 0);
            assert!(ctx.is_present(a));
            assert!(!ctx.is_present(b));
            assert!(!ctx.is_present(c));
        },
        3 => { // 6 msec (b triggers)
            ctx.assert_tag_eq(Duration::from_millis(6), 0);
            assert!(!ctx.is_present(a));
            assert!(ctx.is_present(b));
            assert!(!ctx.is_present(c));
            self.success = true;
        },
        _ => {
            unreachable!("unexpected reaction invocation");
        }
        }
        self.tick += 1;
    =}
    reaction(shutdown) {=
        assert!(self.success);
        println!("success");
    =}
}
