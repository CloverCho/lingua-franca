// Test logical action with delay.
target Rust;

main reactor ActionValues {
    state r1done: bool(false);
    state r2done: bool(false);
    logical action act(100 msec): i32;

    reaction(startup) -> act {=
        ctx.schedule_with_v(act, Some(100), Asap); // scheduled in 100 ms
        // scheduled in 150 ms, value is overwritten
        ctx.schedule_with_v(act, Some(-100), AfterMillis(50));
    =}

    reaction(act) {=
        let elapsed_logical = ctx.get_elapsed_logical_time();

        println!("At {}, received {:?}", ctx.display_tag(ctx.get_logical_time()), ctx.get(act));

        if elapsed_logical == Duration::from_millis(100) {
            assert_eq!(Some(100), ctx.get(act));
            self.r1done = true;
        } else {
            assert_eq!(elapsed_logical, Duration::from_millis(150));
            assert_eq!(Some(-100), ctx.get(act));
            self.r2done = true;
        }
    =}

    reaction (shutdown) {=
       assert!(self.r1done && self.r2done);
       println!("Success")
    =}
}
