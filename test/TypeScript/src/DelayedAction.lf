target TypeScript{
    timeout : 5 sec
};
main reactor DelayedAction {
    timer t(0, 1 sec);
    logical action a;
    state count:number(0);
    reaction(t) -> a {=
        actions.a.schedule(new UnitBasedTimeValue(100, TimeUnit.msec), null);
    =}
    
    reaction(a) {=
        let elapsedLogical = util.getElapsedLogicalTime();
        let elapsedPhysical = util.getElapsedPhysicalTime();
        console.log("Logical time since start: " + elapsedLogical);
        console.log("Physical time since start: " + elapsedPhysical);
        let expected = new UnitBasedTimeValue( count * 1, TimeUnit.sec).add(
            new UnitBasedTimeValue(100, TimeUnit.msec));
        count++;
        if (!elapsedLogical.isEqualTo(expected)) {
            console.log("Failure: expected " + expected + " but got " + elapsedLogical);
            util.failure();
            //throw new Error("Expected " + expected + " but got " + elapsedLogical);
        }
    =}
}