/** 
 * Test a particularly simple form of a distributed deterministic system
 * where a federation that receives timestamped messages has only those
 * messages as triggers. Therefore, no additional coordination of the
 * advancement of time (HLA or Ptides) is needed.
 * This also tests internal clock synchronization functionality.
 *  @author Edward A. Lee
 *  @author Soroush Bateni
 */
target C {
    timeout: 10 sec,
    coordination: centralized
};

reactor Count {
    state count:int(1);
    output out:int;
    timer t(0, 2 sec);
    reaction(startup) {= 
        // Set the initial test offset
        _lf_global_test_physical_clock_offset = (_lf_my_fed_id + 1) * MSEC(100);
        srand((unsigned) time(0));
        printf("Federate %d: Initial global clock offset is: %lld.\n", _lf_my_fed_id,
               _lf_global_physical_clock_offset);
        printf("Federate %d: Adjusting the test clock offset to %lld.\n", _lf_my_fed_id, 
            _lf_global_test_physical_clock_offset);
    =}
    reaction(t) -> out {=
        // Adjust the test offset by a random coefficient
        /* Uncomment the following lines to test the adaptability of the clock
         * synchronization algorithm. */
        // _lf_global_test_physical_clock_offset *= (1.0 * rand())/RAND_MAX + 1;
        // printf("Federate %d: Adjusting the test clock offset to %lld.\n", _lf_my_fed_id, 
        //     _lf_global_test_physical_clock_offset);
        SET(out, self->count++);
    =}
    reaction(shutdown) {=    
        printf("Federate %d: Clock synchronization offset at shutdown is: %lld.\n", _lf_my_fed_id, _lf_global_physical_clock_offset);
    =}
}

reactor Print {
    input in:int;
    state c:int(1);
    reaction(startup) {=
        // Set the initial test offset
        _lf_global_test_physical_clock_offset = (_lf_my_fed_id + 1) * MSEC(100);
        srand((unsigned) time(0));
        printf("Federate %d: Initial global clock offset is: %lld.\n", _lf_my_fed_id,
               _lf_global_physical_clock_offset);
        printf("Federate %d: Adjusting the test clock offset to %lld.\n", _lf_my_fed_id, 
            _lf_global_test_physical_clock_offset);

    =}
    reaction(in) {=
        // Adjust the test offset by a random coefficient
        /* Uncomment the following lines to test the adaptability of the clock
         * synchronization algorithm. */
        // _lf_global_test_physical_clock_offset *= (1.0 * rand())/RAND_MAX + 1;
        // printf("Federate %d: Adjusting the test clock offset to %lld.\n", _lf_my_fed_id, 
        //     _lf_global_test_physical_clock_offset);
        interval_t elapsed_time = get_elapsed_logical_time();
        printf("At time %lld, received %d\n", elapsed_time, in->value);
        if (in->value != self->c) {
            printf("Expected to receive %d.\n", self->c);
            exit(1);
        }
        if (elapsed_time != MSEC(200) + SEC(2) * (self->c - 1) ) {
            printf("Expected received time to be %lld.\n", MSEC(200) * self->c);
            exit(3);
        }
        self->c++;
    =}
    reaction(shutdown) {=
        printf("Federate %d: Clock synchronization offset at shutdown is: %lld.\n", _lf_my_fed_id, _lf_global_physical_clock_offset);
        if (self->c != 6) {
            printf("Expected to receive 5 items.\n");
            exit(2);
        }
    =}
}

// Having the RTI at 127.0.0.1 will trick the code generator into enabling
// clock synchronization on the federates while only running on the local
// machine.
federated reactor DistributedCount at 127.0.0.1 {
    c = new Count();
    p = new Print();
    c.out -> p.in after 200 msec;    // Indicating a 'logical' connection.
}
