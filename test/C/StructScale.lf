// Source produces a dynamically allocated struct, which it passes
// to Scale. Scale requests a writable copy, which, instead of
// copying, it just gets ownership of the original struct.
// It modifies it and passes it to Print. It gets freed after
// Print is done with it.
target C {files: ["include/hello.h"]};

// expected parameter is for testing.
reactor TestInput(expected:int(42)) {
    
    input in:hello_t*;
    
    reaction(in) {=
        printf("Received: name = %s, value = %d\n", in->value->name, in->value->value);
        if (in->value->value != self->expected) {
            printf("ERROR: Expected value to be %d.\n", self->expected);
            exit(1);
        }
    =}
}

reactor Print(scale:int(2)) {
    // Mutable keyword indicates that this reactor wants a writable copy of the input.
    mutable input in:hello_t*;
    
    output out:hello_t*;
    reaction(in) -> out {=
        in->value->value *= self->scale;
        SET_TOKEN(out, in->token);
    =}
}

main reactor StructScale {
    s = new Print();
    c = new Print();
    p = new TestInput(expected=84);
    s.out -> c.in;
    c.out -> p.in;
}