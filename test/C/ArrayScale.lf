// Source produces a dynamically allocated array, which it passes
// to Scale. Scale requests a writable copy, which, instead of
// copying, it just gets ownership of the original array.
// It modifies it and passes it to Print. It gets freed after
// Print is done with it.
target C;
import ArrayPrintPrint, ArrayPrintSource from "ArrayPrint.lf";

reactor ArrayScaleScale(scale:int(2)) {
    mutable input in:int[];
    output out:int[];
    reaction(in) -> out {=
        for(int i = 0; i < in->length; i++) {
            in->value[i] *= self->scale;
        }
        SET_TOKEN(out, in->token);
    =}
}

main reactor ArrayScale {
    s = new ArrayPrintSource();
    c = new ArrayScaleScale();
    p = new ArrayPrintPrint(scale=2);
    s.out -> c.in;
    c.out -> p.in;
}
