/** 
 * Test a particularly simple form of a distributed deterministic system
 * where a federation that receives timestamped messages only over connections
 * that are marked 'physical' (using the ~> arrow).
 * Therefore, no additional coordination of the
 * advancement of time (HLA or Ptides) is needed.
 * 
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
target C {
    timeout: 1100 msec,
    coordination: decentralized
};

reactor Count {
    timer t(200 msec, 500 msec);
    state s:int(0);
    output out:int;
    reaction(t) -> out {=
        SET(out, self->s);
        self->s++;
    =}
}
reactor Print {
    input in:int;
    state c:int(0);
    reaction(in) {=
        interval_t elapsed_time = get_elapsed_logical_time();
        printf("At time %lld, received %d.\n", elapsed_time, in->value);
        if (in->value    != self->c) {
            fprintf(stderr, "ERROR: Expected to receive %d.\n", self->c);
            exit(1);
        }
        if (!(elapsed_time > MSEC(700) * self->c)) {
            fprintf(stderr, "ERROR: Expected received time to be strictly greater than %lld.\n", MSEC(200) * self->c);
            exit(3);
        }
        self->c++;
    =}
    reaction(shutdown) {=
        if (self->c != 2) {
            fprintf(stderr, "ERROR: Expected to receive 2 items. Received %d.\n", self->c);
            exit(2);
        }
        printf("SUCCESS: Successfully received 3 items.\n");
    =}
}
federated reactor DistributedCount at localhost {
    c = new Count();
    p = new Print();
    c.out ~> p.in;    // Indicating a 'physical' connection.
}
