/** 
 * Test a form of a distributed deterministic system
 * where a federate that receives timestamped messages has a timer in addition to the messages
 * as triggers. Therefore, careful coordination of the advancement of time using Ptides is needed.
 * In addition, this test shows that the tardiness of the reaction
 * is passed down the hierarchy until it is handled.
 * 
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
target C {
    timeout: 900 msec,
    coordination: decentralized
};

import Count from "lib/Count.lf";

reactor ImportantActuator {
    input in:int;
    reaction(in) {=
        if (compare_tags((tag_t) {0LL,0u}, get_current_tag()) != 0) {
            fprintf(stderr, "ERROR: Tardiness was not handled correctly. "
                    "Message is tardy by (%lld, %u) nsec.\n",
                    get_logical_time() - in->intended_tag.time,
                    get_microstep() - in->intended_tag.microstep);
            exit(1);
        }
    =} tardy {=
        tag_t current_tag = get_current_tag();
        printf("Message is tardy by (%lld, %u).\n",
	            current_tag.time - in->intended_tag.time,
	            current_tag.microstep - in->intended_tag.microstep);
    =}
    reaction(shutdown) {=
    	printf("SUCCESS: Successfully detected tardiness.\n");
    =}
}

reactor Print {
    input in:int;
    reaction(in) {=
        tag_t current_tag = get_current_tag();  
        printf("At tag (%lld, %u) received %d. Intended tag is (%lld, %u).\n",
               current_tag.time - get_start_time(),
               current_tag.microstep,
               in->value,
               in->intended_tag.time - get_start_time(),
               in->intended_tag.microstep);
    =}

}

reactor Receiver {
    input in:int;
    timer t(0, 10 msec); // Force a timer to be invoke periodically
                         // to ensure logical time will advance in the
                         // absence of incoming messages.
    state c:int(0);
    p = new Print();
    a = new ImportantActuator();
    in -> p.in;
    in -> a.in;
    
    reaction(t) {=
        // Do nothing.
    =}
}

federated reactor DistributedCount {
    c = new Count();
    r = new Receiver();
    c.out -> r.in;    // Indicating a 'logical' connection.
}
