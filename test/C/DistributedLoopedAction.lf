/**
 * Test a sender-receiver network system that
 * relies on microsteps being taken into account.
 *  
 * @author Soroush Bateni
 */

target C {
    timeout: 1 sec
};

preamble {=
    #define VERBOSE
=}

reactor Sender(take_a_break_after:int(10), break_interval:time(400 msec)) {
    output out:int;
    logical action act;
    state sent_messages:int(0);
    reaction(startup, act) -> out {=
        // Send a message on out
        SET(out, self->sent_messages);
        self->sent_messages++;
        if (self->sent_messages < self->take_a_break_after) {
        	schedule(act, 0);
        } else {
            // Take a break
        	self->sent_messages=0;
            schedule(act, self->break_interval);
        }
    =}
}

reactor Receiver(take_a_break_after:int(10), break_interval:time(400 msec)) {
    input in:int;
    state received_messages:int(0);
    state breaks:int(0);
    timer t(0, 1 msec); // This will impact performance
    					// but forces the logical time to advance
    					// Comment this line for a more sensible
    					// log output.
    reaction(in) {=
        printf("At time %lld received value %d with tardiness %lld.\n",
            get_elapsed_logical_time(),
            in->value,
            in->tardiness
        );
        if (in->value != self->received_messages++) {
            fprintf(stderr,"ERROR: received messages out of order.\n");
            exit(1);
        }        
        if (get_elapsed_logical_time() != self->breaks * self->break_interval) {
            fprintf(stderr,"ERROR: received messages at an incorrect time.\n");
            exit(2);
        }
        if (in->tardiness != 0) {
            fprintf(stderr,"ERROR: received tardy messages.\n");
            exit(3);
        }  

        if (self->received_messages == self->take_a_break_after) {
            // Sender is taking a break;
            self->breaks++;
            self->received_messages = 0;
        }
    =}
    
    reaction(t) {=
        // Do nothing
    =}
    
    reaction(shutdown) {=
        if ((self->received_messages * self->breaks) != 2 * 10) {
            fprintf(stderr,"ERROR: test failed.\n");
            exit(4);
        }
        printf("SUCCESS: Successfully received all messages from the sender.\n");
    =}
}


federated reactor DistributedLoopedAction {
    sender = new Sender();
    receiver = new Receiver();
    
    sender.out -> receiver.in;
}