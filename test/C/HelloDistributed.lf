/** Test a particularly simple form of a distributed deterministic system
 *  where a federation that receives timestamped messages has only those
 *  messages as triggers. Therefore, no additional coordination of the
 *  advancement of time (HLA or Ptides) is needed.
 *  @author Edward A. Lee
 */
target C {
    timeout: 1 sec,
    federates: {
        RTI: {host: "localhost", port: 15046, launcher: true},
        Source: {reactors: [s]},
        Destination: {reactors: [d]}
    }
};
reactor Source {
    output out:string;
    reaction(startup) -> out {=
        printf("Sending 'Hello World!' message from source federate.\n");
        set(out, "Hello World!");
        stop();  // FIXME: This should be broadcast as a request to stop all federates.
    =}
}
reactor Destination {
    input in:string;
    reaction(startup) {=
        printf("Destination started.\n");
    =}
    reaction(in) {=
        printf("At logical time %lld, destination received: %s\n", get_elapsed_logical_time(), in);
        if (strcmp(in, "Hello World!") != 0) {
            printf("ERROR: Expected to receive 'Hello World!'\n");
            exit(1);
        }
    =}
}
main reactor HelloDistributed {
    s = new Source();      // Reactor s is in federate Source
    d = new Destination(); // Reactor d is in federate Destination
    s.out -> d.in;         // This version preserves the timestamp.
}