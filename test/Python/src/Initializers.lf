target Python;

reactor Sub(seq([1,2])) {}

reactor Foo(
    p1(4, 2),    // tuple
    p2 = (4, 2), // tuple

    p3([4, 2]),  // list
    p4 = [4, 2], // list

    p5("a"),
    p6 = "a",

    p12 = 2
) {
    state s0 = 2 - 2 - 2; state s1(2 - 2 - 2);
    # todo # state s0 = 2 - 2 - p12; state s1(2 - p12 - 2);
    state s2 = "a";       state s4("a");
    # state s3(2 + 'a');    state s5 = 2 + 'a';

    reaction(startup) {=
        assert self.p1 == (4, 2);
        assert self.p2 == (3, 5);
        assert self.p3 == [4, 2];
        assert self.p4 == [4, 2];

        assert self.s0 == -2;
        assert self.s1 == -2;

        assert self.s2 == "a";
        assert self.s4 == "a";
        assert self.p5 == "a";
        assert self.p6 == "a";

        assert self.t0  == ()
        assert self.t02 == ()
        assert self.t1  == (1,)
        assert self.t12 == (1,)
        assert self.t2  == (1,2)
        assert self.t22 == (1,2)
        assert self.justin == 1
        assert self.justin2 == 1

        if __debug__: # otherwise asserts are noop
            print("Success\n")
    =}


    state t0 = ();      // empty tuple
    state t02();        // empty tuple

    state t1 = (1,);    // tuple of 1
    state t12(1,);      // tuple of 1

    state t2 = (1,2);   // tuple of 2
    state t22(1,2);     // tuple of 2

    state justin = (1); // just 1
    state justin2(1);   // just 1

    sub  = new Sub(seq = ());
    sub2 = new Sub(seq = (1,));
    sub3 = new Sub(seq = (1, 2));
    sub4 = new Sub(seq((1, 2,)));


}

main reactor {
    foo = new Foo(p2(3,5));
}
