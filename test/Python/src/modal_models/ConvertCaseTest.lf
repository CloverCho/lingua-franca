/*
 * Modal Reactor Test.
 * Tests nested reactors with modes.
 */
target Python {
    fast: false,
    timeout: 4 sec,
}

import TraceTesting from "util/TraceTesting.lf"

reactor ResetProcessor {
    input discard
    input character
    output converted
    
    initial mode Converting {
        converter = new Converter()
        character -> converter.raw
        converter.converted -> converted
        
        reaction(discard) -> Discarding {=
            Discarding.set()
        =}
    }
    
    mode Discarding {
        reaction(character) -> converted {=
            converted.set('_')
        =}

        reaction(character) -> Converting {=
            Converting.set()
        =}
    }
}

reactor HistoryProcessor {
    input discard
    input character
    output converted
    
    initial mode Converting {
        converter = new Converter()
        character -> converter.raw
        converter.converted -> converted
        
        reaction(discard) -> Discarding {=
            Discarding.set()
        =}
    }
    
    mode Discarding {
        reaction(character) -> converted {=
            converted.set('_')
        =}

        reaction(character) -> continue(Converting) {=
            Converting.set()
        =}
    }
}

reactor Converter {
    input raw
    output converted

    initial mode Upper {
        reaction(raw) -> converted, Lower {=
            character = raw.value.upper()
            converted.set(character)
            if character == ' ':
                Lower.set()
        =}
    }
    mode Lower {
        reaction(raw) -> converted, Upper {=
            character = raw.value.lower()
            converted.set(character)
            if character == ' ':
                Upper.set()
        =}
    }
}

reactor InputFeeder(message("")) {
    output character
    state idx(0)
    
    timer t(0, 250 msec)
    
    reaction(t) -> character {=
        if self.idx < len(self.message):
            character.set(self.message[self.idx])
            self.idx += 1
    =}
}

main reactor {
    timer stepper(500msec, 1sec)
    
    feeder = new InputFeeder(message="Hello World!")
    reset_processor = new ResetProcessor()
    history_processor = new HistoryProcessor()
    
    feeder.character -> reset_processor.character
    feeder.character -> history_processor.character
    
    test = new TraceTesting(
        events_size = 2,
        trace = (
            0,1,72,1,72,
            250000000,1,69,1,69,
            250000000,1,76,1,76,
            250000000,1,95,1,95,
            250000000,1,79,1,79,
            250000000,1,32,1,32,
            250000000,1,119,1,119,
            250000000,1,95,1,95,
            250000000,1,82,1,114,
            250000000,1,76,1,108,
            250000000,1,68,1,100,
            250000000,1,95,1,95
        ), training = False)

    # Trigger mode change
    reaction(stepper) -> reset_processor.discard, history_processor.discard {=
        reset_processor.discard.set(True)
        history_processor.discard.set(True)
    =}
    
    reaction(reset_processor.converted) {=
        print(f"Reset: {reset_processor.converted.value}")
    =}
    
    reaction(history_processor.converted) {=
        print(f"History: {history_processor.converted.value}")
    =}
    
    reset_processor.converted, history_processor.converted -> test.events
}