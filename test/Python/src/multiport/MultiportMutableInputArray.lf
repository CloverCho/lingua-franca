// Source produces a list on a multiport, which it passes
// to Scale. Scale requests a writable copy, which, instead of
// copying, it just gets ownership of the original list.
// It modifies it and passes it to Print. It gets freed after
// Print is done with it.
target Python;
reactor Source {
    output[2] out;
    reaction(startup) -> out {=
        out[0].set([0,1,2])
        out[1].set([3,4,5])
    =}
}
// The scale parameter is just for testing.
reactor Print(scale(1)) {
    input[2] _in;
    reaction(_in) {=
        for j in range(2):
            print("Received on channel ", _in[j].value)
            if _in[j].value != [(self.scale*i) for i in range(3*j,(3*j)+3)]:
                sys.stderr.write("ERROR: Value received by Print does not match expectation!\n")
                exit(1)
    =}
}

reactor Scale(scale(2)) {
    mutable input[2] _in;
    output[2] out;
    reaction(_in) -> out {=
        for j in range(len(_in)):
            for i in range(len(_in[j].value)):
                if (_in[j].is_present):
                    _in[j].value[i] *= self.scale
            out[j].set(_in[j].value)
    =}
}

main reactor MultiportMutableInputArray {
    s = new Source();
    c = new Scale();
    p = new Print(scale=2);
    s.out -> c._in;
    c.out -> p._in;
}
