// Source produces a ints on a multiport, which it passes
// to Scale. Scale requests a writable copy.
// It modifies it and passes it to Print. It gets freed after
// Print is done with it.
target Python;
reactor Source {
    output[2] out;
    reaction(startup) -> out {=
        out[0].set(21)
        out[1].set(42)
    =}
}
// The scale parameter is just for testing.
reactor Print(scale(1)) {
    input[2] _in;
    reaction(_in) {=
        expected = 42
        for j in range(2):
            print("Received on channel {:d}: ".format(j), _in[j].value)
            if _in[j].value != expected:
                sys.stderr.write("ERROR: Expected {:d}!\n".format(expected))
                exit(1)
            expected *= 2
    =}
}

reactor Scale(scale(2)) {
    mutable input[2] _in;
    output[2] out;
    reaction(_in) -> out {=
        for j in range(2):
            # Modify the input, allowed because mutable.
            _in[j].value *= self.scale
            out[j].set(_in[j].value)
    =}
}
main reactor MultiportMutableInput {
    s = new Source();
    c = new Scale();
    p = new Print(scale=2);
    s.out -> c._in;
    c.out -> p._in;
}
