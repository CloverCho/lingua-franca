// Test that the stop function can be used to internally impose a
// a time limit.
// Correct output for this 1, 2, 3, 4.
// Failure for this test is failing to halt.
target Python {
    fast: true,
    threads: 1
};
reactor Clock(offset(0), period(1 sec)) {
    output y;
    timer t(offset, period);
    state count(0);
    reaction(t) -> y {=
        self.count += 1
        # print("Reacting at time ", get_elapsed_logical_time())
        y.set(self.count)
    =}
}
reactor Destination {
    input x;
    state s(1);
    reaction(x) {=
        # print(x.value)
        if x.value != self.s:
            sys.stderr.write("Error: Expected {:d} and got {:d}.\n".format(self.s, x.value))
            exit(1)
        
        self.s += 1
    =}
}
main reactor TimeLimit(period(1 usec)) {
    timer stop(10 secs);
    reaction(stop) {=
        stop()
    =}
    reaction(shutdown) {=
        print("**** shutdown reaction invoked.\n")
    =}
    c = new Clock(period = period);
    d = new Destination();
    c.y -> d.x;
}
