target Python {
    timeout: 2 sec,
    threads: 4
};

import TakeTime from "Threaded.lf";

reactor Print {
    input _in:int;
    state count:int(0);
    state received:int(0);
    reaction(_in) {=
        self.received += 1
        print("Received: {:d} at logical time {:d}".format(_in.value, get_elapsed_logical_time()))
        if _in.value != (self.count + 40000):
            sys.stderr.write("ERROR: Expected {:d}.\n".format(self.count + 40000))
            exit(1)
        self.count+=1
    =}
    reaction(shutdown) {=
        if self.received == 0:
            sys.stderr.write("ERROR: Final reactor received no data.\n")
            exit(3)
    =}
}

main reactor Pipeline {
    timer t(0, 200 msec);
    state count:int(0);
    
    c1 = new TakeTime();
    c2 = new TakeTime();
    c3 = new TakeTime();
    c4 = new TakeTime();
    p = new Print();
    
    reaction(t) -> c1._in {=
        c1._in.set(self.count)
        self.count += 1        
    =}
   
    c1.out -> c2._in after 200 msec;
    c2.out -> c3._in after 200 msec;
    c3.out -> c4._in after 200 msec;
    c4.out -> p._in;
}