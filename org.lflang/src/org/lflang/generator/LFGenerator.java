/* Generated by Xtext 2.17.0 and then modified to support specific targets. */

/*************
 * Copyright (c) 2019-2020, The University of California at Berkeley.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************/

package org.lflang.generator

import java.lang.reflect.InvocationTargetException;
import java.util.EnumMap;
import java.util.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.jetbrains.annotations.NotNull;
import org.lflang.Target;
import org.lflang.lf.TargetDecl;

/**
 * Generates code from your model files on save.
 * <p>
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LFGenerator extends AbstractGenerator {

    // Indicator of whether generator errors occurred.
    private boolean generatorErrorsOccurred = false;
    private static final EnumMap<Target, Class<? extends GeneratorBase>> TARGET_MAP;


    static {
        TARGET_MAP = new EnumMap<>(Target.class);
        TARGET_MAP.put(Target.C, CGenerator.class);
        TARGET_MAP.put(Target.CCPP, CCppGenerator.class);
        TARGET_MAP.put(Target.CPP, CppGenerator.class);
        TARGET_MAP.put(Target.TS, TypeScriptGenerator.class);
        TARGET_MAP.put(Target.Python, PythonGenerator.class);
    }


    private static GeneratorBase getGenerator(Target target) {
        assert target != null;
        Class<? extends GeneratorBase> generatorClass = TARGET_MAP.get(target);
        assert generatorClass != null;
        try {
            return generatorClass.getConstructor().newInstance();
        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
            throw new AssertionError("Missing constructor in " + generatorClass, e);
        }
    }


    @Override
    public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        // Determine which target is desired.

        String targetName = findTargetNameOrThrow(resource);
        Target target = Target.forName(targetName);
        if (target == null) {
            throw new AssertionError("Not a target '" + targetName + "'");
        }
        GeneratorBase generator = getGenerator(target);
        generator.doGenerate(resource, fsa, context);
        generatorErrorsOccurred |= generator.errorsOccurred();
    }


    private String findTargetNameOrThrow(Resource resource) {
        return streamNodes(resource)
            .filter(TargetDecl.class::isInstance)
            .map(it -> ((TargetDecl) it).getName())
            .findFirst()
            .orElseThrow(() -> new AssertionError("No target declaration"));
    }


    @NotNull
    private Stream<EObject> streamNodes(Resource resource) {
        TreeIterator<EObject> allContents = resource.getAllContents();
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(allContents, 0), false);
    }


    /** Return true if errors occurred in the last call to doGenerate(). */
    public boolean errorsOccurred() {
        return generatorErrorsOccurred;
    }

}
