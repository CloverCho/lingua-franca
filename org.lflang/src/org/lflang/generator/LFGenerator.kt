/* Generated by Xtext 2.17.0 and then modified to support specific targets. */
/*************
 * Copyright (c) 2019-2020, The University of California at Berkeley.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.lflang.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.lflang.Target
import org.lflang.generator.cpp.CppGenerator
import org.lflang.generator.rust.RustGenerator
import org.lflang.lf.TargetDecl
import org.lflang.scoping.LFGlobalScopeProvider

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LFGenerator : AbstractGenerator() {

    @Inject
    lateinit var scopeProvider: LFGlobalScopeProvider

    /**
     * Is set if errors occurred in the last call to doGenerate().
     */
    var generatorErrorsOccurred = false
        private set

    override fun doGenerate(resource: Resource, fsa: IFileSystemAccess2, context: IGeneratorContext) {
        this.generatorErrorsOccurred = generateImpl(resource, fsa, context)
    }

    private fun getGenerator(target: Target): GeneratorBase =
        when (target) {
            Target.C      -> CGenerator()
            Target.CCPP   -> CCppGenerator()
            Target.CPP    -> CppGenerator(scopeProvider)
            Target.TS     -> TypeScriptGenerator()
            Target.Python -> PythonGenerator()
            Target.Rust   -> RustGenerator()
        }

    /** Returns true if some errors occurred. */
    private fun generateImpl(resource: Resource, fsa: IFileSystemAccess2, context: IGeneratorContext): Boolean {
        // Determine which target is desired.
        val targetName = findTargetNameOrThrow(resource)
        val target = Target.forName(targetName) ?: throw AssertionError("Not a target '$targetName'")
        val generator = getGenerator(target)
        generator.doGenerate(resource, fsa, context)
        return generator.errorsOccurred()
    }

    companion object {

        private fun findTargetNameOrThrow(resource: Resource): String =
            resource.allContents.asSequence()
                .mapNotNull { it as? TargetDecl }
                .firstOrNull()
                ?.name
                ?: throw AssertionError("No target declaration")

    }
}
