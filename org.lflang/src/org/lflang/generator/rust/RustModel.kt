/*
 * Copyright (c) 2021, TU Dresden.

 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:

 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.lflang.generator.rust

import org.lflang.generator.cpp.targetType
import org.lflang.isInput
import org.lflang.isLogical
import org.lflang.lf.*
import java.util.*

/*
    Model classes that serve as "intermediary representation" between the rust generator and emitter.
 */


data class GenerationInfo(
    val crate: CrateInfo,
    val runtime: RuntimeInfo,
    val reactors: List<ReactorInfo>,
    val mainReactor: ReactorInfo // it's also in the list
)

data class ReactorInfo(
    val lfName: String,
    val reactions: List<ReactionInfo>,
    val isMain: Boolean,
    val otherComponents: List<ReactorComponent>,
    val ctorParamTypes: List<String> = emptyList()
) {
    val modName = lfName.toLowerCase(Locale.ROOT) // note: toLowercase is deprecated in kotlin 1.5.0
    val structName get() = lfName
    val dispatcherName = "${structName}Dispatcher"
    val reactionIdName = "${structName}Reactions"
}

data class ReactionInfo(
    /** Index in the containing reactor. */
    val idx: Int,
    /** The ID of the reaction in the reaction enum. */
    val rustId: String = "R$idx",
    /** The name of the worker function for this reaction. */
    val workerId: String = "react_$idx",
    /** Dependencies declared by the reaction, which are served to the worker function. */
    val depends: Set<ReactorComponent>,
    /** Target code for the reaction body. */
    val body: String
)


data class CrateInfo(
    val name: String,
    val version: String,
    val authors: List<String>,
)

data class RuntimeInfo(
    val toml_spec: String,
    // options, etc
)


/*
TODO do we really need the following classes?
  - I quite like that they are much simpler than the corresponding AST nodes (Input, Action, etc).
  - Also we have control over them. AST classes are generated by Xtend.
  - OTOH they're just a subset of the functionality of AST nodes for now. We could as well use them.
   But this would make this "IR" a weird mix between data classes and AST nodes.
  - Maybe the right data structures to use are the ReactorInstance, etc instead. But I feel like we're
   generating code not for the instance tree, but for now, just generic code for each reactor (like the C++
   generator)
 */


sealed class ReactorComponent {
    abstract val name: String

    companion object {
        /**
         * Convert an AST node for a reactor component to the corresponding dependency type.
         * Since there's no reasonable common supertype we use [Variable], but maybe we should
         * have another interface.
         */
        fun from(v: Variable): ReactorComponent? = when (v) {
            is Port   -> PortData(name = v.name, isInput = v.isInput, dataType = v.targetType)
            is Action -> ActionData(name = v.name, isLogical = v.isLogical)
            else      -> TODO("Unsupported: ${v.javaClass.simpleName} $v")
        }
    }
}

/**
 * @property dataType A piece of target code
 */
data class PortData(override val name: String, val isInput: Boolean, val dataType: String) : ReactorComponent()

data class ActionData(override val name: String, val isLogical: Boolean) : ReactorComponent()

