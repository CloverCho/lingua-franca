/*
 * generated by Xtext 2.23.0
 */
package org.lflang

import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.validation.NamesAreUniqueValidationHelper
import org.lflang.scoping.LFGlobalScopeProvider
import org.lflang.validation.LFNamesAreUniqueValidationHelper

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
open class LFRuntimeModule : AbstractLFRuntimeModule() {
    // note: don't use covariant return types here. The return type of each method must be
    // Class<out InterfaceName>, even though with covariance you could write Class<ConcreteClassName>
    // Guice parses the return type apparently.

    /** Establish a binding to our custom global scope provider.  */
    override fun bindIGlobalScopeProvider(): Class<out IGlobalScopeProvider> =
        LFGlobalScopeProvider::class.java

    /** Establish a binding to a helper that checks that names are unique.  */
    fun bindNamesAreUniqueValidationHelper(): Class<out NamesAreUniqueValidationHelper> =
        LFNamesAreUniqueValidationHelper::class.java

    /** Establish a binding to our custom resource description strategy.  */
    fun bindIDefaultResourceDescriptionStrategy(): Class<out IDefaultResourceDescriptionStrategy> =
        LFResourceDescriptionStrategy::class.java
}
