/*
 * Copyright (c) 2021, TU Dresden.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * generated by Xtext 2.23.0
 */

package org.lflang;

import java.util.Objects;

import org.eclipse.xtext.validation.ValidationMessageAcceptor;

import org.lflang.generator.ReportingBackend;
import org.lflang.generator.StandaloneErrorReporter;
import org.lflang.generator.StandaloneIssueAcceptor;

import com.google.inject.Binder;
import com.google.inject.Module;

/**
 * Module that is only available when running LFC as a
 * standalone program.
 *
 * @see LFRuntimeModule
 */
public class LFStandaloneModule implements Module {
    // Note that xtext's base module classes has broken support
    // for @Provides, which would allow us to bind this field.
    // So we directly implement Module, instead of extending eg LFRuntimeModule.
    private final ReportingBackend helper;

    public LFStandaloneModule(ReportingBackend helper) {
        this.helper = Objects.requireNonNull(helper);
    }

    @Override
    public void configure(Binder binder) {
        binder.bind(ErrorReporter.class).to(StandaloneErrorReporter.class);
        binder.bind(ReportingBackend.class).toInstance(helper);
        binder.bind(ValidationMessageAcceptor.class).to(StandaloneIssueAcceptor.class);
    }
}
