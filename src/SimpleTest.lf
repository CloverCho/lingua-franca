target JavaScript;

// Periodically produce an output consisting of a count.
actor Source(period:int(1000)) {
    clock t(period, 0);
    output y:int;
    constructor {=
        var n = 0;
    =}
    reaction(t) -> y {=
        n = n + 1;
        set(y, n);
    =}
}
// Test input for match to expected sequence.
// Stop executing when the expected sequence has been matched.
actor Test(expected:JSON([])) {
    language CapeCode;
    input x:int;

    constructor {=
        var i = 0;
    =}
    
    reaction(x) {=
        if (expected[i] != x) {
            throw "Expected: " + expected[i] + ", but got: " + x;
        }
        i += 1;
        if (i >= expected.length) {
            this.stop();
        }
    =}
}
// Compose the actors.
composite Top() {
    a = new Source(period = 10);
    b = new Test(expected = [1, 2, 3, 4]);
    a = Source(10);              // alternative syntax
    b = new Test([1, 2, 3, 4]);  // idem
    a.y -> b.x;
}

start new Top();
