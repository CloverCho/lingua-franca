// Source produces a dynamically allocated struct, which it passes
// to Print. Reference counting ensures that the struct is freed.
target C;
reactor StructPrint {
    preamble {=
        typedef struct hello_t {
            char* name;
            int value;
        } hello_t;
    =}
    output out:hello_t*;
    reaction(startup) -> out {=
        // Dynamically allocate an output struct.
        SET_NEW(out);
        // Above allocates a struct, which then must be populated.
        out->value->name = "Earth";
        out->value->value = 42;
    =}
}

// expected parameter is for testing.
reactor Print(expected:int(42)) {
    input in:hello_t*;
    reaction(in) {=
        printf("Received: name = %s, value = %d\n", in->value->name, in->value->value);
        if (in->value->value != self->expected) {
            printf("ERROR: Expected value to be %d.\n", self->expected);
            exit(1);
        }
    =}
}
main reactor StructPrintTest {
    s = new StructPrint();
    p = new Print();
    s.out -> p.in;
}