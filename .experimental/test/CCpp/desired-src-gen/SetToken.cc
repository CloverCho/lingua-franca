// Code generated by the Lingua Franca compiler from file:
// /home/soroosh/lingua-franca/.experimental/test/CCpp/SetToken.lf
#include "ccpptarget.h"
#define NUMBER_OF_FEDERATES 1
#include "core/reactor.c"
// =============== START reactor class Source
typedef struct {
    int* value;
    bool is_present;
    int num_destinations;
    token_t* token;
    int length;
} source_out_t;
typedef struct {
    trigger_t* trigger;
    int value;
    bool is_present;
    bool has_value;
    token_t* token;
} source_a_t;
typedef struct {
    source_a_t __a;
    source_out_t __out;
    reaction_t ___reaction_0;
    bool* __reaction_0_outputs_are_present[0];
    int __reaction_0_num_outputs;
    trigger_t** __reaction_0_triggers[0];
    int __reaction_0_triggered_sizes[0];
    reaction_t ___reaction_1;
    bool* __reaction_1_outputs_are_present[1];
    int __reaction_1_num_outputs;
    trigger_t** __reaction_1_triggers[1];
    int __reaction_1_triggered_sizes[1];
    trigger_t ___startup;
    reaction_t* ___startup_reactions[1];
    trigger_t ___a;
    reaction_t* ___a_reactions[1];
} source_self_t;
void sourcereaction_function_0(void* instance_args) {
    source_self_t* self = (source_self_t*)instance_args;
    source_a_t* a = &self->__a;
    schedule_int(a, MSEC(200), 42);
        
}
void sourcereaction_function_1(void* instance_args) {
    source_self_t* self = (source_self_t*)instance_args;
    // Expose the action struct as a local variable whose name matches the action name.
    source_a_t* a = &self->__a;
    // Set the fields of the action struct to match the current trigger.
    a->is_present = self->___a.is_present;
    a->has_value = ((self->___a.token) != NULL && (self->___a.token)->value != NULL);
    a->token = (self->___a.token);
    if (a->has_value) {
        a->value = *(int*)(self->___a.token)->value;
    }
    template_input_output_port_with_token_struct<int*>* out = (template_input_output_port_with_token_struct<int*> *) &self->__out;
    SET_TOKEN(out, a->token);
        
}
source_self_t* new_Source() {
    source_self_t* self = (source_self_t*)calloc(1, sizeof(source_self_t));
    self->__a.trigger = &self->___a;
    self->__reaction_0_num_outputs = 0;
    self->___reaction_0.function = sourcereaction_function_0;
    self->___reaction_0.self = self;
    self->___reaction_0.num_outputs = 0;
    self->___reaction_0.output_produced = self->__reaction_0_outputs_are_present;
    self->___reaction_0.triggered_sizes = self->__reaction_0_triggered_sizes;
    self->___reaction_0.triggers = self->__reaction_0_triggers;
    self->___reaction_0.deadline_violation_handler = NULL;
    self->__reaction_1_outputs_are_present[0] = &self->__out.is_present;
    self->__reaction_1_num_outputs = 1;
    self->___reaction_1.function = sourcereaction_function_1;
    self->___reaction_1.self = self;
    self->___reaction_1.num_outputs = 1;
    self->___reaction_1.output_produced = self->__reaction_1_outputs_are_present;
    self->___reaction_1.triggered_sizes = self->__reaction_1_triggered_sizes;
    self->___reaction_1.triggers = self->__reaction_1_triggers;
    self->___reaction_1.deadline_violation_handler = NULL;
    self->___startup.scheduled = NEVER;
    self->___startup_reactions[0] = &self->___reaction_0;
    self->___startup.reactions = &self->___startup_reactions[0];
    self->___startup.number_of_reactions = 1;
    self->___startup.is_timer = true;
    self->___a.scheduled = NEVER;
    self->___a_reactions[0] = &self->___reaction_1;
    self->___a.reactions = &self->___a_reactions[0];
    self->___a.number_of_reactions = 1;
    self->___a.is_physical = false;
    self->___a.drop = false;
    self->___a.element_size = sizeof(int);
    return self;
}
// =============== END reactor class Source

// =============== START reactor class Print
typedef struct {
    int* value;
    bool is_present;
    int num_destinations;
    token_t* token;
    int length;
} print_in_t;
typedef struct {
    int expected;
    print_in_t* __in;
    reaction_t ___reaction_0;
    bool* __reaction_0_outputs_are_present[0];
    int __reaction_0_num_outputs;
    trigger_t** __reaction_0_triggers[0];
    int __reaction_0_triggered_sizes[0];
    trigger_t ___in;
    reaction_t* ___in_reactions[1];
} print_self_t;
void printreaction_function_0(void* instance_args) {
    print_self_t* self = (print_self_t*)instance_args;
    print_in_t* in = self->__in;
    if (in->is_present) {
        in->length = in->token->length;
        in->value = (int*)in->token->value;
    } else {
        in->length = 0;
    }
    int in_width = -2;
    printf("Received %d\n", *(in->value));
    if (*(in->value) != 42) {
        printf("ERROR: Expected value to be 42.\n");
        exit(1);
    }
        
}
print_self_t* new_Print() {
    print_self_t* self = (print_self_t*)calloc(1, sizeof(print_self_t));
    self->__reaction_0_num_outputs = 0;
    self->___reaction_0.function = printreaction_function_0;
    self->___reaction_0.self = self;
    self->___reaction_0.num_outputs = 0;
    self->___reaction_0.output_produced = self->__reaction_0_outputs_are_present;
    self->___reaction_0.triggered_sizes = self->__reaction_0_triggered_sizes;
    self->___reaction_0.triggers = self->__reaction_0_triggers;
    self->___reaction_0.deadline_violation_handler = NULL;
    self->___in.scheduled = NEVER;
    self->___in_reactions[0] = &self->___reaction_0;
    self->___in.reactions = &self->___in_reactions[0];
    self->___in.number_of_reactions = 1;
    self->___in.element_size = sizeof(int);
    return self;
}
// =============== END reactor class Print

// =============== START reactor class StructPrint
typedef struct {
    bool hasContents;
} structprint_self_t;
structprint_self_t* new_StructPrint() {
    structprint_self_t* self = (structprint_self_t*)calloc(1, sizeof(structprint_self_t));
    return self;
}
// =============== END reactor class StructPrint

void __set_default_command_line_options() {
}
// Array of pointers to timer triggers to start the timers in __start_timers().
trigger_t* __timer_triggers[1];
int __timer_triggers_size = 1;
// Array of pointers to shutdown triggers.
trigger_t** __shutdown_triggers = NULL;
int __shutdown_triggers_size = 0;
trigger_t* __action_for_port(int port_id) {
    return NULL;
}
void __initialize_trigger_objects() {
    __tokens_with_ref_count_size = 2;
    __tokens_with_ref_count = (token_present_t*)malloc(2 * sizeof(token_present_t));
    // Create the array that will contain pointers to is_present fields to reset on each step.
    __is_present_fields_size = 2;
    __is_present_fields = (bool**)malloc(2 * sizeof(bool*));
    // ************* Instance StructPrint of class StructPrint
    structprint_self_t* structprint_self = new_StructPrint();
    //***** Start initializing StructPrint
    // ************* Instance StructPrint.s of class Source
    source_self_t* structprint_s_self = new_Source();
    //***** Start initializing StructPrint.s
    // Reaction 1 of StructPrint.s triggers 1 downstream reactions through port StructPrint.s.out.
    structprint_s_self->___reaction_1.triggered_sizes[0] = 1;
    // For reaction 1 of StructPrint.s, allocate an
    // array of trigger pointers for downstream reactions through port StructPrint.s.out
    trigger_t** structprint_s_1_0 = (trigger_t**)malloc(1 * sizeof(trigger_t*));
    structprint_s_self->___reaction_1.triggers[0] = structprint_s_1_0;
    structprint_s_self->___startup.offset = 0;
    structprint_s_self->___startup.period = 0;
    __timer_triggers[0] = &structprint_s_self->___startup;
    structprint_s_self->___a.offset = 0;
    structprint_s_self->___a.period = 0;
    structprint_s_self->__out.num_destinations = 1;
    structprint_s_self->___a.token = __create_token(sizeof(int));
    structprint_s_self->___a.is_present = false;
    __tokens_with_ref_count[0].token
            = &structprint_s_self->___a.token;
    __tokens_with_ref_count[0].is_present
            = &structprint_s_self->___a.is_present;
    __tokens_with_ref_count[0].reset_is_present = true;
    //***** End initializing StructPrint.s
    // ************* Instance StructPrint.p of class Print
    print_self_t* structprint_p_self = new_Print();
    //***** Start initializing StructPrint.p
    structprint_p_self->expected = 42; 
    //***** End initializing StructPrint.p
    //***** End initializing StructPrint
    // Populate arrays of trigger pointers.
    // Point to destination port StructPrint.p.in's trigger struct.
    structprint_s_1_0[0] = &structprint_p_self->___in;
    // doDeferredInitialize
    structprint_p_self->__in = NULL;
    structprint_s_self->__out.token = __create_token(sizeof(int));
    // Connect inputs and outputs for reactor StructPrint.
    // Connect StructPrint.s.out to input port StructPrint.p.in
    structprint_p_self->__in = (print_in_t*)&structprint_s_self->__out;
    // Connect inputs and outputs for reactor StructPrint.s.
    // END Connect inputs and outputs for reactor StructPrint.s.
    // Connect inputs and outputs for reactor StructPrint.p.
    // END Connect inputs and outputs for reactor StructPrint.p.
    // END Connect inputs and outputs for reactor StructPrint.
    // Add action StructPrint.s.a to array of is_present fields.
    __is_present_fields[0] 
            = &structprint_s_self->__a.is_present;
    __tokens_with_ref_count[1].token
            = &structprint_p_self->__in->token;
    __tokens_with_ref_count[1].is_present
            = &structprint_p_self->__in->is_present;
    __tokens_with_ref_count[1].reset_is_present = false;
    // Add port StructPrint.s.out to array of is_present fields.
    __is_present_fields[1] = &structprint_s_self->__out.is_present;
    structprint_s_self->___reaction_0.chain_id = 1;
    // index is the OR of level 0 and 
    // deadline 140737488355327 shifted left 16 bits.
    structprint_s_self->___reaction_0.index = 0x7fffffffffff0000LL;
    structprint_s_self->___reaction_1.chain_id = 1;
    // index is the OR of level 1 and 
    // deadline 140737488355327 shifted left 16 bits.
    structprint_s_self->___reaction_1.index = 0x7fffffffffff0001LL;
    structprint_p_self->___reaction_0.chain_id = 1;
    // index is the OR of level 2 and 
    // deadline 140737488355327 shifted left 16 bits.
    structprint_p_self->___reaction_0.index = 0x7fffffffffff0002LL;
}
void __start_timers() {
    
    for (int i = 0; i < __timer_triggers_size; i++) {
        __schedule(__timer_triggers[i], 0LL, NULL);
    }
}
void logical_time_complete(instant_t time) {
}
instant_t next_event_time(instant_t time) {
    return time;
}
bool __wrapup() {
    __start_time_step();  // To free memory allocated for actions.
    for (int i = 0; i < __shutdown_triggers_size; i++) {
        __schedule(__shutdown_triggers[i], 0LL, NULL);
    }
    // Return true if there are shutdown actions.
    return (__shutdown_triggers_size > 0);
}
void __termination() {}
