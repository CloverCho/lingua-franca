// Code generated by the Lingua Franca compiler from file:
// /home/soroosh/lingua-franca/test/CCpp/Composition.lf
#include "ccpptarget.h"
#define NUMBER_OF_FEDERATES 1
// =============== START reactor class Source
typedef struct
{
    int value;
    bool is_present;
    int num_destinations;
} source_y_t;
class source_t
{
    // FIXME: Need finer granularity on access
public:
    interval_t period;
    int count;
    source_y_t __y;
    reaction_t ___reaction_0;
    bool *__reaction_0_outputs_are_present[1];
    int __reaction_0_num_outputs;
    trigger_t **__reaction_0_triggers[1];
    int __reaction_0_triggered_sizes[1];
    trigger_t ___t;
    reaction_t *___t_reactions[1];

    source_t()
    {
        this->__reaction_0_outputs_are_present[0] = &this->__y.is_present;
        this->__reaction_0_num_outputs = 1;
        this->___reaction_0.function = reaction_function_0;
        this->___reaction_0.self = this;
        this->___reaction_0.num_outputs = 1;
        this->___reaction_0.output_produced = this->__reaction_0_outputs_are_present;
        this->___reaction_0.triggered_sizes = this->__reaction_0_triggered_sizes;
        this->___reaction_0.triggers = this->__reaction_0_triggers;
        this->___reaction_0.deadline_violation_handler = NULL;
        this->___t.scheduled = NEVER;
        this->___t_reactions[0] = &this->___reaction_0;
        this->___t.reactions = &this->___t_reactions[0];
        this->___t.number_of_reactions = 1;
        this->___t.is_timer = true;
    }

    static void reaction_function_0(void *instance_args)
    {
        source_t *self = (source_t *)instance_args;
        source_y_t *y = &self->__y;
        self->count++;
        std::cout << "Source sending " << self->count << "." << std::endl;
        SET((template_port_struct *)y, self->count);
    }
};
// =============== END reactor class Source

// =============== START reactor class Test
typedef struct
{
    int value;
    bool is_present;
    int num_destinations;
} test_x_t;
typedef struct
{
    trigger_t *trigger;
    bool is_present;
    bool has_value;
    token_t *token;
} test_shutdown_t;
class test_t
{
public:
    int count;
    test_shutdown_t __shutdown;
    test_x_t *__x;
    reaction_t ___reaction_0;
    bool *__reaction_0_outputs_are_present[0];
    int __reaction_0_num_outputs;
    trigger_t **__reaction_0_triggers[0];
    int __reaction_0_triggered_sizes[0];
    reaction_t ___reaction_1;
    bool *__reaction_1_outputs_are_present[0];
    int __reaction_1_num_outputs;
    trigger_t **__reaction_1_triggers[0];
    int __reaction_1_triggered_sizes[0];
    trigger_t ___shutdown;
    reaction_t *___shutdown_reactions[1];
    trigger_t ___x;
    reaction_t *___x_reactions[1];

    test_t()
    {
        this->__shutdown.trigger = &this->___shutdown;
        this->__reaction_0_num_outputs = 0;
        this->___reaction_0.function = reaction_function_0;
        this->___reaction_0.self = this;
        this->___reaction_0.num_outputs = 0;
        this->___reaction_0.output_produced = this->__reaction_0_outputs_are_present;
        this->___reaction_0.triggered_sizes = this->__reaction_0_triggered_sizes;
        this->___reaction_0.triggers = this->__reaction_0_triggers;
        this->___reaction_0.deadline_violation_handler = NULL;
        this->__reaction_1_num_outputs = 0;
        this->___reaction_1.function = reaction_function_1;
        this->___reaction_1.self = this;
        this->___reaction_1.num_outputs = 0;
        this->___reaction_1.output_produced = this->__reaction_1_outputs_are_present;
        this->___reaction_1.triggered_sizes = this->__reaction_1_triggered_sizes;
        this->___reaction_1.triggers = this->__reaction_1_triggers;
        this->___reaction_1.deadline_violation_handler = NULL;
        this->___shutdown.scheduled = NEVER;
        this->___shutdown_reactions[0] = &this->___reaction_1;
        this->___shutdown.reactions = &this->___shutdown_reactions[0];
        this->___shutdown.number_of_reactions = 1;
        this->___shutdown.is_physical = false;
        this->___shutdown.drop = false;
        this->___shutdown.element_size = 0;
        this->___x.scheduled = NEVER;
        this->___x_reactions[0] = &this->___reaction_0;
        this->___x.reactions = &this->___x_reactions[0];
        this->___x.number_of_reactions = 1;
        this->___x.element_size = sizeof(int);
    }

    static void reaction_function_0(void *instance_args)
    {
        test_t *self = (test_t *)instance_args;
        test_x_t *x = self->__x;
        int x_width = -2;
        self->count++;                                     // local variables declared here that are not state variables should be strongly discouraged
        std::cout << "Received " << x->value << std::endl; // Or x->get()
        if (x->value != self->count)
        {                                                                  // Or x->get()
            std::cerr << "FAILURE: Expected " << self->count << std::endl; // could be this->count as well
            exit(1);
        }
    }
    static void reaction_function_1(void *instance_args)
    {
        test_t *self = (test_t *)instance_args;
        // Expose the action struct as a local variable whose name matches the action name.
        test_shutdown_t *shutdown = &self->__shutdown;
        // Set the fields of the action struct to match the current trigger.
        shutdown->is_present = self->___shutdown.is_present;
        shutdown->has_value = ((self->___shutdown.token) != NULL && (self->___shutdown.token)->value != NULL);
        shutdown->token = (self->___shutdown.token);
        if (self->count == 0)
        {
            std::cerr << "FAILURE: No data received." << std::endl;
        }
    }
};

// =============== END reactor class Test

// =============== START reactor class Composition
class composition_t
{
public:
    bool hasContents;

    composition_t()
    {
    }
};
// =============== END reactor class Composition

char *__default_argv[] = {"X", "-f", "true", "-o", "10", "sec"};
void __set_default_command_line_options()
{
    default_argc = 6;
    default_argv = __default_argv;
}
// Array of pointers to timer triggers to start the timers in __start_timers().
trigger_t *__timer_triggers[1];
int __timer_triggers_size = 1;
// Array of pointers to shutdown triggers.
trigger_t *__shutdown_triggers[1];
int __shutdown_triggers_size = 1;
trigger_t *__action_for_port(int port_id)
{
    return NULL;
}
void __initialize_trigger_objects()
{
    __tokens_with_ref_count_size = 1;
    __tokens_with_ref_count = (token_present_t *)malloc(1 * sizeof(token_present_t));
    // Create the array that will contain pointers to is_present fields to reset on each step.
    __is_present_fields_size = 2;
    __is_present_fields = (bool **)malloc(2 * sizeof(bool *));
    // ************* Instance Composition of class Composition
    composition_t *composition_self = new composition_t();
    //***** Start initializing Composition
    // ************* Instance Composition.s of class Source
    source_t *composition_s_self = new source_t();
    //***** Start initializing Composition.s
    composition_s_self->period = SEC(2);
    static int composition_s_initial_count = 0;
    composition_s_self->count = composition_s_initial_count;
    // Reaction 0 of Composition.s triggers 1 downstream reactions through port Composition.s.y.
    composition_s_self->___reaction_0.triggered_sizes[0] = 1;
    // For reaction 0 of Composition.s, allocate an
    // array of trigger pointers for downstream reactions through port Composition.s.y
    trigger_t **composition_s_0_0 = (trigger_t **)malloc(1 * sizeof(trigger_t *));
    composition_s_self->___reaction_0.triggers[0] = composition_s_0_0;
    composition_s_self->___t.offset = SEC(1);
    composition_s_self->___t.period = SEC(2);
    __timer_triggers[0] = &composition_s_self->___t;
    composition_s_self->__y.num_destinations = 1;
    //***** End initializing Composition.s
    // ************* Instance Composition.d of class Test
    test_t *composition_d_self = new test_t();
    //***** Start initializing Composition.d
    static int composition_d_initial_count = 0;
    composition_d_self->count = composition_d_initial_count;
    composition_d_self->___shutdown.offset = 0;
    composition_d_self->___shutdown.period = 0;
    __shutdown_triggers[0] = &composition_d_self->___shutdown;
    composition_d_self->___shutdown.token = __create_token(0);
    composition_d_self->___shutdown.is_present = false;
    __tokens_with_ref_count[0].token = &composition_d_self->___shutdown.token;
    __tokens_with_ref_count[0].is_present = &composition_d_self->___shutdown.is_present;
    __tokens_with_ref_count[0].reset_is_present = true;
    //***** End initializing Composition.d
    //***** End initializing Composition
    // Populate arrays of trigger pointers.
    // Point to destination port Composition.d.x's trigger struct.
    composition_s_0_0[0] = &composition_d_self->___x;
    // doDeferredInitialize
    composition_d_self->__x = NULL;
    // Connect inputs and outputs for reactor Composition.
    // Connect Composition.s.y to input port Composition.d.x
    composition_d_self->__x = (test_x_t *)&composition_s_self->__y;
    // Connect inputs and outputs for reactor Composition.s.
    // END Connect inputs and outputs for reactor Composition.s.
    // Connect inputs and outputs for reactor Composition.d.
    // END Connect inputs and outputs for reactor Composition.d.
    // END Connect inputs and outputs for reactor Composition.
    // Add action Composition.d.shutdown to array of is_present fields.
    __is_present_fields[0] = &composition_d_self->__shutdown.is_present;
    // Add port Composition.s.y to array of is_present fields.
    __is_present_fields[1] = &composition_s_self->__y.is_present;
    composition_s_self->___reaction_0.chain_id = 1;
    // index is the OR of level 0 and
    // deadline 140737488355327 shifted left 16 bits.
    composition_s_self->___reaction_0.index = 0x7fffffffffff0000LL;
    composition_d_self->___reaction_0.chain_id = 1;
    // index is the OR of level 1 and
    // deadline 140737488355327 shifted left 16 bits.
    composition_d_self->___reaction_0.index = 0x7fffffffffff0001LL;
    composition_d_self->___reaction_1.chain_id = 1;
    // index is the OR of level 2 and
    // deadline 140737488355327 shifted left 16 bits.
    composition_d_self->___reaction_1.index = 0x7fffffffffff0002LL;
}
void __start_timers()
{

    for (int i = 0; i < __timer_triggers_size; i++)
    {
        __schedule(__timer_triggers[i], 0LL, NULL);
    }
}
void logical_time_complete(instant_t time)
{
}
instant_t next_event_time(instant_t time)
{
    return time;
}
bool __wrapup()
{
    __start_time_step(); // To free memory allocated for actions.
    for (int i = 0; i < __shutdown_triggers_size; i++)
    {
        __schedule(__shutdown_triggers[i], 0LL, NULL);
    }
    // Return true if there are shutdown actions.
    return (__shutdown_triggers_size > 0);
}
void __termination() {}
